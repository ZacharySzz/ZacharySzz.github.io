{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u6211\u7684\u535a\u5ba2\u4e3b\u9875 \u00b6","title":"\u4e3b\u9875"},{"location":"#_1","text":"","title":"\u6211\u7684\u535a\u5ba2\u4e3b\u9875"},{"location":"about/","text":"Welcome to MkDocs \u00b6 For full documentation visit mkdocs.org . Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"\u5173\u4e8e"},{"location":"about/#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"about/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"about/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/","text":"**\u4e00\u3001**Spring Boot \u5165\u95e8 \u00b6 1\u3001Spring Boot \u7b80\u4ecb \u00b6 \u7b80\u5316Spring\u5e94\u7528\u5f00\u53d1\u7684\u4e00\u4e2a\u6846\u67b6\uff1b \u6574\u4e2aSpring\u6280\u672f\u6808\u7684\u4e00\u4e2a\u5927\u6574\u5408\uff1b J2EE\u5f00\u53d1\u7684\u4e00\u7ad9\u5f0f\u89e3\u51b3\u65b9\u6848\uff1b 2\u3001\u5fae\u670d\u52a1 \u00b6 2014\uff0cmartin fowler \u5fae\u670d\u52a1\uff1a\u67b6\u6784\u98ce\u683c\uff08\u670d\u52a1\u5fae\u5316\uff09 \u4e00\u4e2a\u5e94\u7528\u5e94\u8be5\u662f\u4e00\u7ec4\u5c0f\u578b\u670d\u52a1\uff1b\u53ef\u4ee5\u901a\u8fc7HTTP\u7684\u65b9\u5f0f\u8fdb\u884c\u4e92\u901a\uff1b \u5355\u4f53\u5e94\u7528\uff1aALL IN ONE \u5fae\u670d\u52a1\uff1a\u6bcf\u4e00\u4e2a\u529f\u80fd\u5143\u7d20\u6700\u7ec8\u90fd\u662f\u4e00\u4e2a\u53ef\u72ec\u7acb\u66ff\u6362\u548c\u72ec\u7acb\u5347\u7ea7\u7684\u8f6f\u4ef6\u5355\u5143\uff1b \u8be6\u7ec6\u53c2\u7167\u5fae\u670d\u52a1\u6587\u6863 3\u3001\u73af\u5883\u51c6\u5907 \u00b6 http://www.gulixueyuan.com/ \u8c37\u7c92\u5b66\u9662 \u73af\u5883\u7ea6\u675f \u2013jdk1.8\uff1aSpring Boot \u63a8\u8350jdk1.7\u53ca\u4ee5\u4e0a\uff1bjava version \"1.8.0_112\" \u2013maven3.x\uff1amaven 3.3\u4ee5\u4e0a\u7248\u672c\uff1bApache Maven 3.3.9 \u2013IntelliJIDEA2017\uff1aIntelliJ IDEA 2017.2.2 x64\u3001STS \u2013SpringBoot 1.5.9.RELEASE\uff1a1.5.9\uff1b \u7edf\u4e00\u73af\u5883\uff1b 1\u3001MAVEN\u8bbe\u7f6e\uff1b \u00b6 \u7ed9maven \u7684settings.xml\u914d\u7f6e\u6587\u4ef6\u7684profiles\u6807\u7b7e\u6dfb\u52a0 <profile> <id> jdk-1.8 </id> <activation> <activeByDefault> true </activeByDefault> <jdk> 1.8 </jdk> </activation> <properties> <maven.compiler.source> 1.8 </maven.compiler.source> <maven.compiler.target> 1.8 </maven.compiler.target> <maven.compiler.compilerVersion> 1.8 </maven.compiler.compilerVersion> </properties> </profile> 2\u3001IDEA\u8bbe\u7f6e \u00b6 \u6574\u5408maven\u8fdb\u6765\uff1b 4\u3001Spring Boot HelloWorld \u00b6 \u4e00\u4e2a\u529f\u80fd\uff1a \u6d4f\u89c8\u5668\u53d1\u9001hello\u8bf7\u6c42\uff0c\u670d\u52a1\u5668\u63a5\u53d7\u8bf7\u6c42\u5e76\u5904\u7406\uff0c\u54cd\u5e94Hello World\u5b57\u7b26\u4e32\uff1b 1\u3001\u521b\u5efa\u4e00\u4e2amaven\u5de5\u7a0b\uff1b\uff08jar\uff09 \u00b6 2\u3001\u5bfc\u5165spring boot\u76f8\u5173\u7684\u4f9d\u8d56 \u00b6 <parent> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-parent </artifactId> <version> 1.5.9.RELEASE </version> </parent> <dependencies> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-web </artifactId> </dependency> </dependencies> 3\u3001\u7f16\u5199\u4e00\u4e2a\u4e3b\u7a0b\u5e8f\uff1b\u542f\u52a8Spring Boot\u5e94\u7528 \u00b6 /** * @SpringBootApplication \u6765\u6807\u6ce8\u4e00\u4e2a\u4e3b\u7a0b\u5e8f\u7c7b\uff0c\u8bf4\u660e\u8fd9\u662f\u4e00\u4e2aSpring Boot\u5e94\u7528 */ @SpringBootApplication public class HelloWorldMainApplication { public static void main ( String [] args ) { // Spring\u5e94\u7528\u542f\u52a8\u8d77\u6765 SpringApplication . run ( HelloWorldMainApplication . class , args ); } } 4\u3001\u7f16\u5199\u76f8\u5173\u7684Controller\u3001Service \u00b6 @Controller public class HelloController { @ResponseBody @RequestMapping ( \"/hello\" ) public String hello (){ return \"Hello World!\" ; } } 5\u3001\u8fd0\u884c\u4e3b\u7a0b\u5e8f\u6d4b\u8bd5 \u00b6 6\u3001\u7b80\u5316\u90e8\u7f72 \u00b6 <!-- \u8fd9\u4e2a\u63d2\u4ef6\uff0c\u53ef\u4ee5\u5c06\u5e94\u7528\u6253\u5305\u6210\u4e00\u4e2a\u53ef\u6267\u884c\u7684jar\u5305\uff1b--> <build> <plugins> <plugin> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-maven-plugin </artifactId> </plugin> </plugins> </build> \u5c06\u8fd9\u4e2a\u5e94\u7528\u6253\u6210jar\u5305\uff0c\u76f4\u63a5\u4f7f\u7528java -jar\u7684\u547d\u4ee4\u8fdb\u884c\u6267\u884c\uff1b 5\u3001Hello World\u63a2\u7a76 \u00b6 1\u3001POM\u6587\u4ef6 \u00b6 1\u3001\u7236\u9879\u76ee \u00b6 <parent> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-parent </artifactId> <version> 1.5.9.RELEASE </version> </parent> \u4ed6\u7684\u7236\u9879\u76ee\u662f <parent> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-dependencies </artifactId> <version> 1.5.9.RELEASE </version> <relativePath> ../../spring-boot-dependencies </relativePath> </parent> \u4ed6\u6765\u771f\u6b63\u7ba1\u7406Spring Boot\u5e94\u7528\u91cc\u9762\u7684\u6240\u6709\u4f9d\u8d56\u7248\u672c\uff1b Spring Boot\u7684\u7248\u672c\u4ef2\u88c1\u4e2d\u5fc3\uff1b \u4ee5\u540e\u6211\u4eec\u5bfc\u5165\u4f9d\u8d56\u9ed8\u8ba4\u662f\u4e0d\u9700\u8981\u5199\u7248\u672c\uff1b\uff08\u6ca1\u6709\u5728dependencies\u91cc\u9762\u7ba1\u7406\u7684\u4f9d\u8d56\u81ea\u7136\u9700\u8981\u58f0\u660e\u7248\u672c\u53f7\uff09 2\u3001\u542f\u52a8\u5668 \u00b6 <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-web </artifactId> </dependency> spring-boot-starter - web \uff1a \u200b spring-boot-starter\uff1aspring-boot\u573a\u666f\u542f\u52a8\u5668\uff1b\u5e2e\u6211\u4eec\u5bfc\u5165\u4e86web\u6a21\u5757\u6b63\u5e38\u8fd0\u884c\u6240\u4f9d\u8d56\u7684\u7ec4\u4ef6\uff1b Spring Boot\u5c06\u6240\u6709\u7684\u529f\u80fd\u573a\u666f\u90fd\u62bd\u53d6\u51fa\u6765\uff0c\u505a\u6210\u4e00\u4e2a\u4e2a\u7684starters\uff08\u542f\u52a8\u5668\uff09\uff0c\u53ea\u9700\u8981\u5728\u9879\u76ee\u91cc\u9762\u5f15\u5165\u8fd9\u4e9bstarter\u76f8\u5173\u573a\u666f\u7684\u6240\u6709\u4f9d\u8d56\u90fd\u4f1a\u5bfc\u5165\u8fdb\u6765\u3002\u8981\u7528\u4ec0\u4e48\u529f\u80fd\u5c31\u5bfc\u5165\u4ec0\u4e48\u573a\u666f\u7684\u542f\u52a8\u5668 2\u3001\u4e3b\u7a0b\u5e8f\u7c7b\uff0c\u4e3b\u5165\u53e3\u7c7b \u00b6 /** * @SpringBootApplication \u6765\u6807\u6ce8\u4e00\u4e2a\u4e3b\u7a0b\u5e8f\u7c7b\uff0c\u8bf4\u660e\u8fd9\u662f\u4e00\u4e2aSpring Boot\u5e94\u7528 */ @SpringBootApplication public class HelloWorldMainApplication { public static void main ( String [] args ) { // Spring\u5e94\u7528\u542f\u52a8\u8d77\u6765 SpringApplication . run ( HelloWorldMainApplication . class , args ); } } @ SpringBootApplication : Spring Boot\u5e94\u7528\u6807\u6ce8\u5728\u67d0\u4e2a\u7c7b\u4e0a\u8bf4\u660e\u8fd9\u4e2a\u7c7b\u662fSpringBoot\u7684\u4e3b\u914d\u7f6e\u7c7b\uff0cSpringBoot\u5c31\u5e94\u8be5\u8fd0\u884c\u8fd9\u4e2a\u7c7b\u7684main\u65b9\u6cd5\u6765\u542f\u52a8SpringBoot\u5e94\u7528\uff1b @Target ( ElementType . TYPE ) @Retention ( RetentionPolicy . RUNTIME ) @Documented @Inherited @SpringBootConfiguration @EnableAutoConfiguration @ComponentScan ( excludeFilters = { @Filter ( type = FilterType . CUSTOM , classes = TypeExcludeFilter . class ), @Filter ( type = FilterType . CUSTOM , classes = AutoConfigurationExcludeFilter . class ) }) public @interface SpringBootApplication { @ SpringBootConfiguration :Spring Boot\u7684\u914d\u7f6e\u7c7b\uff1b \u200b \u6807\u6ce8\u5728\u67d0\u4e2a\u7c7b\u4e0a\uff0c\u8868\u793a\u8fd9\u662f\u4e00\u4e2aSpring Boot\u7684\u914d\u7f6e\u7c7b\uff1b \u200b @ Configuration :\u914d\u7f6e\u7c7b\u4e0a\u6765\u6807\u6ce8\u8fd9\u4e2a\u6ce8\u89e3\uff1b \u200b \u914d\u7f6e\u7c7b ----- \u914d\u7f6e\u6587\u4ef6\uff1b\u914d\u7f6e\u7c7b\u4e5f\u662f\u5bb9\u5668\u4e2d\u7684\u4e00\u4e2a\u7ec4\u4ef6\uff1b@Component @ EnableAutoConfiguration \uff1a\u5f00\u542f\u81ea\u52a8\u914d\u7f6e\u529f\u80fd\uff1b \u200b \u4ee5\u524d\u6211\u4eec\u9700\u8981\u914d\u7f6e\u7684\u4e1c\u897f\uff0cSpring Boot\u5e2e\u6211\u4eec\u81ea\u52a8\u914d\u7f6e\uff1b@**EnableAutoConfiguration**\u544a\u8bc9SpringBoot\u5f00\u542f\u81ea\u52a8\u914d\u7f6e\u529f\u80fd\uff1b\u8fd9\u6837\u81ea\u52a8\u914d\u7f6e\u624d\u80fd\u751f\u6548\uff1b @AutoConfigurationPackage @Import ( EnableAutoConfigurationImportSelector . class ) public @interface EnableAutoConfiguration { \u200b @ AutoConfigurationPackage \uff1a\u81ea\u52a8\u914d\u7f6e\u5305 \u200b @ Import (AutoConfigurationPackages.Registrar.class)\uff1a \u200b Spring\u7684\u5e95\u5c42\u6ce8\u89e3@Import\uff0c\u7ed9\u5bb9\u5668\u4e2d\u5bfc\u5165\u4e00\u4e2a\u7ec4\u4ef6\uff1b\u5bfc\u5165\u7684\u7ec4\u4ef6\u7531AutoConfigurationPackages.Registrar.class\uff1b \u5c06\u4e3b\u914d\u7f6e\u7c7b\uff08@SpringBootApplication\u6807\u6ce8\u7684\u7c7b\uff09\u7684\u6240\u5728\u5305\u53ca\u4e0b\u9762\u6240\u6709\u5b50\u5305\u91cc\u9762\u7684\u6240\u6709\u7ec4\u4ef6\u626b\u63cf\u5230Spring\u5bb9\u5668\uff1b \u200b @ Import (EnableAutoConfigurationImportSelector.class)\uff1b \u200b \u7ed9\u5bb9\u5668\u4e2d\u5bfc\u5165\u7ec4\u4ef6\uff1f \u200b EnableAutoConfigurationImportSelector \uff1a\u5bfc\u5165\u54ea\u4e9b\u7ec4\u4ef6\u7684\u9009\u62e9\u5668\uff1b \u200b \u5c06\u6240\u6709\u9700\u8981\u5bfc\u5165\u7684\u7ec4\u4ef6\u4ee5\u5168\u7c7b\u540d\u7684\u65b9\u5f0f\u8fd4\u56de\uff1b\u8fd9\u4e9b\u7ec4\u4ef6\u5c31\u4f1a\u88ab\u6dfb\u52a0\u5230\u5bb9\u5668\u4e2d\uff1b \u200b \u4f1a\u7ed9\u5bb9\u5668\u4e2d\u5bfc\u5165\u975e\u5e38\u591a\u7684\u81ea\u52a8\u914d\u7f6e\u7c7b\uff08xxxAutoConfiguration\uff09\uff1b\u5c31\u662f\u7ed9\u5bb9\u5668\u4e2d\u5bfc\u5165\u8fd9\u4e2a\u573a\u666f\u9700\u8981\u7684\u6240\u6709\u7ec4\u4ef6\uff0c\u5e76\u914d\u7f6e\u597d\u8fd9\u4e9b\u7ec4\u4ef6\uff1b \u6709\u4e86\u81ea\u52a8\u914d\u7f6e\u7c7b\uff0c\u514d\u53bb\u4e86\u6211\u4eec\u624b\u52a8\u7f16\u5199\u914d\u7f6e\u6ce8\u5165\u529f\u80fd\u7ec4\u4ef6\u7b49\u7684\u5de5\u4f5c\uff1b \u200b SpringFactoriesLoader.loadFactoryNames(EnableAutoConfiguration.class,classLoader)\uff1b ==Spring Boot\u5728\u542f\u52a8\u7684\u65f6\u5019\u4ece\u7c7b\u8def\u5f84\u4e0b\u7684META-INF/spring.factories\u4e2d\u83b7\u53d6EnableAutoConfiguration\u6307\u5b9a\u7684\u503c\uff0c\u5c06\u8fd9\u4e9b\u503c\u4f5c\u4e3a\u81ea\u52a8\u914d\u7f6e\u7c7b\u5bfc\u5165\u5230\u5bb9\u5668\u4e2d\uff0c\u81ea\u52a8\u914d\u7f6e\u7c7b\u5c31\u751f\u6548\uff0c\u5e2e\u6211\u4eec\u8fdb\u884c\u81ea\u52a8\u914d\u7f6e\u5de5\u4f5c\uff1b==\u4ee5\u524d\u6211\u4eec\u9700\u8981\u81ea\u5df1\u914d\u7f6e\u7684\u4e1c\u897f\uff0c\u81ea\u52a8\u914d\u7f6e\u7c7b\u90fd\u5e2e\u6211\u4eec\uff1b J2EE\u7684\u6574\u4f53\u6574\u5408\u89e3\u51b3\u65b9\u6848\u548c\u81ea\u52a8\u914d\u7f6e\u90fd\u5728spring-boot-autoconfigure-1.5.9.RELEASE.jar\uff1b \u200b Spring\u6ce8\u89e3\u7248\uff08\u8c37\u7c92\u5b66\u9662\uff09 6\u3001\u4f7f\u7528Spring Initializer\u5feb\u901f\u521b\u5efaSpring Boot\u9879\u76ee \u00b6 1\u3001IDEA\uff1a\u4f7f\u7528 Spring Initializer\u5feb\u901f\u521b\u5efa\u9879\u76ee \u00b6 IDE\u90fd\u652f\u6301\u4f7f\u7528Spring\u7684\u9879\u76ee\u521b\u5efa\u5411\u5bfc\u5feb\u901f\u521b\u5efa\u4e00\u4e2aSpring Boot\u9879\u76ee\uff1b \u9009\u62e9\u6211\u4eec\u9700\u8981\u7684\u6a21\u5757\uff1b\u5411\u5bfc\u4f1a\u8054\u7f51\u521b\u5efaSpring Boot\u9879\u76ee\uff1b \u9ed8\u8ba4\u751f\u6210\u7684Spring Boot\u9879\u76ee\uff1b \u4e3b\u7a0b\u5e8f\u5df2\u7ecf\u751f\u6210\u597d\u4e86\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6211\u4eec\u81ea\u5df1\u7684\u903b\u8f91 resources\u6587\u4ef6\u5939\u4e2d\u76ee\u5f55\u7ed3\u6784 static\uff1a\u4fdd\u5b58\u6240\u6709\u7684\u9759\u6001\u8d44\u6e90\uff1b js css images\uff1b templates\uff1a\u4fdd\u5b58\u6240\u6709\u7684\u6a21\u677f\u9875\u9762\uff1b\uff08Spring Boot\u9ed8\u8ba4jar\u5305\u4f7f\u7528\u5d4c\u5165\u5f0f\u7684Tomcat\uff0c\u9ed8\u8ba4\u4e0d\u652f\u6301JSP\u9875\u9762\uff09\uff1b\u53ef\u4ee5\u4f7f\u7528\u6a21\u677f\u5f15\u64ce\uff08freemarker\u3001thymeleaf\uff09\uff1b application.properties\uff1aSpring Boot\u5e94\u7528\u7684\u914d\u7f6e\u6587\u4ef6\uff1b\u53ef\u4ee5\u4fee\u6539\u4e00\u4e9b\u9ed8\u8ba4\u8bbe\u7f6e\uff1b 2\u3001STS\u4f7f\u7528 Spring Starter Project\u5feb\u901f\u521b\u5efa\u9879\u76ee \u00b6 \u4e8c\u3001\u914d\u7f6e\u6587\u4ef6 \u00b6 1\u3001\u914d\u7f6e\u6587\u4ef6 \u00b6 SpringBoot\u4f7f\u7528\u4e00\u4e2a\u5168\u5c40\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u914d\u7f6e\u6587\u4ef6\u540d\u662f\u56fa\u5b9a\u7684\uff1b \u2022application.properties \u2022application.yml \u914d\u7f6e\u6587\u4ef6\u7684\u4f5c\u7528\uff1a\u4fee\u6539SpringBoot\u81ea\u52a8\u914d\u7f6e\u7684\u9ed8\u8ba4\u503c\uff1bSpringBoot\u5728\u5e95\u5c42\u90fd\u7ed9\u6211\u4eec\u81ea\u52a8\u914d\u7f6e\u597d\uff1b YAML\uff08YAML Ain't Markup Language\uff09 \u200b YAML A Markup Language\uff1a\u662f\u4e00\u4e2a\u6807\u8bb0\u8bed\u8a00 \u200b YAML isn't Markup Language\uff1a\u4e0d\u662f\u4e00\u4e2a\u6807\u8bb0\u8bed\u8a00\uff1b \u6807\u8bb0\u8bed\u8a00\uff1a \u200b \u4ee5\u524d\u7684\u914d\u7f6e\u6587\u4ef6\uff1b\u5927\u591a\u90fd\u4f7f\u7528\u7684\u662f **xxxx.xml**\u6587\u4ef6\uff1b \u200b YAML\uff1a \u4ee5\u6570\u636e\u4e3a\u4e2d\u5fc3 \uff0c\u6bd4json\u3001xml\u7b49\u66f4\u9002\u5408\u505a\u914d\u7f6e\u6587\u4ef6\uff1b \u200b YAML\uff1a\u914d\u7f6e\u4f8b\u5b50 server : port : 8081 \u200b XML\uff1a <server> <port> 8081 </port> </server> 2\u3001YAML\u8bed\u6cd5\uff1a \u00b6 1\u3001\u57fa\u672c\u8bed\u6cd5 \u00b6 k:(\u7a7a\u683c)v\uff1a\u8868\u793a\u4e00\u5bf9\u952e\u503c\u5bf9\uff08\u7a7a\u683c\u5fc5\u987b\u6709\uff09\uff1b \u4ee5**\u7a7a\u683c**\u7684\u7f29\u8fdb\u6765\u63a7\u5236\u5c42\u7ea7\u5173\u7cfb\uff1b\u53ea\u8981\u662f\u5de6\u5bf9\u9f50\u7684\u4e00\u5217\u6570\u636e\uff0c\u90fd\u662f\u540c\u4e00\u4e2a\u5c42\u7ea7\u7684 server : port : 8081 path : /hello \u5c5e\u6027\u548c\u503c\u4e5f\u662f\u5927\u5c0f\u5199\u654f\u611f\uff1b 2\u3001\u503c\u7684\u5199\u6cd5 \u00b6 \u5b57\u9762\u91cf\uff1a\u666e\u901a\u7684\u503c\uff08\u6570\u5b57\uff0c\u5b57\u7b26\u4e32\uff0c\u5e03\u5c14\uff09 \u00b6 \u200b k: v\uff1a\u5b57\u9762\u76f4\u63a5\u6765\u5199\uff1b \u200b \u5b57\u7b26\u4e32\u9ed8\u8ba4\u4e0d\u7528\u52a0\u4e0a\u5355\u5f15\u53f7\u6216\u8005\u53cc\u5f15\u53f7\uff1b \u200b \"\"\uff1a\u53cc\u5f15\u53f7\uff1b\u4e0d\u4f1a\u8f6c\u4e49\u5b57\u7b26\u4e32\u91cc\u9762\u7684\u7279\u6b8a\u5b57\u7b26\uff1b\u7279\u6b8a\u5b57\u7b26\u4f1a\u4f5c\u4e3a\u672c\u8eab\u60f3\u8868\u793a\u7684\u610f\u601d \u200b name: \"zhangsan \\n lisi\"\uff1a\u8f93\u51fa\uff1bzhangsan \u6362\u884c lisi \u200b ''\uff1a\u5355\u5f15\u53f7\uff1b\u4f1a\u8f6c\u4e49\u7279\u6b8a\u5b57\u7b26\uff0c\u7279\u6b8a\u5b57\u7b26\u6700\u7ec8\u53ea\u662f\u4e00\u4e2a\u666e\u901a\u7684\u5b57\u7b26\u4e32\u6570\u636e \u200b name: \u2018zhangsan \\n lisi\u2019\uff1a\u8f93\u51fa\uff1bzhangsan \\n lisi \u5bf9\u8c61\u3001Map\uff08\u5c5e\u6027\u548c\u503c\uff09\uff08\u952e\u503c\u5bf9\uff09\uff1a \u00b6 \u200b k: v\uff1a\u5728\u4e0b\u4e00\u884c\u6765\u5199\u5bf9\u8c61\u7684\u5c5e\u6027\u548c\u503c\u7684\u5173\u7cfb\uff1b\u6ce8\u610f\u7f29\u8fdb \u200b \u5bf9\u8c61\u8fd8\u662fk: v\u7684\u65b9\u5f0f friends : lastName : zhangsan age : 20 \u884c\u5185\u5199\u6cd5\uff1a friends : { lastName : zhangsan , age : 18 } \u6570\u7ec4\uff08List\u3001Set\uff09\uff1a \u00b6 \u7528- \u503c\u8868\u793a\u6570\u7ec4\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20 pets : - cat - dog - pig \u884c\u5185\u5199\u6cd5 pets : [ cat , dog , pig ] 3\u3001\u914d\u7f6e\u6587\u4ef6\u503c\u6ce8\u5165 \u00b6 \u914d\u7f6e\u6587\u4ef6 person : lastName : hello age : 18 boss : false birth : 2017/12/12 maps : { k1 : v1 , k2 : 12 } lists : - lisi - zhaoliu dog : name : \u5c0f\u72d7 age : 12 javaBean\uff1a /** * \u5c06\u914d\u7f6e\u6587\u4ef6\u4e2d\u914d\u7f6e\u7684\u6bcf\u4e00\u4e2a\u5c5e\u6027\u7684\u503c\uff0c\u6620\u5c04\u5230\u8fd9\u4e2a\u7ec4\u4ef6\u4e2d * @ConfigurationProperties\uff1a\u544a\u8bc9SpringBoot\u5c06\u672c\u7c7b\u4e2d\u7684\u6240\u6709\u5c5e\u6027\u548c\u914d\u7f6e\u6587\u4ef6\u4e2d\u76f8\u5173\u7684\u914d\u7f6e\u8fdb\u884c\u7ed1\u5b9a\uff1b * prefix = \"person\"\uff1a\u914d\u7f6e\u6587\u4ef6\u4e2d\u54ea\u4e2a\u4e0b\u9762\u7684\u6240\u6709\u5c5e\u6027\u8fdb\u884c\u4e00\u4e00\u6620\u5c04 * * \u53ea\u6709\u8fd9\u4e2a\u7ec4\u4ef6\u662f\u5bb9\u5668\u4e2d\u7684\u7ec4\u4ef6\uff0c\u624d\u80fd\u5bb9\u5668\u63d0\u4f9b\u7684@ConfigurationProperties\u529f\u80fd\uff1b * */ @Component @ConfigurationProperties ( prefix = \"person\" ) public class Person { private String lastName ; private Integer age ; private Boolean boss ; private Date birth ; private Map < String , Object > maps ; private List < Object > lists ; private Dog dog ; \u6211\u4eec\u53ef\u4ee5\u5bfc\u5165\u914d\u7f6e\u6587\u4ef6\u5904\u7406\u5668\uff0c\u4ee5\u540e\u7f16\u5199\u914d\u7f6e\u5c31\u6709\u63d0\u793a\u4e86 <!--\u5bfc\u5165\u914d\u7f6e\u6587\u4ef6\u5904\u7406\u5668\uff0c\u914d\u7f6e\u6587\u4ef6\u8fdb\u884c\u7ed1\u5b9a\u5c31\u4f1a\u6709\u63d0\u793a--> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-configuration-processor </artifactId> <optional> true </optional> </dependency> 1\u3001properties\u914d\u7f6e\u6587\u4ef6\u5728idea\u4e2d\u9ed8\u8ba4utf-8\u53ef\u80fd\u4f1a\u4e71\u7801 \u00b6 \u8c03\u6574 2\u3001@Value\u83b7\u53d6\u503c\u548c@ConfigurationProperties\u83b7\u53d6\u503c\u6bd4\u8f83 \u00b6 @ConfigurationProperties @Value \u529f\u80fd \u6279\u91cf\u6ce8\u5165\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u5c5e\u6027 \u4e00\u4e2a\u4e2a\u6307\u5b9a \u677e\u6563\u7ed1\u5b9a\uff08\u677e\u6563\u8bed\u6cd5\uff09 \u652f\u6301 \u4e0d\u652f\u6301 SpEL \u4e0d\u652f\u6301 \u652f\u6301 JSR303\u6570\u636e\u6821\u9a8c \u652f\u6301 \u4e0d\u652f\u6301 \u590d\u6742\u7c7b\u578b\u5c01\u88c5 \u652f\u6301 \u4e0d\u652f\u6301 \u914d\u7f6e\u6587\u4ef6yml\u8fd8\u662fproperties\u4ed6\u4eec\u90fd\u80fd\u83b7\u53d6\u5230\u503c\uff1b \u5982\u679c\u8bf4\uff0c\u6211\u4eec\u53ea\u662f\u5728\u67d0\u4e2a\u4e1a\u52a1\u903b\u8f91\u4e2d\u9700\u8981\u83b7\u53d6\u4e00\u4e0b\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u67d0\u9879\u503c\uff0c\u4f7f\u7528@Value\uff1b \u5982\u679c\u8bf4\uff0c\u6211\u4eec\u4e13\u95e8\u7f16\u5199\u4e86\u4e00\u4e2ajavaBean\u6765\u548c\u914d\u7f6e\u6587\u4ef6\u8fdb\u884c\u6620\u5c04\uff0c\u6211\u4eec\u5c31\u76f4\u63a5\u4f7f\u7528@ConfigurationProperties\uff1b 3\u3001\u914d\u7f6e\u6587\u4ef6\u6ce8\u5165\u503c\u6570\u636e\u6821\u9a8c \u00b6 @Component @ConfigurationProperties ( prefix = \"person\" ) @Validated public class Person { /** * <bean class=\"Person\"> * <property name=\"lastName\" value=\"\u5b57\u9762\u91cf/${key}\u4ece\u73af\u5883\u53d8\u91cf\u3001\u914d\u7f6e\u6587\u4ef6\u4e2d\u83b7\u53d6\u503c/#{SpEL}\"></property> * <bean/> */ //lastName\u5fc5\u987b\u662f\u90ae\u7bb1\u683c\u5f0f @Email //@Value(\"${person.last-name}\") private String lastName ; //@Value(\"#{11*2}\") private Integer age ; //@Value(\"true\") private Boolean boss ; private Date birth ; private Map < String , Object > maps ; private List < Object > lists ; private Dog dog ; 4\u3001@PropertySource&@ImportResource&@Bean \u00b6 @ PropertySource \uff1a\u52a0\u8f7d\u6307\u5b9a\u7684\u914d\u7f6e\u6587\u4ef6\uff1b /** * \u5c06\u914d\u7f6e\u6587\u4ef6\u4e2d\u914d\u7f6e\u7684\u6bcf\u4e00\u4e2a\u5c5e\u6027\u7684\u503c\uff0c\u6620\u5c04\u5230\u8fd9\u4e2a\u7ec4\u4ef6\u4e2d * @ConfigurationProperties\uff1a\u544a\u8bc9SpringBoot\u5c06\u672c\u7c7b\u4e2d\u7684\u6240\u6709\u5c5e\u6027\u548c\u914d\u7f6e\u6587\u4ef6\u4e2d\u76f8\u5173\u7684\u914d\u7f6e\u8fdb\u884c\u7ed1\u5b9a\uff1b * prefix = \"person\"\uff1a\u914d\u7f6e\u6587\u4ef6\u4e2d\u54ea\u4e2a\u4e0b\u9762\u7684\u6240\u6709\u5c5e\u6027\u8fdb\u884c\u4e00\u4e00\u6620\u5c04 * * \u53ea\u6709\u8fd9\u4e2a\u7ec4\u4ef6\u662f\u5bb9\u5668\u4e2d\u7684\u7ec4\u4ef6\uff0c\u624d\u80fd\u5bb9\u5668\u63d0\u4f9b\u7684@ConfigurationProperties\u529f\u80fd\uff1b * @ConfigurationProperties(prefix = \"person\")\u9ed8\u8ba4\u4ece\u5168\u5c40\u914d\u7f6e\u6587\u4ef6\u4e2d\u83b7\u53d6\u503c\uff1b * */ @PropertySource ( value = { \"classpath:person.properties\" }) @Component @ConfigurationProperties ( prefix = \"person\" ) //@Validated public class Person { /** * <bean class=\"Person\"> * <property name=\"lastName\" value=\"\u5b57\u9762\u91cf/${key}\u4ece\u73af\u5883\u53d8\u91cf\u3001\u914d\u7f6e\u6587\u4ef6\u4e2d\u83b7\u53d6\u503c/#{SpEL}\"></property> * <bean/> */ //lastName\u5fc5\u987b\u662f\u90ae\u7bb1\u683c\u5f0f // @Email //@Value(\"${person.last-name}\") private String lastName ; //@Value(\"#{11*2}\") private Integer age ; //@Value(\"true\") private Boolean boss ; @ ImportResource \uff1a\u5bfc\u5165Spring\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u8ba9\u914d\u7f6e\u6587\u4ef6\u91cc\u9762\u7684\u5185\u5bb9\u751f\u6548\uff1b Spring Boot\u91cc\u9762\u6ca1\u6709Spring\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u6211\u4eec\u81ea\u5df1\u7f16\u5199\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u4e5f\u4e0d\u80fd\u81ea\u52a8\u8bc6\u522b\uff1b \u60f3\u8ba9Spring\u7684\u914d\u7f6e\u6587\u4ef6\u751f\u6548\uff0c\u52a0\u8f7d\u8fdb\u6765\uff1b@**ImportResource**\u6807\u6ce8\u5728\u4e00\u4e2a\u914d\u7f6e\u7c7b\u4e0a @ImportResource ( locations = { \"classpath:beans.xml\" }) \u5bfc\u5165Spring\u7684\u914d\u7f6e\u6587\u4ef6\u8ba9\u5176\u751f\u6548 \u4e0d\u6765\u7f16\u5199Spring\u7684\u914d\u7f6e\u6587\u4ef6 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <beans xmlns= \"http://www.springframework.org/schema/beans\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\" > <bean id= \"helloService\" class= \"com.atguigu.springboot.service.HelloService\" ></bean> </beans> SpringBoot\u63a8\u8350\u7ed9\u5bb9\u5668\u4e2d\u6dfb\u52a0\u7ec4\u4ef6\u7684\u65b9\u5f0f\uff1b\u63a8\u8350\u4f7f\u7528\u5168\u6ce8\u89e3\u7684\u65b9\u5f0f 1\u3001\u914d\u7f6e\u7c7b**@Configuration**------>Spring\u914d\u7f6e\u6587\u4ef6 2\u3001\u4f7f\u7528**@Bean**\u7ed9\u5bb9\u5668\u4e2d\u6dfb\u52a0\u7ec4\u4ef6 /** * @Configuration\uff1a\u6307\u660e\u5f53\u524d\u7c7b\u662f\u4e00\u4e2a\u914d\u7f6e\u7c7b\uff1b\u5c31\u662f\u6765\u66ff\u4ee3\u4e4b\u524d\u7684Spring\u914d\u7f6e\u6587\u4ef6 * * \u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u7528<bean><bean/>\u6807\u7b7e\u6dfb\u52a0\u7ec4\u4ef6 * */ @Configuration public class MyAppConfig { //\u5c06\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u6dfb\u52a0\u5230\u5bb9\u5668\u4e2d\uff1b\u5bb9\u5668\u4e2d\u8fd9\u4e2a\u7ec4\u4ef6\u9ed8\u8ba4\u7684id\u5c31\u662f\u65b9\u6cd5\u540d @Bean public HelloService helloService02 (){ System . out . println ( \"\u914d\u7f6e\u7c7b@Bean\u7ed9\u5bb9\u5668\u4e2d\u6dfb\u52a0\u7ec4\u4ef6\u4e86...\" ); return new HelloService (); } } 4\u3001\u914d\u7f6e\u6587\u4ef6\u5360\u4f4d\u7b26 \u00b6 1\u3001\u968f\u673a\u6570 \u00b6 $ { random . value } \u3001 $ { random . int } \u3001 $ { random . long } $ { random . int ( 10 )} \u3001 $ { random . int [ 1024 , 65536 ] } 2\u3001\u5360\u4f4d\u7b26\u83b7\u53d6\u4e4b\u524d\u914d\u7f6e\u7684\u503c\uff0c\u5982\u679c\u6ca1\u6709\u53ef\u4ee5\u662f\u7528:\u6307\u5b9a\u9ed8\u8ba4\u503c \u00b6 person.last-name = \u5f20\u4e09${random.uuid} person.age = ${random.int} person.birth = 2017/12/15 person.boss = false person.maps.k1 = v1 person.maps.k2 = 14 person.lists = a,b,c person.dog.name = ${person.hello:hello}_dog person.dog.age = 15 5\u3001Profile \u00b6 1\u3001\u591aProfile\u6587\u4ef6 \u00b6 \u6211\u4eec\u5728\u4e3b\u914d\u7f6e\u6587\u4ef6\u7f16\u5199\u7684\u65f6\u5019\uff0c\u6587\u4ef6\u540d\u53ef\u4ee5\u662f application-{profile}.properties/yml \u9ed8\u8ba4\u4f7f\u7528application.properties\u7684\u914d\u7f6e\uff1b 2\u3001yml\u652f\u6301\u591a\u6587\u6863\u5757\u65b9\u5f0f \u00b6 server: port: 8081 spring: profiles: active: prod --- server: port: 8083 spring: profiles: dev --- server: port: 8084 spring: profiles: prod #\u6307\u5b9a\u5c5e\u4e8e\u54ea\u4e2a\u73af\u5883 3\u3001\u6fc0\u6d3b\u6307\u5b9aprofile \u00b6 \u200b 1\u3001\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u6307\u5b9a spring.profiles.active=dev \u200b 2\u3001\u547d\u4ee4\u884c\uff1a \u200b java -jar spring-boot-02-config-0.0.1-SNAPSHOT.jar --spring.profiles.active=dev\uff1b \u200b \u53ef\u4ee5\u76f4\u63a5\u5728\u6d4b\u8bd5\u7684\u65f6\u5019\uff0c\u914d\u7f6e\u4f20\u5165\u547d\u4ee4\u884c\u53c2\u6570 \u200b 3\u3001\u865a\u62df\u673a\u53c2\u6570\uff1b \u200b -Dspring.profiles.active=dev 6\u3001\u914d\u7f6e\u6587\u4ef6\u52a0\u8f7d\u4f4d\u7f6e \u00b6 springboot \u542f\u52a8\u4f1a\u626b\u63cf\u4ee5\u4e0b\u4f4d\u7f6e\u7684application.properties\u6216\u8005application.yml\u6587\u4ef6\u4f5c\u4e3aSpring boot\u7684\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6 \u2013file:./config/ \u2013file:./ \u2013classpath:/config/ \u2013classpath:/ \u4f18\u5148\u7ea7\u7531\u9ad8\u5230\u5e95\uff0c\u9ad8\u4f18\u5148\u7ea7\u7684\u914d\u7f6e\u4f1a\u8986\u76d6\u4f4e\u4f18\u5148\u7ea7\u7684\u914d\u7f6e\uff1b SpringBoot\u4f1a\u4ece\u8fd9\u56db\u4e2a\u4f4d\u7f6e\u5168\u90e8\u52a0\u8f7d\u4e3b\u914d\u7f6e\u6587\u4ef6\uff1b \u4e92\u8865\u914d\u7f6e \uff1b \u6211\u4eec\u8fd8\u53ef\u4ee5\u901a\u8fc7spring.config.location\u6765\u6539\u53d8\u9ed8\u8ba4\u7684\u914d\u7f6e\u6587\u4ef6\u4f4d\u7f6e \u9879\u76ee\u6253\u5305\u597d\u4ee5\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u547d\u4ee4\u884c\u53c2\u6570\u7684\u5f62\u5f0f\uff0c\u542f\u52a8\u9879\u76ee\u7684\u65f6\u5019\u6765\u6307\u5b9a\u914d\u7f6e\u6587\u4ef6\u7684\u65b0\u4f4d\u7f6e\uff1b\u6307\u5b9a\u914d\u7f6e\u6587\u4ef6\u548c\u9ed8\u8ba4\u52a0\u8f7d\u7684\u8fd9\u4e9b\u914d\u7f6e\u6587\u4ef6\u5171\u540c\u8d77\u4f5c\u7528\u5f62\u6210\u4e92\u8865\u914d\u7f6e\uff1b java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar --spring.config.location=G:/application.properties 7\u3001\u5916\u90e8\u914d\u7f6e\u52a0\u8f7d\u987a\u5e8f \u00b6 SpringBoot\u4e5f\u53ef\u4ee5\u4ece\u4ee5\u4e0b\u4f4d\u7f6e\u52a0\u8f7d\u914d\u7f6e\uff1b \u4f18\u5148\u7ea7\u4ece\u9ad8\u5230\u4f4e\uff1b\u9ad8\u4f18\u5148\u7ea7\u7684\u914d\u7f6e\u8986\u76d6\u4f4e\u4f18\u5148\u7ea7\u7684\u914d\u7f6e\uff0c\u6240\u6709\u7684\u914d\u7f6e\u4f1a\u5f62\u6210\u4e92\u8865\u914d\u7f6e 1.\u547d\u4ee4\u884c\u53c2\u6570 \u6240\u6709\u7684\u914d\u7f6e\u90fd\u53ef\u4ee5\u5728\u547d\u4ee4\u884c\u4e0a\u8fdb\u884c\u6307\u5b9a java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar --server.port=8087 --server.context-path=/abc \u591a\u4e2a\u914d\u7f6e\u7528\u7a7a\u683c\u5206\u5f00\uff1b --\u914d\u7f6e\u9879=\u503c 2.\u6765\u81eajava:comp/env\u7684JNDI\u5c5e\u6027 3.Java\u7cfb\u7edf\u5c5e\u6027\uff08System.getProperties()\uff09 4.\u64cd\u4f5c\u7cfb\u7edf\u73af\u5883\u53d8\u91cf 5.RandomValuePropertySource\u914d\u7f6e\u7684random.*\u5c5e\u6027\u503c \u7531jar\u5305\u5916\u5411jar\u5305\u5185\u8fdb\u884c\u5bfb\u627e\uff1b \u4f18\u5148\u52a0\u8f7d\u5e26profile 6.jar\u5305\u5916\u90e8\u7684application-{profile}.properties\u6216application.yml(\u5e26spring.profile)\u914d\u7f6e\u6587\u4ef6 7.jar\u5305\u5185\u90e8\u7684application-{profile}.properties\u6216application.yml(\u5e26spring.profile)\u914d\u7f6e\u6587\u4ef6 \u518d\u6765\u52a0\u8f7d\u4e0d\u5e26profile 8.jar\u5305\u5916\u90e8\u7684application.properties\u6216application.yml(\u4e0d\u5e26spring.profile)\u914d\u7f6e\u6587\u4ef6 9.jar\u5305\u5185\u90e8\u7684application.properties\u6216application.yml(\u4e0d\u5e26spring.profile)\u914d\u7f6e\u6587\u4ef6 10.@Configuration\u6ce8\u89e3\u7c7b\u4e0a\u7684@PropertySource 11.\u901a\u8fc7SpringApplication.setDefaultProperties\u6307\u5b9a\u7684\u9ed8\u8ba4\u5c5e\u6027 \u6240\u6709\u652f\u6301\u7684\u914d\u7f6e\u52a0\u8f7d\u6765\u6e90\uff1b \u53c2\u8003\u5b98\u65b9\u6587\u6863 8\u3001\u81ea\u52a8\u914d\u7f6e\u539f\u7406 \u00b6 \u914d\u7f6e\u6587\u4ef6\u5230\u5e95\u80fd\u5199\u4ec0\u4e48\uff1f\u600e\u4e48\u5199\uff1f\u81ea\u52a8\u914d\u7f6e\u539f\u7406\uff1b \u914d\u7f6e\u6587\u4ef6\u80fd\u914d\u7f6e\u7684\u5c5e\u6027\u53c2\u7167 1\u3001 \u81ea\u52a8\u914d\u7f6e\u539f\u7406\uff1a \u00b6 1\uff09\u3001SpringBoot\u542f\u52a8\u7684\u65f6\u5019\u52a0\u8f7d\u4e3b\u914d\u7f6e\u7c7b\uff0c\u5f00\u542f\u4e86\u81ea\u52a8\u914d\u7f6e\u529f\u80fd @EnableAutoConfiguration 2\uff09\u3001@EnableAutoConfiguration \u4f5c\u7528\uff1a \u5229\u7528EnableAutoConfigurationImportSelector\u7ed9\u5bb9\u5668\u4e2d\u5bfc\u5165\u4e00\u4e9b\u7ec4\u4ef6\uff1f \u53ef\u4ee5\u67e5\u770bselectImports()\u65b9\u6cd5\u7684\u5185\u5bb9\uff1b List configurations = getCandidateConfigurations(annotationMetadata, attributes);\u83b7\u53d6\u5019\u9009\u7684\u914d\u7f6e ```java SpringFactoriesLoader.loadFactoryNames() \u626b\u63cf\u6240\u6709jar\u5305\u7c7b\u8def\u5f84\u4e0b META-INF/spring.factories \u628a\u626b\u63cf\u5230\u7684\u8fd9\u4e9b\u6587\u4ef6\u7684\u5185\u5bb9\u5305\u88c5\u6210properties\u5bf9\u8c61 \u4eceproperties\u4e2d\u83b7\u53d6\u5230EnableAutoConfiguration.class\u7c7b\uff08\u7c7b\u540d\uff09\u5bf9\u5e94\u7684\u503c\uff0c\u7136\u540e\u628a\u4ed6\u4eec\u6dfb\u52a0\u5728\u5bb9\u5668\u4e2d ``` \u200b \u5c06 \u7c7b\u8def\u5f84\u4e0b META-INF/spring.factories \u91cc\u9762\u914d\u7f6e\u7684\u6240\u6709EnableAutoConfiguration\u7684\u503c\u52a0\u5165\u5230\u4e86\u5bb9\u5668\u4e2d\uff1b # Auto Configure org.springframework.boot.autoconfigure.EnableAutoConfiguration = \\ org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\\ org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\\ org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\\ org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\\ org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\\ org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\\ org.springframework.boot.autoconfigure.cloud.CloudAutoConfiguration,\\ org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\\ org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\\ org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\\ org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\\ org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\\ org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\\ org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\\ org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\\ org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\\ org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\\ org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\\ org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\\ org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\\ org.springframework.boot.autoconfigure.data.ldap.LdapDataAutoConfiguration,\\ org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\\ org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\\ org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\\ org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\\ org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\\ org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\\ org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\\ org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\\ org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\\ org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\\ org.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration,\\ org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\\ org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\\ org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\\ org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\\ org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\\ org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\\ org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\\ org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\\ org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\\ org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\\ org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\\ org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\\ org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\\ org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\\ org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\\ org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\\ org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\\ org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\\ org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\\ org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\\ org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\\ org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\\ org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\\ org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\\ org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\\ org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\\ org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\\ org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\\ org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\\ org.springframework.boot.autoconfigure.mobile.DeviceResolverAutoConfiguration,\\ org.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverAutoConfiguration,\\ org.springframework.boot.autoconfigure.mobile.SitePreferenceAutoConfiguration,\\ org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\\ org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\\ org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\\ org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\\ org.springframework.boot.autoconfigure.reactor.ReactorAutoConfiguration,\\ org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration,\\ org.springframework.boot.autoconfigure.security.SecurityFilterAutoConfiguration,\\ org.springframework.boot.autoconfigure.security.FallbackWebSecurityAutoConfiguration,\\ org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfiguration,\\ org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\\ org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\\ org.springframework.boot.autoconfigure.social.SocialWebAutoConfiguration,\\ org.springframework.boot.autoconfigure.social.FacebookAutoConfiguration,\\ org.springframework.boot.autoconfigure.social.LinkedInAutoConfiguration,\\ org.springframework.boot.autoconfigure.social.TwitterAutoConfiguration,\\ org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\\ org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\\ org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\\ org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\\ org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\\ org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration,\\ org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration,\\ org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration,\\ org.springframework.boot.autoconfigure.web.HttpEncodingAutoConfiguration,\\ org.springframework.boot.autoconfigure.web.HttpMessageConvertersAutoConfiguration,\\ org.springframework.boot.autoconfigure.web.MultipartAutoConfiguration,\\ org.springframework.boot.autoconfigure.web.ServerPropertiesAutoConfiguration,\\ org.springframework.boot.autoconfigure.web.WebClientAutoConfiguration,\\ org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration,\\ org.springframework.boot.autoconfigure.websocket.WebSocketAutoConfiguration,\\ org.springframework.boot.autoconfigure.websocket.WebSocketMessagingAutoConfiguration,\\ org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration \u6bcf\u4e00\u4e2a\u8fd9\u6837\u7684 xxxAutoConfiguration\u7c7b\u90fd\u662f\u5bb9\u5668\u4e2d\u7684\u4e00\u4e2a\u7ec4\u4ef6\uff0c\u90fd\u52a0\u5165\u5230\u5bb9\u5668\u4e2d\uff1b\u7528\u4ed6\u4eec\u6765\u505a\u81ea\u52a8\u914d\u7f6e\uff1b 3\uff09\u3001\u6bcf\u4e00\u4e2a\u81ea\u52a8\u914d\u7f6e\u7c7b\u8fdb\u884c\u81ea\u52a8\u914d\u7f6e\u529f\u80fd\uff1b 4\uff09\u3001\u4ee5**HttpEncodingAutoConfiguration\uff08Http\u7f16\u7801\u81ea\u52a8\u914d\u7f6e\uff09**\u4e3a\u4f8b\u89e3\u91ca\u81ea\u52a8\u914d\u7f6e\u539f\u7406\uff1b @Configuration //\u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u914d\u7f6e\u7c7b\uff0c\u4ee5\u524d\u7f16\u5199\u7684\u914d\u7f6e\u6587\u4ef6\u4e00\u6837\uff0c\u4e5f\u53ef\u4ee5\u7ed9\u5bb9\u5668\u4e2d\u6dfb\u52a0\u7ec4\u4ef6 @EnableConfigurationProperties ( HttpEncodingProperties . class ) //\u542f\u52a8\u6307\u5b9a\u7c7b\u7684ConfigurationProperties\u529f\u80fd\uff1b\u5c06\u914d\u7f6e\u6587\u4ef6\u4e2d\u5bf9\u5e94\u7684\u503c\u548cHttpEncodingProperties\u7ed1\u5b9a\u8d77\u6765\uff1b\u5e76\u628aHttpEncodingProperties\u52a0\u5165\u5230ioc\u5bb9\u5668\u4e2d @ConditionalOnWebApplication //Spring\u5e95\u5c42@Conditional\u6ce8\u89e3\uff08Spring\u6ce8\u89e3\u7248\uff09\uff0c\u6839\u636e\u4e0d\u540c\u7684\u6761\u4ef6\uff0c\u5982\u679c\u6ee1\u8db3\u6307\u5b9a\u7684\u6761\u4ef6\uff0c\u6574\u4e2a\u914d\u7f6e\u7c7b\u91cc\u9762\u7684\u914d\u7f6e\u5c31\u4f1a\u751f\u6548\uff1b \u5224\u65ad\u5f53\u524d\u5e94\u7528\u662f\u5426\u662fweb\u5e94\u7528\uff0c\u5982\u679c\u662f\uff0c\u5f53\u524d\u914d\u7f6e\u7c7b\u751f\u6548 @ConditionalOnClass ( CharacterEncodingFilter . class ) //\u5224\u65ad\u5f53\u524d\u9879\u76ee\u6709\u6ca1\u6709\u8fd9\u4e2a\u7c7bCharacterEncodingFilter\uff1bSpringMVC\u4e2d\u8fdb\u884c\u4e71\u7801\u89e3\u51b3\u7684\u8fc7\u6ee4\u5668\uff1b @ConditionalOnProperty ( prefix = \"spring.http.encoding\" , value = \"enabled\" , matchIfMissing = true ) //\u5224\u65ad\u914d\u7f6e\u6587\u4ef6\u4e2d\u662f\u5426\u5b58\u5728\u67d0\u4e2a\u914d\u7f6e spring.http.encoding.enabled\uff1b\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5224\u65ad\u4e5f\u662f\u6210\u7acb\u7684 //\u5373\u4f7f\u6211\u4eec\u914d\u7f6e\u6587\u4ef6\u4e2d\u4e0d\u914d\u7f6epring.http.encoding.enabled=true\uff0c\u4e5f\u662f\u9ed8\u8ba4\u751f\u6548\u7684\uff1b public class HttpEncodingAutoConfiguration { //\u4ed6\u5df2\u7ecf\u548cSpringBoot\u7684\u914d\u7f6e\u6587\u4ef6\u6620\u5c04\u4e86 private final HttpEncodingProperties properties ; //\u53ea\u6709\u4e00\u4e2a\u6709\u53c2\u6784\u9020\u5668\u7684\u60c5\u51b5\u4e0b\uff0c\u53c2\u6570\u7684\u503c\u5c31\u4f1a\u4ece\u5bb9\u5668\u4e2d\u62ff public HttpEncodingAutoConfiguration ( HttpEncodingProperties properties ) { this . properties = properties ; } @Bean //\u7ed9\u5bb9\u5668\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u7ec4\u4ef6\uff0c\u8fd9\u4e2a\u7ec4\u4ef6\u7684\u67d0\u4e9b\u503c\u9700\u8981\u4eceproperties\u4e2d\u83b7\u53d6 @ConditionalOnMissingBean ( CharacterEncodingFilter . class ) //\u5224\u65ad\u5bb9\u5668\u6ca1\u6709\u8fd9\u4e2a\u7ec4\u4ef6\uff1f public CharacterEncodingFilter characterEncodingFilter () { CharacterEncodingFilter filter = new OrderedCharacterEncodingFilter (); filter . setEncoding ( this . properties . getCharset (). name ()); filter . setForceRequestEncoding ( this . properties . shouldForce ( Type . REQUEST )); filter . setForceResponseEncoding ( this . properties . shouldForce ( Type . RESPONSE )); return filter ; } \u6839\u636e\u5f53\u524d\u4e0d\u540c\u7684\u6761\u4ef6\u5224\u65ad\uff0c\u51b3\u5b9a\u8fd9\u4e2a\u914d\u7f6e\u7c7b\u662f\u5426\u751f\u6548\uff1f \u4e00\u4f46\u8fd9\u4e2a\u914d\u7f6e\u7c7b\u751f\u6548\uff1b\u8fd9\u4e2a\u914d\u7f6e\u7c7b\u5c31\u4f1a\u7ed9\u5bb9\u5668\u4e2d\u6dfb\u52a0\u5404\u79cd\u7ec4\u4ef6\uff1b\u8fd9\u4e9b\u7ec4\u4ef6\u7684\u5c5e\u6027\u662f\u4ece\u5bf9\u5e94\u7684properties\u7c7b\u4e2d\u83b7\u53d6\u7684\uff0c\u8fd9\u4e9b\u7c7b\u91cc\u9762\u7684\u6bcf\u4e00\u4e2a\u5c5e\u6027\u53c8\u662f\u548c\u914d\u7f6e\u6587\u4ef6\u7ed1\u5b9a\u7684\uff1b 5\uff09\u3001\u6240\u6709\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u80fd\u914d\u7f6e\u7684\u5c5e\u6027\u90fd\u662f\u5728xxxxProperties\u7c7b\u4e2d\u5c01\u88c5\u8005\u2018\uff1b\u914d\u7f6e\u6587\u4ef6\u80fd\u914d\u7f6e\u4ec0\u4e48\u5c31\u53ef\u4ee5\u53c2\u7167\u67d0\u4e2a\u529f\u80fd\u5bf9\u5e94\u7684\u8fd9\u4e2a\u5c5e\u6027\u7c7b @ConfigurationProperties ( prefix = \"spring.http.encoding\" ) //\u4ece\u914d\u7f6e\u6587\u4ef6\u4e2d\u83b7\u53d6\u6307\u5b9a\u7684\u503c\u548cbean\u7684\u5c5e\u6027\u8fdb\u884c\u7ed1\u5b9a public class HttpEncodingProperties { public static final Charset DEFAULT_CHARSET = Charset . forName ( \"UTF-8\" ); \u7cbe\u9ad3\uff1a \u200b 1\uff09\u3001SpringBoot\u542f\u52a8\u4f1a\u52a0\u8f7d\u5927\u91cf\u7684\u81ea\u52a8\u914d\u7f6e\u7c7b \u200b 2\uff09\u3001\u6211\u4eec\u770b\u6211\u4eec\u9700\u8981\u7684\u529f\u80fd\u6709\u6ca1\u6709SpringBoot\u9ed8\u8ba4\u5199\u597d\u7684\u81ea\u52a8\u914d\u7f6e\u7c7b\uff1b \u200b 3\uff09\u3001\u6211\u4eec\u518d\u6765\u770b\u8fd9\u4e2a\u81ea\u52a8\u914d\u7f6e\u7c7b\u4e2d\u5230\u5e95\u914d\u7f6e\u4e86\u54ea\u4e9b\u7ec4\u4ef6\uff1b\uff08\u53ea\u8981\u6211\u4eec\u8981\u7528\u7684\u7ec4\u4ef6\u6709\uff0c\u6211\u4eec\u5c31\u4e0d\u9700\u8981\u518d\u6765\u914d\u7f6e\u4e86\uff09 \u200b 4\uff09\u3001\u7ed9\u5bb9\u5668\u4e2d\u81ea\u52a8\u914d\u7f6e\u7c7b\u6dfb\u52a0\u7ec4\u4ef6\u7684\u65f6\u5019\uff0c\u4f1a\u4eceproperties\u7c7b\u4e2d\u83b7\u53d6\u67d0\u4e9b\u5c5e\u6027\u3002\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u6307\u5b9a\u8fd9\u4e9b\u5c5e\u6027\u7684\u503c\uff1b xxxxAutoConfigurartion\uff1a\u81ea\u52a8\u914d\u7f6e\u7c7b\uff1b \u7ed9\u5bb9\u5668\u4e2d\u6dfb\u52a0\u7ec4\u4ef6 xxxxProperties:\u5c01\u88c5\u914d\u7f6e\u6587\u4ef6\u4e2d\u76f8\u5173\u5c5e\u6027\uff1b 2\u3001\u7ec6\u8282 \u00b6 1\u3001@Conditional\u6d3e\u751f\u6ce8\u89e3\uff08Spring\u6ce8\u89e3\u7248\u539f\u751f\u7684@Conditional\u4f5c\u7528\uff09 \u00b6 \u4f5c\u7528\uff1a\u5fc5\u987b\u662f@Conditional\u6307\u5b9a\u7684\u6761\u4ef6\u6210\u7acb\uff0c\u624d\u7ed9\u5bb9\u5668\u4e2d\u6dfb\u52a0\u7ec4\u4ef6\uff0c\u914d\u7f6e\u914d\u91cc\u9762\u7684\u6240\u6709\u5185\u5bb9\u624d\u751f\u6548\uff1b @Conditional\u6269\u5c55\u6ce8\u89e3 \u4f5c\u7528\uff08\u5224\u65ad\u662f\u5426\u6ee1\u8db3\u5f53\u524d\u6307\u5b9a\u6761\u4ef6\uff09 @ConditionalOnJava \u7cfb\u7edf\u7684java\u7248\u672c\u662f\u5426\u7b26\u5408\u8981\u6c42 @ConditionalOnBean \u5bb9\u5668\u4e2d\u5b58\u5728\u6307\u5b9aBean\uff1b @ConditionalOnMissingBean \u5bb9\u5668\u4e2d\u4e0d\u5b58\u5728\u6307\u5b9aBean\uff1b @ConditionalOnExpression \u6ee1\u8db3SpEL\u8868\u8fbe\u5f0f\u6307\u5b9a @ConditionalOnClass \u7cfb\u7edf\u4e2d\u6709\u6307\u5b9a\u7684\u7c7b @ConditionalOnMissingClass \u7cfb\u7edf\u4e2d\u6ca1\u6709\u6307\u5b9a\u7684\u7c7b @ConditionalOnSingleCandidate \u5bb9\u5668\u4e2d\u53ea\u6709\u4e00\u4e2a\u6307\u5b9a\u7684Bean\uff0c\u6216\u8005\u8fd9\u4e2aBean\u662f\u9996\u9009Bean @ConditionalOnProperty \u7cfb\u7edf\u4e2d\u6307\u5b9a\u7684\u5c5e\u6027\u662f\u5426\u6709\u6307\u5b9a\u7684\u503c @ConditionalOnResource \u7c7b\u8def\u5f84\u4e0b\u662f\u5426\u5b58\u5728\u6307\u5b9a\u8d44\u6e90\u6587\u4ef6 @ConditionalOnWebApplication \u5f53\u524d\u662fweb\u73af\u5883 @ConditionalOnNotWebApplication \u5f53\u524d\u4e0d\u662fweb\u73af\u5883 @ConditionalOnJndi JNDI\u5b58\u5728\u6307\u5b9a\u9879 \u81ea\u52a8\u914d\u7f6e\u7c7b\u5fc5\u987b\u5728\u4e00\u5b9a\u7684\u6761\u4ef6\u4e0b\u624d\u80fd\u751f\u6548\uff1b \u6211\u4eec\u600e\u4e48\u77e5\u9053\u54ea\u4e9b\u81ea\u52a8\u914d\u7f6e\u7c7b\u751f\u6548\uff1b \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u542f\u7528 debug=true\u5c5e\u6027\uff1b\u6765\u8ba9\u63a7\u5236\u53f0\u6253\u5370\u81ea\u52a8\u914d\u7f6e\u62a5\u544a \uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u77e5\u9053\u54ea\u4e9b\u81ea\u52a8\u914d\u7f6e\u7c7b\u751f\u6548\uff1b ========================= AUTO - CONFIGURATION REPORT ========================= Positive matches : \uff08 \u81ea\u52a8\u914d\u7f6e\u7c7b\u542f\u7528\u7684 \uff09 ----------------- DispatcherServletAutoConfiguration matched : - @ConditionalOnClass found required class ' org . springframework . web . servlet . DispatcherServlet ' ; @ConditionalOnMissingClass did not find unwanted class ( OnClassCondition ) - @ConditionalOnWebApplication ( required ) found StandardServletEnvironment ( OnWebApplicationCondition ) Negative matches : \uff08 \u6ca1\u6709\u542f\u52a8 \uff0c \u6ca1\u6709\u5339\u914d\u6210\u529f\u7684\u81ea\u52a8\u914d\u7f6e\u7c7b \uff09 ----------------- ActiveMQAutoConfiguration: Did not match : - @ConditionalOnClass did not find required classes ' javax . jms . ConnectionFactory ' , ' org . apache . activemq . ActiveMQConnectionFactory ' ( OnClassCondition ) AopAutoConfiguration: Did not match : - @ConditionalOnClass did not find required classes ' org . aspectj . lang . annotation . Aspect ' , ' org . aspectj . lang . reflect . Advice ' ( OnClassCondition ) \u4e09\u3001\u65e5\u5fd7 \u00b6 1\u3001\u65e5\u5fd7\u6846\u67b6 \u00b6 \u5c0f\u5f20\uff1b\u5f00\u53d1\u4e00\u4e2a\u5927\u578b\u7cfb\u7edf\uff1b \u200b 1\u3001System.out.println(\"\")\uff1b\u5c06\u5173\u952e\u6570\u636e\u6253\u5370\u5728\u63a7\u5236\u53f0\uff1b\u53bb\u6389\uff1f\u5199\u5728\u4e00\u4e2a\u6587\u4ef6\uff1f \u200b 2\u3001\u6846\u67b6\u6765\u8bb0\u5f55\u7cfb\u7edf\u7684\u4e00\u4e9b\u8fd0\u884c\u65f6\u4fe1\u606f\uff1b\u65e5\u5fd7\u6846\u67b6 \uff1b zhanglogging.jar\uff1b \u200b 3\u3001\u9ad8\u5927\u4e0a\u7684\u51e0\u4e2a\u529f\u80fd\uff1f\u5f02\u6b65\u6a21\u5f0f\uff1f\u81ea\u52a8\u5f52\u6863\uff1fxxxx\uff1f zhanglogging-good.jar\uff1f \u200b 4\u3001\u5c06\u4ee5\u524d\u6846\u67b6\u5378\u4e0b\u6765\uff1f\u6362\u4e0a\u65b0\u7684\u6846\u67b6\uff0c\u91cd\u65b0\u4fee\u6539\u4e4b\u524d\u76f8\u5173\u7684API\uff1bzhanglogging-prefect.jar\uff1b \u200b 5\u3001JDBC---\u6570\u636e\u5e93\u9a71\u52a8\uff1b \u200b \u5199\u4e86\u4e00\u4e2a\u7edf\u4e00\u7684\u63a5\u53e3\u5c42\uff1b\u65e5\u5fd7\u95e8\u9762\uff08\u65e5\u5fd7\u7684\u4e00\u4e2a\u62bd\u8c61\u5c42\uff09\uff1blogging-abstract.jar\uff1b \u200b \u7ed9\u9879\u76ee\u4e2d\u5bfc\u5165\u5177\u4f53\u7684\u65e5\u5fd7\u5b9e\u73b0\u5c31\u884c\u4e86\uff1b\u6211\u4eec\u4e4b\u524d\u7684\u65e5\u5fd7\u6846\u67b6\u90fd\u662f\u5b9e\u73b0\u7684\u62bd\u8c61\u5c42\uff1b \u5e02\u9762\u4e0a\u7684\u65e5\u5fd7\u6846\u67b6\uff1b JUL\u3001JCL\u3001Jboss-logging\u3001logback\u3001log4j\u3001log4j2\u3001slf4j.... \u65e5\u5fd7\u95e8\u9762 \uff08\u65e5\u5fd7\u7684\u62bd\u8c61\u5c42\uff09 \u65e5\u5fd7\u5b9e\u73b0 JCL\uff08Jakarta Commons Logging\uff09 SLF4j\uff08Simple Logging Facade for Java\uff09 jboss-logging Log4j JUL\uff08java.util.logging\uff09 Log4j2 Logback \u5de6\u8fb9\u9009\u4e00\u4e2a\u95e8\u9762\uff08\u62bd\u8c61\u5c42\uff09\u3001\u53f3\u8fb9\u6765\u9009\u4e00\u4e2a\u5b9e\u73b0\uff1b \u65e5\u5fd7\u95e8\u9762\uff1a SLF4J\uff1b \u65e5\u5fd7\u5b9e\u73b0\uff1aLogback\uff1b SpringBoot\uff1a\u5e95\u5c42\u662fSpring\u6846\u67b6\uff0cSpring\u6846\u67b6\u9ed8\u8ba4\u662f\u7528JCL\uff1b\u2018 \u200b SpringBoot\u9009\u7528 SLF4j\u548clogback\uff1b 2\u3001SLF4j\u4f7f\u7528 \u00b6 1\u3001\u5982\u4f55\u5728\u7cfb\u7edf\u4e2d\u4f7f\u7528SLF4j https://www.slf4j.org \u00b6 \u4ee5\u540e\u5f00\u53d1\u7684\u65f6\u5019\uff0c\u65e5\u5fd7\u8bb0\u5f55\u65b9\u6cd5\u7684\u8c03\u7528\uff0c\u4e0d\u5e94\u8be5\u6765\u76f4\u63a5\u8c03\u7528\u65e5\u5fd7\u7684\u5b9e\u73b0\u7c7b\uff0c\u800c\u662f\u8c03\u7528\u65e5\u5fd7\u62bd\u8c61\u5c42\u91cc\u9762\u7684\u65b9\u6cd5\uff1b \u7ed9\u7cfb\u7edf\u91cc\u9762\u5bfc\u5165slf4j\u7684jar\u548c logback\u7684\u5b9e\u73b0jar import org.slf4j.Logger ; import org.slf4j.LoggerFactory ; public class HelloWorld { public static void main ( String [] args ) { Logger logger = LoggerFactory . getLogger ( HelloWorld . class ); logger . info ( \"Hello World\" ); } } \u56fe\u793a\uff1b \u6bcf\u4e00\u4e2a\u65e5\u5fd7\u7684\u5b9e\u73b0\u6846\u67b6\u90fd\u6709\u81ea\u5df1\u7684\u914d\u7f6e\u6587\u4ef6\u3002\u4f7f\u7528slf4j\u4ee5\u540e\uff0c \u914d\u7f6e\u6587\u4ef6\u8fd8\u662f\u505a\u6210\u65e5\u5fd7\u5b9e\u73b0\u6846\u67b6\u81ea\u5df1\u672c\u8eab\u7684\u914d\u7f6e\u6587\u4ef6\uff1b 2\u3001\u9057\u7559\u95ee\u9898 \u00b6 a\uff08slf4j+logback\uff09: Spring\uff08commons-logging\uff09\u3001Hibernate\uff08jboss-logging\uff09\u3001MyBatis\u3001xxxx \u7edf\u4e00\u65e5\u5fd7\u8bb0\u5f55\uff0c\u5373\u4f7f\u662f\u522b\u7684\u6846\u67b6\u548c\u6211\u4e00\u8d77\u7edf\u4e00\u4f7f\u7528slf4j\u8fdb\u884c\u8f93\u51fa\uff1f \u5982\u4f55\u8ba9\u7cfb\u7edf\u4e2d\u6240\u6709\u7684\u65e5\u5fd7\u90fd\u7edf\u4e00\u5230slf4j\uff1b 1\u3001\u5c06\u7cfb\u7edf\u4e2d\u5176\u4ed6\u65e5\u5fd7\u6846\u67b6\u5148\u6392\u9664\u51fa\u53bb\uff1b 2\u3001\u7528\u4e2d\u95f4\u5305\u6765\u66ff\u6362\u539f\u6709\u7684\u65e5\u5fd7\u6846\u67b6\uff1b 3\u3001\u6211\u4eec\u5bfc\u5165slf4j\u5176\u4ed6\u7684\u5b9e\u73b0 3\u3001SpringBoot\u65e5\u5fd7\u5173\u7cfb \u00b6 <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter </artifactId> </dependency> SpringBoot\u4f7f\u7528\u5b83\u6765\u505a\u65e5\u5fd7\u529f\u80fd\uff1b <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-logging </artifactId> </dependency> \u5e95\u5c42\u4f9d\u8d56\u5173\u7cfb \u603b\u7ed3\uff1a \u200b 1\uff09\u3001SpringBoot\u5e95\u5c42\u4e5f\u662f\u4f7f\u7528slf4j+logback\u7684\u65b9\u5f0f\u8fdb\u884c\u65e5\u5fd7\u8bb0\u5f55 \u200b 2\uff09\u3001SpringBoot\u4e5f\u628a\u5176\u4ed6\u7684\u65e5\u5fd7\u90fd\u66ff\u6362\u6210\u4e86slf4j\uff1b \u200b 3\uff09\u3001\u4e2d\u95f4\u66ff\u6362\u5305\uff1f @SuppressWarnings ( \"rawtypes\" ) public abstract class LogFactory { static String UNSUPPORTED_OPERATION_IN_JCL_OVER_SLF4J = \"http://www.slf4j.org/codes.html#unsupported_operation_in_jcl_over_slf4j\" ; static LogFactory logFactory = new SLF4JLogFactory (); \u200b 4\uff09\u3001\u5982\u679c\u6211\u4eec\u8981\u5f15\u5165\u5176\u4ed6\u6846\u67b6\uff1f\u4e00\u5b9a\u8981\u628a\u8fd9\u4e2a\u6846\u67b6\u7684\u9ed8\u8ba4\u65e5\u5fd7\u4f9d\u8d56\u79fb\u9664\u6389\uff1f \u200b Spring\u6846\u67b6\u7528\u7684\u662fcommons-logging\uff1b <dependency> <groupId> org.springframework </groupId> <artifactId> spring-core </artifactId> <exclusions> <exclusion> <groupId> commons-logging </groupId> <artifactId> commons-logging </artifactId> </exclusion> </exclusions> </dependency> SpringBoot\u80fd\u81ea\u52a8\u9002\u914d\u6240\u6709\u7684\u65e5\u5fd7\uff0c\u800c\u4e14\u5e95\u5c42\u4f7f\u7528slf4j+logback\u7684\u65b9\u5f0f\u8bb0\u5f55\u65e5\u5fd7\uff0c\u5f15\u5165\u5176\u4ed6\u6846\u67b6\u7684\u65f6\u5019\uff0c\u53ea\u9700\u8981\u628a\u8fd9\u4e2a\u6846\u67b6\u4f9d\u8d56\u7684\u65e5\u5fd7\u6846\u67b6\u6392\u9664\u6389\u5373\u53ef\uff1b 4\u3001\u65e5\u5fd7\u4f7f\u7528\uff1b \u00b6 1\u3001\u9ed8\u8ba4\u914d\u7f6e \u00b6 SpringBoot\u9ed8\u8ba4\u5e2e\u6211\u4eec\u914d\u7f6e\u597d\u4e86\u65e5\u5fd7\uff1b //\u8bb0\u5f55\u5668 Logger logger = LoggerFactory . getLogger ( getClass ()); @Test public void contextLoads () { //System.out.println(); //\u65e5\u5fd7\u7684\u7ea7\u522b\uff1b //\u7531\u4f4e\u5230\u9ad8 trace<debug<info<warn<error //\u53ef\u4ee5\u8c03\u6574\u8f93\u51fa\u7684\u65e5\u5fd7\u7ea7\u522b\uff1b\u65e5\u5fd7\u5c31\u53ea\u4f1a\u5728\u8fd9\u4e2a\u7ea7\u522b\u4ee5\u4ee5\u540e\u7684\u9ad8\u7ea7\u522b\u751f\u6548 logger . trace ( \"\u8fd9\u662ftrace\u65e5\u5fd7...\" ); logger . debug ( \"\u8fd9\u662fdebug\u65e5\u5fd7...\" ); //SpringBoot\u9ed8\u8ba4\u7ed9\u6211\u4eec\u4f7f\u7528\u7684\u662finfo\u7ea7\u522b\u7684\uff0c\u6ca1\u6709\u6307\u5b9a\u7ea7\u522b\u7684\u5c31\u7528SpringBoot\u9ed8\u8ba4\u89c4\u5b9a\u7684\u7ea7\u522b\uff1broot\u7ea7\u522b logger . info ( \"\u8fd9\u662finfo\u65e5\u5fd7...\" ); logger . warn ( \"\u8fd9\u662fwarn\u65e5\u5fd7...\" ); logger . error ( \"\u8fd9\u662ferror\u65e5\u5fd7...\" ); } \u65e5\u5fd7\u8f93\u51fa\u683c\u5f0f\uff1a %d\u8868\u793a\u65e5\u671f\u65f6\u95f4\uff0c %thread\u8868\u793a\u7ebf\u7a0b\u540d\uff0c %-5level\uff1a\u7ea7\u522b\u4ece\u5de6\u663e\u793a5\u4e2a\u5b57\u7b26\u5bbd\u5ea6 %logger{50} \u8868\u793alogger\u540d\u5b57\u6700\u957f50\u4e2a\u5b57\u7b26\uff0c\u5426\u5219\u6309\u7167\u53e5\u70b9\u5206\u5272\u3002 %msg\uff1a\u65e5\u5fd7\u6d88\u606f\uff0c %n\u662f\u6362\u884c\u7b26 --> %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n SpringBoot\u4fee\u6539\u65e5\u5fd7\u7684\u9ed8\u8ba4\u914d\u7f6e logging.level.com.atguigu = trace #logging.path= # \u4e0d\u6307\u5b9a\u8def\u5f84\u5728\u5f53\u524d\u9879\u76ee\u4e0b\u751f\u6210springboot.log\u65e5\u5fd7 # \u53ef\u4ee5\u6307\u5b9a\u5b8c\u6574\u7684\u8def\u5f84\uff1b #logging.file=G:/springboot.log # \u5728\u5f53\u524d\u78c1\u76d8\u7684\u6839\u8def\u5f84\u4e0b\u521b\u5efaspring\u6587\u4ef6\u5939\u548c\u91cc\u9762\u7684log\u6587\u4ef6\u5939\uff1b\u4f7f\u7528 spring.log \u4f5c\u4e3a\u9ed8\u8ba4\u6587\u4ef6 logging.path = /spring/log # \u5728\u63a7\u5236\u53f0\u8f93\u51fa\u7684\u65e5\u5fd7\u7684\u683c\u5f0f logging.pattern.console = %d{yyyy-MM-dd} [%thread] %-5level %logger{50} - %msg%n # \u6307\u5b9a\u6587\u4ef6\u4e2d\u65e5\u5fd7\u8f93\u51fa\u7684\u683c\u5f0f logging.pattern.file = %d{yyyy-MM-dd} === [%thread] === %-5level === %logger{50} ==== %msg%n logging.file logging.path Example Description (none) (none) \u53ea\u5728\u63a7\u5236\u53f0\u8f93\u51fa \u6307\u5b9a\u6587\u4ef6\u540d (none) my.log \u8f93\u51fa\u65e5\u5fd7\u5230my.log\u6587\u4ef6 (none) \u6307\u5b9a\u76ee\u5f55 /var/log \u8f93\u51fa\u5230\u6307\u5b9a\u76ee\u5f55\u7684 spring.log \u6587\u4ef6\u4e2d 2\u3001\u6307\u5b9a\u914d\u7f6e \u00b6 \u7ed9\u7c7b\u8def\u5f84\u4e0b\u653e\u4e0a\u6bcf\u4e2a\u65e5\u5fd7\u6846\u67b6\u81ea\u5df1\u7684\u914d\u7f6e\u6587\u4ef6\u5373\u53ef\uff1bSpringBoot\u5c31\u4e0d\u4f7f\u7528\u4ed6\u9ed8\u8ba4\u914d\u7f6e\u7684\u4e86 Logging System Customization Logback logback-spring.xml , logback-spring.groovy , logback.xml or logback.groovy Log4j2 log4j2-spring.xml or log4j2.xml JDK (Java Util Logging) logging.properties logback.xml\uff1a\u76f4\u63a5\u5c31\u88ab\u65e5\u5fd7\u6846\u67b6\u8bc6\u522b\u4e86\uff1b logback-spring.xml \uff1a\u65e5\u5fd7\u6846\u67b6\u5c31\u4e0d\u76f4\u63a5\u52a0\u8f7d\u65e5\u5fd7\u7684\u914d\u7f6e\u9879\uff0c\u7531SpringBoot\u89e3\u6790\u65e5\u5fd7\u914d\u7f6e\uff0c\u53ef\u4ee5\u4f7f\u7528SpringBoot\u7684\u9ad8\u7ea7Profile\u529f\u80fd <springProfile name= \"staging\" > <!-- configuration to be enabled when the \"staging\" profile is active --> \u53ef\u4ee5\u6307\u5b9a\u67d0\u6bb5\u914d\u7f6e\u53ea\u5728\u67d0\u4e2a\u73af\u5883\u4e0b\u751f\u6548 </springProfile> \u5982\uff1a <appender name= \"stdout\" class= \"ch.qos.logback.core.ConsoleAppender\" > <!-- \u65e5\u5fd7\u8f93\u51fa\u683c\u5f0f\uff1a %d\u8868\u793a\u65e5\u671f\u65f6\u95f4\uff0c %thread\u8868\u793a\u7ebf\u7a0b\u540d\uff0c %-5level\uff1a\u7ea7\u522b\u4ece\u5de6\u663e\u793a5\u4e2a\u5b57\u7b26\u5bbd\u5ea6 %logger{50} \u8868\u793alogger\u540d\u5b57\u6700\u957f50\u4e2a\u5b57\u7b26\uff0c\u5426\u5219\u6309\u7167\u53e5\u70b9\u5206\u5272\u3002 %msg\uff1a\u65e5\u5fd7\u6d88\u606f\uff0c %n\u662f\u6362\u884c\u7b26 --> <layout class= \"ch.qos.logback.classic.PatternLayout\" > <springProfile name= \"dev\" > <pattern> %d{yyyy-MM-dd HH:mm:ss.SSS} ----> [%thread] ---> %-5level %logger{50} - %msg%n </pattern> </springProfile> <springProfile name= \"!dev\" > <pattern> %d{yyyy-MM-dd HH:mm:ss.SSS} ==== [%thread] ==== %-5level %logger{50} - %msg%n </pattern> </springProfile> </layout> </appender> \u5982\u679c\u4f7f\u7528logback.xml\u4f5c\u4e3a\u65e5\u5fd7\u914d\u7f6e\u6587\u4ef6\uff0c\u8fd8\u8981\u4f7f\u7528profile\u529f\u80fd\uff0c\u4f1a\u6709\u4ee5\u4e0b\u9519\u8bef no applicable action for [springProfile] 5\u3001\u5207\u6362\u65e5\u5fd7\u6846\u67b6 \u00b6 \u53ef\u4ee5\u6309\u7167slf4j\u7684\u65e5\u5fd7\u9002\u914d\u56fe\uff0c\u8fdb\u884c\u76f8\u5173\u7684\u5207\u6362\uff1b slf4j+log4j\u7684\u65b9\u5f0f\uff1b <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-web </artifactId> <exclusions> <exclusion> <artifactId> logback-classic </artifactId> <groupId> ch.qos.logback </groupId> </exclusion> <exclusion> <artifactId> log4j-over-slf4j </artifactId> <groupId> org.slf4j </groupId> </exclusion> </exclusions> </dependency> <dependency> <groupId> org.slf4j </groupId> <artifactId> slf4j-log4j12 </artifactId> </dependency> \u5207\u6362\u4e3alog4j2 <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-web </artifactId> <exclusions> <exclusion> <artifactId> spring-boot-starter-logging </artifactId> <groupId> org.springframework.boot </groupId> </exclusion> </exclusions> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-log4j2 </artifactId> </dependency> \u56db\u3001Web\u5f00\u53d1 \u00b6 1\u3001\u7b80\u4ecb \u00b6 \u4f7f\u7528SpringBoot\uff1b 1\uff09\u3001\u521b\u5efaSpringBoot\u5e94\u7528\uff0c\u9009\u4e2d\u6211\u4eec\u9700\u8981\u7684\u6a21\u5757\uff1b 2\uff09\u3001SpringBoot\u5df2\u7ecf\u9ed8\u8ba4\u5c06\u8fd9\u4e9b\u573a\u666f\u914d\u7f6e\u597d\u4e86\uff0c\u53ea\u9700\u8981\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u6307\u5b9a\u5c11\u91cf\u914d\u7f6e\u5c31\u53ef\u4ee5\u8fd0\u884c\u8d77\u6765 3\uff09\u3001\u81ea\u5df1\u7f16\u5199\u4e1a\u52a1\u4ee3\u7801\uff1b \u81ea\u52a8\u914d\u7f6e\u539f\u7406\uff1f \u8fd9\u4e2a\u573a\u666fSpringBoot\u5e2e\u6211\u4eec\u914d\u7f6e\u4e86\u4ec0\u4e48\uff1f\u80fd\u4e0d\u80fd\u4fee\u6539\uff1f\u80fd\u4fee\u6539\u54ea\u4e9b\u914d\u7f6e\uff1f\u80fd\u4e0d\u80fd\u6269\u5c55\uff1fxxx xxxxAutoConfiguration\uff1a\u5e2e\u6211\u4eec\u7ed9\u5bb9\u5668\u4e2d\u81ea\u52a8\u914d\u7f6e\u7ec4\u4ef6\uff1b xxxxProperties:\u914d\u7f6e\u7c7b\u6765\u5c01\u88c5\u914d\u7f6e\u6587\u4ef6\u7684\u5185\u5bb9\uff1b 2\u3001SpringBoot\u5bf9\u9759\u6001\u8d44\u6e90\u7684\u6620\u5c04\u89c4\u5219\uff1b \u00b6 @ConfigurationProperties ( prefix = \"spring.resources\" , ignoreUnknownFields = false ) public class ResourceProperties implements ResourceLoaderAware { //\u53ef\u4ee5\u8bbe\u7f6e\u548c\u9759\u6001\u8d44\u6e90\u6709\u5173\u7684\u53c2\u6570\uff0c\u7f13\u5b58\u65f6\u95f4\u7b49 WebMvcAuotConfiguration \uff1a @Override public void addResourceHandlers ( ResourceHandlerRegistry registry ) { if ( ! this . resourceProperties . isAddMappings ()) { logger . debug ( \"Default resource handling disabled\" ); return ; } Integer cachePeriod = this . resourceProperties . getCachePeriod (); if ( ! registry . hasMappingForPattern ( \"/webjars/**\" )) { customizeResourceHandlerRegistration ( registry . addResourceHandler ( \"/webjars/**\" ) . addResourceLocations ( \"classpath:/META-INF/resources/webjars/\" ) . setCachePeriod ( cachePeriod )); } String staticPathPattern = this . mvcProperties . getStaticPathPattern (); //\u9759\u6001\u8d44\u6e90\u6587\u4ef6\u5939\u6620\u5c04 if ( ! registry . hasMappingForPattern ( staticPathPattern )) { customizeResourceHandlerRegistration ( registry . addResourceHandler ( staticPathPattern ) . addResourceLocations ( this . resourceProperties . getStaticLocations ()) . setCachePeriod ( cachePeriod )); } } //\u914d\u7f6e\u6b22\u8fce\u9875\u6620\u5c04 @Bean public WelcomePageHandlerMapping welcomePageHandlerMapping ( ResourceProperties resourceProperties ) { return new WelcomePageHandlerMapping ( resourceProperties . getWelcomePage (), this . mvcProperties . getStaticPathPattern ()); } //\u914d\u7f6e\u559c\u6b22\u7684\u56fe\u6807 @Configuration @ConditionalOnProperty ( value = \"spring.mvc.favicon.enabled\" , matchIfMissing = true ) public static class FaviconConfiguration { private final ResourceProperties resourceProperties ; public FaviconConfiguration ( ResourceProperties resourceProperties ) { this . resourceProperties = resourceProperties ; } @Bean public SimpleUrlHandlerMapping faviconHandlerMapping () { SimpleUrlHandlerMapping mapping = new SimpleUrlHandlerMapping (); mapping . setOrder ( Ordered . HIGHEST_PRECEDENCE + 1 ); //\u6240\u6709 **/favicon.ico mapping . setUrlMap ( Collections . singletonMap ( \"**/favicon.ico\" , faviconRequestHandler ())); return mapping ; } @Bean public ResourceHttpRequestHandler faviconRequestHandler () { ResourceHttpRequestHandler requestHandler = new ResourceHttpRequestHandler (); requestHandler . setLocations ( this . resourceProperties . getFaviconLocations ()); return requestHandler ; } } 1\uff09\u3001\u6240\u6709 /webjars/** \uff0c\u90fd\u53bb classpath:/META-INF/resources/webjars/ \u627e\u8d44\u6e90\uff1b \u200b webjars\uff1a\u4ee5jar\u5305\u7684\u65b9\u5f0f\u5f15\u5165\u9759\u6001\u8d44\u6e90\uff1b http://www.webjars.org/ localhost:8080/webjars/jquery/3.3.1/jquery.js <!--\u5f15\u5165jquery-webjar--> \u5728\u8bbf\u95ee\u7684\u65f6\u5019\u53ea\u9700\u8981\u5199webjars\u4e0b\u9762\u8d44\u6e90\u7684\u540d\u79f0\u5373\u53ef <dependency> <groupId> org.webjars </groupId> <artifactId> jquery </artifactId> <version> 3.3.1 </version> </dependency> 2\uff09\u3001\"/**\" \u8bbf\u95ee\u5f53\u524d\u9879\u76ee\u7684\u4efb\u4f55\u8d44\u6e90\uff0c\u90fd\u53bb\uff08\u9759\u6001\u8d44\u6e90\u7684\u6587\u4ef6\u5939\uff09\u627e\u6620\u5c04 \"classpath:/META-INF/resources/\", \"classpath:/resources/\", \"classpath:/static/\", \"classpath:/public/\" \"/\"\uff1a\u5f53\u524d\u9879\u76ee\u7684\u6839\u8def\u5f84 localhost:8080/abc === \u53bb\u9759\u6001\u8d44\u6e90\u6587\u4ef6\u5939\u91cc\u9762\u627eabc 3\uff09\u3001\u6b22\u8fce\u9875\uff1b \u9759\u6001\u8d44\u6e90\u6587\u4ef6\u5939\u4e0b\u7684\u6240\u6709index.html\u9875\u9762\uff1b\u88ab\"/**\"\u6620\u5c04\uff1b \u200b localhost:8080/ \u627eindex\u9875\u9762 4\uff09\u3001\u6240\u6709\u7684 **/favicon.ico \u90fd\u662f\u5728\u9759\u6001\u8d44\u6e90\u6587\u4ef6\u4e0b\u627e\uff1b 3\u3001\u6a21\u677f\u5f15\u64ce \u00b6 JSP\u3001Velocity\u3001Freemarker\u3001Thymeleaf SpringBoot\u63a8\u8350\u7684Thymeleaf\uff1b \u8bed\u6cd5\u66f4\u7b80\u5355\uff0c\u529f\u80fd\u66f4\u5f3a\u5927\uff1b 1\u3001\u5f15\u5165thymeleaf\uff1b \u00b6 <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-thymeleaf </artifactId> 2.1.6 </dependency> \u5207\u6362thymeleaf\u7248\u672c <properties> <thymeleaf.version> 3.0.9.RELEASE </thymeleaf.version> <!-- \u5e03\u5c40\u529f\u80fd\u7684\u652f\u6301\u7a0b\u5e8f thymeleaf3\u4e3b\u7a0b\u5e8f layout2\u4ee5\u4e0a\u7248\u672c --> <!-- thymeleaf2 layout1--> <thymeleaf-layout-dialect.version> 2.2.2 </thymeleaf-layout-dialect.version> </properties> 2\u3001Thymeleaf\u4f7f\u7528 \u00b6 @ConfigurationProperties ( prefix = \"spring.thymeleaf\" ) public class ThymeleafProperties { private static final Charset DEFAULT_ENCODING = Charset . forName ( \"UTF-8\" ); private static final MimeType DEFAULT_CONTENT_TYPE = MimeType . valueOf ( \"text/html\" ); public static final String DEFAULT_PREFIX = \"classpath:/templates/\" ; public static final String DEFAULT_SUFFIX = \".html\" ; // \u53ea\u8981\u6211\u4eec\u628aHTML\u9875\u9762\u653e\u5728classpath:/templates/\uff0cthymeleaf\u5c31\u80fd\u81ea\u52a8\u6e32\u67d3\uff1b \u4f7f\u7528\uff1a 1\u3001\u5bfc\u5165thymeleaf\u7684\u540d\u79f0\u7a7a\u95f4 <html lang= \"en\" xmlns:th= \"http://www.thymeleaf.org\" > 2\u3001\u4f7f\u7528thymeleaf\u8bed\u6cd5\uff1b <!DOCTYPE html> < html lang = \"en\" xmlns:th = \"http://www.thymeleaf.org\" > < head > < meta charset = \"UTF-8\" > < title > Title </ title > </ head > < body > < h1 > \u6210\u529f\uff01 </ h1 > <!--th:text \u5c06div\u91cc\u9762\u7684\u6587\u672c\u5185\u5bb9\u8bbe\u7f6e\u4e3a --> < div th:text = \"${hello}\" > \u8fd9\u662f\u663e\u793a\u6b22\u8fce\u4fe1\u606f </ div > </ body > </ html > 3\u3001\u8bed\u6cd5\u89c4\u5219 \u00b6 1\uff09\u3001th:text\uff1b\u6539\u53d8\u5f53\u524d\u5143\u7d20\u91cc\u9762\u7684\u6587\u672c\u5185\u5bb9\uff1b \u200b th\uff1a\u4efb\u610fhtml\u5c5e\u6027\uff1b\u6765\u66ff\u6362\u539f\u751f\u5c5e\u6027\u7684\u503c 2\uff09\u3001\u8868\u8fbe\u5f0f\uff1f Simple expressions : \uff08\u8868\u8fbe\u5f0f\u8bed\u6cd5\uff09 Variable Expressions : ${...}\uff1a\u83b7\u53d6\u53d8\u91cf\u503c\uff1bOGNL\uff1b 1\uff09\u3001\u83b7\u53d6\u5bf9\u8c61\u7684\u5c5e\u6027\u3001\u8c03\u7528\u65b9\u6cd5 2\uff09\u3001\u4f7f\u7528\u5185\u7f6e\u7684\u57fa\u672c\u5bf9\u8c61\uff1a #ctx : the context object. #vars: the context variables. #locale : the context locale. #request : (only in Web Contexts) the HttpServletRequest object. #response : (only in Web Contexts) the HttpServletResponse object. #session : (only in Web Contexts) the HttpSession object. #servletContext : (only in Web Contexts) the ServletContext object. ${session.foo} 3\uff09\u3001\u5185\u7f6e\u7684\u4e00\u4e9b\u5de5\u5177\u5bf9\u8c61\uff1a #execInfo : information about the template being processed. #messages : methods for obtaining externalized messages inside variables expressions, in the same way as they would be obtained using #{\u2026} syntax. #uris : methods for escaping parts of URLs/URIs #conversions : methods for executing the configured conversion service (if any). #dates : methods for java.util.Date objects: formatting, component extraction, etc. #calendars : analogous to #dates , but for java.util.Calendar objects. #numbers : methods for formatting numeric objects. #strings : methods for String objects: contains, startsWith, prepending/appending, etc. #objects : methods for objects in general. #bools : methods for boolean evaluation. #arrays : methods for arrays. #lists : methods for lists. #sets : methods for sets. #maps : methods for maps. #aggregates : methods for creating aggregates on arrays or collections. #ids : methods for dealing with id attributes that might be repeated (for example, as a result of an iteration). Selection Variable Expressions : *{...}\uff1a\u9009\u62e9\u8868\u8fbe\u5f0f\uff1a\u548c${}\u5728\u529f\u80fd\u4e0a\u662f\u4e00\u6837\uff1b \u8865\u5145\uff1a\u914d\u5408 th : object=\"${session.user}\uff1a <div th : object=\"${session.user}\"> <p>Name : <span th:text=\"*{firstName}\">Sebastian</span>.</p> <p>Surname : <span th:text=\"*{lastName}\">Pepper</span>.</p> <p>Nationality : <span th:text=\"*{nationality}\">Saturn</span>.</p> </div> Message Expressions : #{...}\uff1a\u83b7\u53d6\u56fd\u9645\u5316\u5185\u5bb9 Link URL Expressions : @{...}\uff1a\u5b9a\u4e49URL\uff1b @{/order/process(execId = ${execId},execType='FAST')} Fragment Expressions : ~{...}\uff1a\u7247\u6bb5\u5f15\u7528\u8868\u8fbe\u5f0f <div th : insert=\"~{commons :: main}\">...</div> Literals\uff08\u5b57\u9762\u91cf\uff09 Text literals : 'one text' , 'Another one!' ,\u2026 Number literals : 0 , 34 , 3.0 , 12.3 ,\u2026 Boolean literals : true , false Null literal : null Literal tokens : one , sometext , main ,\u2026 Text operations : \uff08\u6587\u672c\u64cd\u4f5c\uff09 String concatenation : + Literal substitutions : |The name is ${name}| Arithmetic operations : \uff08\u6570\u5b66\u8fd0\u7b97\uff09 Binary operators : + , - , * , / , % Minus sign (unary operator) : - Boolean operations : \uff08\u5e03\u5c14\u8fd0\u7b97\uff09 Binary operators : and , or Boolean negation (unary operator) : ! , not Comparisons and equality : \uff08\u6bd4\u8f83\u8fd0\u7b97\uff09 Comparators : > , < , >= , <= ( gt , lt , ge , le ) Equality operators : == , != ( eq , ne ) Conditional operators : \u6761\u4ef6\u8fd0\u7b97\uff08\u4e09\u5143\u8fd0\u7b97\u7b26\uff09 If-then : (if) ? (then) If-then-else : (if) ? (then) : (else) Default : (value) ?: (defaultvalue) Special tokens : No-Operation : _ 4\u3001SpringMVC\u81ea\u52a8\u914d\u7f6e \u00b6 https://docs.spring.io/spring-boot/docs/1.5.10.RELEASE/reference/htmlsingle/#boot-features-developing-web-applications 1. Spring MVC auto-configuration \u00b6 Spring Boot \u81ea\u52a8\u914d\u7f6e\u597d\u4e86SpringMVC \u4ee5\u4e0b\u662fSpringBoot\u5bf9SpringMVC\u7684\u9ed8\u8ba4\u914d\u7f6e: \uff08WebMvcAutoConfiguration\uff09 Inclusion of ContentNegotiatingViewResolver and BeanNameViewResolver beans. \u81ea\u52a8\u914d\u7f6e\u4e86ViewResolver\uff08\u89c6\u56fe\u89e3\u6790\u5668\uff1a\u6839\u636e\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u5f97\u5230\u89c6\u56fe\u5bf9\u8c61\uff08View\uff09\uff0c\u89c6\u56fe\u5bf9\u8c61\u51b3\u5b9a\u5982\u4f55\u6e32\u67d3\uff08\u8f6c\u53d1\uff1f\u91cd\u5b9a\u5411\uff1f\uff09\uff09 ContentNegotiatingViewResolver\uff1a\u7ec4\u5408\u6240\u6709\u7684\u89c6\u56fe\u89e3\u6790\u5668\u7684\uff1b \u5982\u4f55\u5b9a\u5236\uff1a\u6211\u4eec\u53ef\u4ee5\u81ea\u5df1\u7ed9\u5bb9\u5668\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u89c6\u56fe\u89e3\u6790\u5668\uff1b\u81ea\u52a8\u7684\u5c06\u5176\u7ec4\u5408\u8fdb\u6765\uff1b Support for serving static resources, including support for WebJars (see below).\u9759\u6001\u8d44\u6e90\u6587\u4ef6\u5939\u8def\u5f84,webjars Static index.html support. \u9759\u6001\u9996\u9875\u8bbf\u95ee Custom Favicon support (see below). favicon.ico \u200b \u81ea\u52a8\u6ce8\u518c\u4e86 of Converter , GenericConverter , Formatter beans. Converter\uff1a\u8f6c\u6362\u5668\uff1b public String hello(User user)\uff1a\u7c7b\u578b\u8f6c\u6362\u4f7f\u7528Converter Formatter \u683c\u5f0f\u5316\u5668\uff1b 2017.12.17===Date\uff1b @Bean @ConditionalOnProperty ( prefix = \"spring.mvc\" , name = \"date-format\" ) //\u5728\u6587\u4ef6\u4e2d\u914d\u7f6e\u65e5\u671f\u683c\u5f0f\u5316\u7684\u89c4\u5219 public Formatter < Date > dateFormatter () { return new DateFormatter ( this . mvcProperties . getDateFormat ()); //\u65e5\u671f\u683c\u5f0f\u5316\u7ec4\u4ef6 } \u200b \u81ea\u5df1\u6dfb\u52a0\u7684\u683c\u5f0f\u5316\u5668\u8f6c\u6362\u5668\uff0c\u6211\u4eec\u53ea\u9700\u8981\u653e\u5728\u5bb9\u5668\u4e2d\u5373\u53ef Support for HttpMessageConverters (see below). HttpMessageConverter\uff1aSpringMVC\u7528\u6765\u8f6c\u6362Http\u8bf7\u6c42\u548c\u54cd\u5e94\u7684\uff1bUser---Json\uff1b HttpMessageConverters \u662f\u4ece\u5bb9\u5668\u4e2d\u786e\u5b9a\uff1b\u83b7\u53d6\u6240\u6709\u7684HttpMessageConverter\uff1b \u81ea\u5df1\u7ed9\u5bb9\u5668\u4e2d\u6dfb\u52a0HttpMessageConverter\uff0c\u53ea\u9700\u8981\u5c06\u81ea\u5df1\u7684\u7ec4\u4ef6\u6ce8\u518c\u5bb9\u5668\u4e2d\uff08@Bean,@Component\uff09 \u200b Automatic registration of MessageCodesResolver (see below).\u5b9a\u4e49\u9519\u8bef\u4ee3\u7801\u751f\u6210\u89c4\u5219 Automatic use of a ConfigurableWebBindingInitializer bean (see below). \u6211\u4eec\u53ef\u4ee5\u914d\u7f6e\u4e00\u4e2aConfigurableWebBindingInitializer\u6765\u66ff\u6362\u9ed8\u8ba4\u7684\uff1b\uff08\u6dfb\u52a0\u5230\u5bb9\u5668\uff09 \u521d\u59cb\u5316WebDataBinder\uff1b \u8bf7\u6c42\u6570\u636e=====JavaBean\uff1b org.springframework.boot.autoconfigure.web\uff1aweb\u7684\u6240\u6709\u81ea\u52a8\u573a\u666f\uff1b If you want to keep Spring Boot MVC features, and you just want to add additional MVC configuration (interceptors, formatters, view controllers etc.) you can add your own @Configuration class of type WebMvcConfigurerAdapter , but without @EnableWebMvc . If you wish to provide custom instances of RequestMappingHandlerMapping , RequestMappingHandlerAdapter or ExceptionHandlerExceptionResolver you can declare a WebMvcRegistrationsAdapter instance providing such components. If you want to take complete control of Spring MVC, you can add your own @Configuration annotated with @EnableWebMvc . 2\u3001\u6269\u5c55SpringMVC \u00b6 <mvc:view-controller path= \"/hello\" view-name= \"success\" /> <mvc:interceptors> <mvc:interceptor> <mvc:mapping path= \"/hello\" /> <bean></bean> </mvc:interceptor> </mvc:interceptors> \u7f16\u5199\u4e00\u4e2a\u914d\u7f6e\u7c7b\uff08@Configuration\uff09\uff0c\u662fWebMvcConfigurerAdapter\u7c7b\u578b\uff1b\u4e0d\u80fd\u6807\u6ce8@EnableWebMvc ; \u65e2\u4fdd\u7559\u4e86\u6240\u6709\u7684\u81ea\u52a8\u914d\u7f6e\uff0c\u4e5f\u80fd\u7528\u6211\u4eec\u6269\u5c55\u7684\u914d\u7f6e\uff1b //\u4f7f\u7528WebMvcConfigurerAdapter\u53ef\u4ee5\u6765\u6269\u5c55SpringMVC\u7684\u529f\u80fd @Configuration public class MyMvcConfig extends WebMvcConfigurerAdapter { @Override public void addViewControllers ( ViewControllerRegistry registry ) { // super.addViewControllers(registry); //\u6d4f\u89c8\u5668\u53d1\u9001 /atguigu \u8bf7\u6c42\u6765\u5230 success registry . addViewController ( \"/atguigu\" ). setViewName ( \"success\" ); } } \u539f\u7406\uff1a \u200b 1\uff09\u3001WebMvcAutoConfiguration\u662fSpringMVC\u7684\u81ea\u52a8\u914d\u7f6e\u7c7b \u200b 2\uff09\u3001\u5728\u505a\u5176\u4ed6\u81ea\u52a8\u914d\u7f6e\u65f6\u4f1a\u5bfc\u5165\uff1b@Import( EnableWebMvcConfiguration .class) @Configuration public static class EnableWebMvcConfiguration extends DelegatingWebMvcConfiguration { private final WebMvcConfigurerComposite configurers = new WebMvcConfigurerComposite (); //\u4ece\u5bb9\u5668\u4e2d\u83b7\u53d6\u6240\u6709\u7684WebMvcConfigurer @Autowired ( required = false ) public void setConfigurers ( List < WebMvcConfigurer > configurers ) { if ( ! CollectionUtils . isEmpty ( configurers )) { this . configurers . addWebMvcConfigurers ( configurers ); //\u4e00\u4e2a\u53c2\u8003\u5b9e\u73b0\uff1b\u5c06\u6240\u6709\u7684WebMvcConfigurer\u76f8\u5173\u914d\u7f6e\u90fd\u6765\u4e00\u8d77\u8c03\u7528\uff1b @Override // public void addViewControllers(ViewControllerRegistry registry) { // for (WebMvcConfigurer delegate : this.delegates) { // delegate.addViewControllers(registry); // } } } } \u200b 3\uff09\u3001\u5bb9\u5668\u4e2d\u6240\u6709\u7684WebMvcConfigurer\u90fd\u4f1a\u4e00\u8d77\u8d77\u4f5c\u7528\uff1b \u200b 4\uff09\u3001\u6211\u4eec\u7684\u914d\u7f6e\u7c7b\u4e5f\u4f1a\u88ab\u8c03\u7528\uff1b \u200b \u6548\u679c\uff1aSpringMVC\u7684\u81ea\u52a8\u914d\u7f6e\u548c\u6211\u4eec\u7684\u6269\u5c55\u914d\u7f6e\u90fd\u4f1a\u8d77\u4f5c\u7528\uff1b 3\u3001\u5168\u9762\u63a5\u7ba1SpringMVC\uff1b \u00b6 SpringBoot\u5bf9SpringMVC\u7684\u81ea\u52a8\u914d\u7f6e\u4e0d\u9700\u8981\u4e86\uff0c\u6240\u6709\u90fd\u662f\u6211\u4eec\u81ea\u5df1\u914d\u7f6e\uff1b\u6240\u6709\u7684SpringMVC\u7684\u81ea\u52a8\u914d\u7f6e\u90fd\u5931\u6548\u4e86 \u6211\u4eec\u9700\u8981\u5728\u914d\u7f6e\u7c7b\u4e2d\u6dfb\u52a0@EnableWebMvc\u5373\u53ef\uff1b //\u4f7f\u7528WebMvcConfigurerAdapter\u53ef\u4ee5\u6765\u6269\u5c55SpringMVC\u7684\u529f\u80fd @EnableWebMvc @Configuration public class MyMvcConfig extends WebMvcConfigurerAdapter { @Override public void addViewControllers ( ViewControllerRegistry registry ) { // super.addViewControllers(registry); //\u6d4f\u89c8\u5668\u53d1\u9001 /atguigu \u8bf7\u6c42\u6765\u5230 success registry . addViewController ( \"/atguigu\" ). setViewName ( \"success\" ); } } \u539f\u7406\uff1a \u4e3a\u4ec0\u4e48@EnableWebMvc\u81ea\u52a8\u914d\u7f6e\u5c31\u5931\u6548\u4e86\uff1b 1\uff09@EnableWebMvc\u7684\u6838\u5fc3 @Import ( DelegatingWebMvcConfiguration . class ) public @interface EnableWebMvc { 2\uff09\u3001 @Configuration public class DelegatingWebMvcConfiguration extends WebMvcConfigurationSupport { 3\uff09\u3001 @Configuration @ConditionalOnWebApplication @ConditionalOnClass ({ Servlet . class , DispatcherServlet . class , WebMvcConfigurerAdapter . class }) //\u5bb9\u5668\u4e2d\u6ca1\u6709\u8fd9\u4e2a\u7ec4\u4ef6\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u81ea\u52a8\u914d\u7f6e\u7c7b\u624d\u751f\u6548 @ConditionalOnMissingBean ( WebMvcConfigurationSupport . class ) @AutoConfigureOrder ( Ordered . HIGHEST_PRECEDENCE + 10 ) @AutoConfigureAfter ({ DispatcherServletAutoConfiguration . class , ValidationAutoConfiguration . class }) public class WebMvcAutoConfiguration { 4\uff09\u3001@EnableWebMvc\u5c06WebMvcConfigurationSupport\u7ec4\u4ef6\u5bfc\u5165\u8fdb\u6765\uff1b 5\uff09\u3001\u5bfc\u5165\u7684WebMvcConfigurationSupport\u53ea\u662fSpringMVC\u6700\u57fa\u672c\u7684\u529f\u80fd\uff1b 5\u3001\u5982\u4f55\u4fee\u6539SpringBoot\u7684\u9ed8\u8ba4\u914d\u7f6e \u00b6 \u6a21\u5f0f\uff1a \u200b 1\uff09\u3001SpringBoot\u5728\u81ea\u52a8\u914d\u7f6e\u5f88\u591a\u7ec4\u4ef6\u7684\u65f6\u5019\uff0c\u5148\u770b\u5bb9\u5668\u4e2d\u6709\u6ca1\u6709\u7528\u6237\u81ea\u5df1\u914d\u7f6e\u7684\uff08@Bean\u3001@Component\uff09\u5982\u679c\u6709\u5c31\u7528\u7528\u6237\u914d\u7f6e\u7684\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u624d\u81ea\u52a8\u914d\u7f6e\uff1b\u5982\u679c\u6709\u4e9b\u7ec4\u4ef6\u53ef\u4ee5\u6709\u591a\u4e2a\uff08ViewResolver\uff09\u5c06\u7528\u6237\u914d\u7f6e\u7684\u548c\u81ea\u5df1\u9ed8\u8ba4\u7684\u7ec4\u5408\u8d77\u6765\uff1b \u200b 2\uff09\u3001\u5728SpringBoot\u4e2d\u4f1a\u6709\u975e\u5e38\u591a\u7684xxxConfigurer\u5e2e\u52a9\u6211\u4eec\u8fdb\u884c\u6269\u5c55\u914d\u7f6e \u200b 3\uff09\u3001\u5728SpringBoot\u4e2d\u4f1a\u6709\u5f88\u591a\u7684xxxCustomizer\u5e2e\u52a9\u6211\u4eec\u8fdb\u884c\u5b9a\u5236\u914d\u7f6e 6\u3001RestfulCRUD \u00b6 1\uff09\u3001\u9ed8\u8ba4\u8bbf\u95ee\u9996\u9875 \u00b6 //\u4f7f\u7528WebMvcConfigurerAdapter\u53ef\u4ee5\u6765\u6269\u5c55SpringMVC\u7684\u529f\u80fd //@EnableWebMvc \u4e0d\u8981\u63a5\u7ba1SpringMVC @Configuration public class MyMvcConfig extends WebMvcConfigurerAdapter { @Override public void addViewControllers ( ViewControllerRegistry registry ) { // super.addViewControllers(registry); //\u6d4f\u89c8\u5668\u53d1\u9001 /atguigu \u8bf7\u6c42\u6765\u5230 success registry . addViewController ( \"/atguigu\" ). setViewName ( \"success\" ); } //\u6240\u6709\u7684WebMvcConfigurerAdapter\u7ec4\u4ef6\u90fd\u4f1a\u4e00\u8d77\u8d77\u4f5c\u7528 @Bean //\u5c06\u7ec4\u4ef6\u6ce8\u518c\u5728\u5bb9\u5668 public WebMvcConfigurerAdapter webMvcConfigurerAdapter (){ WebMvcConfigurerAdapter adapter = new WebMvcConfigurerAdapter () { @Override public void addViewControllers ( ViewControllerRegistry registry ) { registry . addViewController ( \"/\" ). setViewName ( \"login\" ); registry . addViewController ( \"/index.html\" ). setViewName ( \"login\" ); } }; return adapter ; } } 2\uff09\u3001\u56fd\u9645\u5316 \u00b6 1\uff09\u3001\u7f16\u5199\u56fd\u9645\u5316\u914d\u7f6e\u6587\u4ef6\uff1b 2\uff09\u3001\u4f7f\u7528ResourceBundleMessageSource\u7ba1\u7406\u56fd\u9645\u5316\u8d44\u6e90\u6587\u4ef6 3\uff09\u3001\u5728\u9875\u9762\u4f7f\u7528fmt:message\u53d6\u51fa\u56fd\u9645\u5316\u5185\u5bb9 \u6b65\u9aa4\uff1a 1\uff09\u3001\u7f16\u5199\u56fd\u9645\u5316\u914d\u7f6e\u6587\u4ef6\uff0c\u62bd\u53d6\u9875\u9762\u9700\u8981\u663e\u793a\u7684\u56fd\u9645\u5316\u6d88\u606f 2\uff09\u3001SpringBoot\u81ea\u52a8\u914d\u7f6e\u597d\u4e86\u7ba1\u7406\u56fd\u9645\u5316\u8d44\u6e90\u6587\u4ef6\u7684\u7ec4\u4ef6\uff1b @ConfigurationProperties ( prefix = \"spring.messages\" ) public class MessageSourceAutoConfiguration { /** * Comma-separated list of basenames (essentially a fully-qualified classpath * location), each following the ResourceBundle convention with relaxed support for * slash based locations. If it doesn't contain a package qualifier (such as * \"org.mypackage\"), it will be resolved from the classpath root. */ private String basename = \"messages\" ; //\u6211\u4eec\u7684\u914d\u7f6e\u6587\u4ef6\u53ef\u4ee5\u76f4\u63a5\u653e\u5728\u7c7b\u8def\u5f84\u4e0b\u53ebmessages.properties\uff1b @Bean public MessageSource messageSource () { ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource (); if ( StringUtils . hasText ( this . basename )) { //\u8bbe\u7f6e\u56fd\u9645\u5316\u8d44\u6e90\u6587\u4ef6\u7684\u57fa\u7840\u540d\uff08\u53bb\u6389\u8bed\u8a00\u56fd\u5bb6\u4ee3\u7801\u7684\uff09 messageSource . setBasenames ( StringUtils . commaDelimitedListToStringArray ( StringUtils . trimAllWhitespace ( this . basename ))); } if ( this . encoding != null ) { messageSource . setDefaultEncoding ( this . encoding . name ()); } messageSource . setFallbackToSystemLocale ( this . fallbackToSystemLocale ); messageSource . setCacheSeconds ( this . cacheSeconds ); messageSource . setAlwaysUseMessageFormat ( this . alwaysUseMessageFormat ); return messageSource ; } 3\uff09\u3001\u53bb\u9875\u9762\u83b7\u53d6\u56fd\u9645\u5316\u7684\u503c\uff1b <!DOCTYPE html> < html lang = \"en\" xmlns:th = \"http://www.thymeleaf.org\" > < head > < meta http-equiv = \"Content-Type\" content = \"text/html; charset=UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1, shrink-to-fit=no\" > < meta name = \"description\" content = \"\" > < meta name = \"author\" content = \"\" > < title > Signin Template for Bootstrap </ title > <!-- Bootstrap core CSS --> < link href = \"asserts/css/bootstrap.min.css\" th:href = \"@{/webjars/bootstrap/4.0.0/css/bootstrap.css}\" rel = \"stylesheet\" > <!-- Custom styles for this template --> < link href = \"asserts/css/signin.css\" th:href = \"@{/asserts/css/signin.css}\" rel = \"stylesheet\" > </ head > < body class = \"text-center\" > < form class = \"form-signin\" action = \"dashboard.html\" > < img class = \"mb-4\" th:src = \"@{/asserts/img/bootstrap-solid.svg}\" src = \"asserts/img/bootstrap-solid.svg\" alt = \"\" width = \"72\" height = \"72\" > < h1 class = \"h3 mb-3 font-weight-normal\" th:text = \"#{login.tip}\" > Please sign in </ h1 > < label class = \"sr-only\" th:text = \"#{login.username}\" > Username </ label > < input type = \"text\" class = \"form-control\" placeholder = \"Username\" th:placeholder = \"#{login.username}\" required = \"\" autofocus = \"\" > < label class = \"sr-only\" th:text = \"#{login.password}\" > Password </ label > < input type = \"password\" class = \"form-control\" placeholder = \"Password\" th:placeholder = \"#{login.password}\" required = \"\" > < div class = \"checkbox mb-3\" > < label > < input type = \"checkbox\" value = \"remember-me\" /> [[#{login.remember}]] </ label > </ div > < button class = \"btn btn-lg btn-primary btn-block\" type = \"submit\" th:text = \"#{login.btn}\" > Sign in </ button > < p class = \"mt-5 mb-3 text-muted\" > \u00a9 2017-2018 </ p > < a class = \"btn btn-sm\" > \u4e2d\u6587 </ a > < a class = \"btn btn-sm\" > English </ a > </ form > </ body > </ html > \u6548\u679c\uff1a\u6839\u636e\u6d4f\u89c8\u5668\u8bed\u8a00\u8bbe\u7f6e\u7684\u4fe1\u606f\u5207\u6362\u4e86\u56fd\u9645\u5316\uff1b \u539f\u7406\uff1a \u200b \u56fd\u9645\u5316Locale\uff08\u533a\u57df\u4fe1\u606f\u5bf9\u8c61\uff09\uff1bLocaleResolver\uff08\u83b7\u53d6\u533a\u57df\u4fe1\u606f\u5bf9\u8c61\uff09\uff1b @Bean @ConditionalOnMissingBean @ConditionalOnProperty ( prefix = \"spring.mvc\" , name = \"locale\" ) public LocaleResolver localeResolver () { if ( this . mvcProperties . getLocaleResolver () == WebMvcProperties . LocaleResolver . FIXED ) { return new FixedLocaleResolver ( this . mvcProperties . getLocale ()); } AcceptHeaderLocaleResolver localeResolver = new AcceptHeaderLocaleResolver (); localeResolver . setDefaultLocale ( this . mvcProperties . getLocale ()); return localeResolver ; } \u9ed8\u8ba4\u7684\u5c31\u662f\u6839\u636e\u8bf7\u6c42\u5934\u5e26\u6765\u7684\u533a\u57df\u4fe1\u606f\u83b7\u53d6Locale\u8fdb\u884c\u56fd\u9645\u5316 4\uff09\u3001\u70b9\u51fb\u94fe\u63a5\u5207\u6362\u56fd\u9645\u5316 /** * \u53ef\u4ee5\u5728\u8fde\u63a5\u4e0a\u643a\u5e26\u533a\u57df\u4fe1\u606f */ public class MyLocaleResolver implements LocaleResolver { @Override public Locale resolveLocale ( HttpServletRequest request ) { String l = request . getParameter ( \"l\" ); Locale locale = Locale . getDefault (); if ( ! StringUtils . isEmpty ( l )){ String [] split = l . split ( \"_\" ); locale = new Locale ( split [ 0 ] , split [ 1 ] ); } return locale ; } @Override public void setLocale ( HttpServletRequest request , HttpServletResponse response , Locale locale ) { } } @Bean public LocaleResolver localeResolver (){ return new MyLocaleResolver (); } } 3\uff09\u3001\u767b\u9646 \u00b6 \u5f00\u53d1\u671f\u95f4\u6a21\u677f\u5f15\u64ce\u9875\u9762\u4fee\u6539\u4ee5\u540e\uff0c\u8981\u5b9e\u65f6\u751f\u6548 1\uff09\u3001\u7981\u7528\u6a21\u677f\u5f15\u64ce\u7684\u7f13\u5b58 # \u7981\u7528\u7f13\u5b58 spring.thymeleaf.cache=false 2\uff09\u3001\u9875\u9762\u4fee\u6539\u5b8c\u6210\u4ee5\u540ectrl+f9\uff1a\u91cd\u65b0\u7f16\u8bd1\uff1b \u767b\u9646\u9519\u8bef\u6d88\u606f\u7684\u663e\u793a < p style = \"color: red\" th:text = \"${msg}\" th:if = \"${not #strings.isEmpty(msg)}\" ></ p > 4\uff09\u3001\u62e6\u622a\u5668\u8fdb\u884c\u767b\u9646\u68c0\u67e5 \u00b6 \u62e6\u622a\u5668 /** * \u767b\u9646\u68c0\u67e5\uff0c */ public class LoginHandlerInterceptor implements HandlerInterceptor { //\u76ee\u6807\u65b9\u6cd5\u6267\u884c\u4e4b\u524d @Override public boolean preHandle ( HttpServletRequest request , HttpServletResponse response , Object handler ) throws Exception { Object user = request . getSession (). getAttribute ( \"loginUser\" ); if ( user == null ){ //\u672a\u767b\u9646\uff0c\u8fd4\u56de\u767b\u9646\u9875\u9762 request . setAttribute ( \"msg\" , \"\u6ca1\u6709\u6743\u9650\u8bf7\u5148\u767b\u9646\" ); request . getRequestDispatcher ( \"/index.html\" ). forward ( request , response ); return false ; } else { //\u5df2\u767b\u9646\uff0c\u653e\u884c\u8bf7\u6c42 return true ; } } @Override public void postHandle ( HttpServletRequest request , HttpServletResponse response , Object handler , ModelAndView modelAndView ) throws Exception { } @Override public void afterCompletion ( HttpServletRequest request , HttpServletResponse response , Object handler , Exception ex ) throws Exception { } } \u6ce8\u518c\u62e6\u622a\u5668 //\u6240\u6709\u7684WebMvcConfigurerAdapter\u7ec4\u4ef6\u90fd\u4f1a\u4e00\u8d77\u8d77\u4f5c\u7528 @Bean //\u5c06\u7ec4\u4ef6\u6ce8\u518c\u5728\u5bb9\u5668 public WebMvcConfigurerAdapter webMvcConfigurerAdapter (){ WebMvcConfigurerAdapter adapter = new WebMvcConfigurerAdapter () { @Override public void addViewControllers ( ViewControllerRegistry registry ) { registry . addViewController ( \"/\" ). setViewName ( \"login\" ); registry . addViewController ( \"/index.html\" ). setViewName ( \"login\" ); registry . addViewController ( \"/main.html\" ). setViewName ( \"dashboard\" ); } //\u6ce8\u518c\u62e6\u622a\u5668 @Override public void addInterceptors ( InterceptorRegistry registry ) { //super.addInterceptors(registry); //\u9759\u6001\u8d44\u6e90\uff1b *.css , *.js //SpringBoot\u5df2\u7ecf\u505a\u597d\u4e86\u9759\u6001\u8d44\u6e90\u6620\u5c04 registry . addInterceptor ( new LoginHandlerInterceptor ()). addPathPatterns ( \"/**\" ) . excludePathPatterns ( \"/index.html\" , \"/\" , \"/user/login\" ); } }; return adapter ; } 5\uff09\u3001CRUD-\u5458\u5de5\u5217\u8868 \u00b6 \u5b9e\u9a8c\u8981\u6c42\uff1a 1\uff09\u3001RestfulCRUD\uff1aCRUD\u6ee1\u8db3Rest\u98ce\u683c\uff1b URI\uff1a /\u8d44\u6e90\u540d\u79f0/\u8d44\u6e90\u6807\u8bc6 HTTP\u8bf7\u6c42\u65b9\u5f0f\u533a\u5206\u5bf9\u8d44\u6e90CRUD\u64cd\u4f5c \u666e\u901aCRUD\uff08uri\u6765\u533a\u5206\u64cd\u4f5c\uff09 RestfulCRUD \u67e5\u8be2 getEmp emp---GET \u6dfb\u52a0 addEmp?xxx emp---POST \u4fee\u6539 updateEmp?id=xxx&xxx=xx emp/{id}---PUT \u5220\u9664 deleteEmp?id=1 emp/{id}---DELETE 2\uff09\u3001\u5b9e\u9a8c\u7684\u8bf7\u6c42\u67b6\u6784; \u5b9e\u9a8c\u529f\u80fd \u8bf7\u6c42URI \u8bf7\u6c42\u65b9\u5f0f \u67e5\u8be2\u6240\u6709\u5458\u5de5 emps GET \u67e5\u8be2\u67d0\u4e2a\u5458\u5de5(\u6765\u5230\u4fee\u6539\u9875\u9762) emp/1 GET \u6765\u5230\u6dfb\u52a0\u9875\u9762 emp GET \u6dfb\u52a0\u5458\u5de5 emp POST \u6765\u5230\u4fee\u6539\u9875\u9762\uff08\u67e5\u51fa\u5458\u5de5\u8fdb\u884c\u4fe1\u606f\u56de\u663e\uff09 emp/1 GET \u4fee\u6539\u5458\u5de5 emp PUT \u5220\u9664\u5458\u5de5 emp/1 DELETE 3\uff09\u3001\u5458\u5de5\u5217\u8868\uff1a thymeleaf\u516c\u5171\u9875\u9762\u5143\u7d20\u62bd\u53d6 \u00b6 1\u3001\u62bd\u53d6\u516c\u5171\u7247\u6bb5 < div th:fragment = \"copy\" > &copy; 2011 The Good Thymes Virtual Grocery </ div > 2\u3001\u5f15\u5165\u516c\u5171\u7247\u6bb5 < div th:insert = \"~{footer :: copy}\" ></ div > ~{templatename::selector}\uff1a\u6a21\u677f\u540d::\u9009\u62e9\u5668 ~{templatename::fragmentname}:\u6a21\u677f\u540d::\u7247\u6bb5\u540d 3\u3001\u9ed8\u8ba4\u6548\u679c\uff1a insert\u7684\u516c\u5171\u7247\u6bb5\u5728div\u6807\u7b7e\u4e2d \u5982\u679c\u4f7f\u7528th:insert\u7b49\u5c5e\u6027\u8fdb\u884c\u5f15\u5165\uff0c\u53ef\u4ee5\u4e0d\u7528\u5199~{}\uff1a \u884c\u5185\u5199\u6cd5\u53ef\u4ee5\u52a0\u4e0a\uff1a[[~{}]];[(~{})]\uff1b \u4e09\u79cd\u5f15\u5165\u516c\u5171\u7247\u6bb5\u7684th\u5c5e\u6027\uff1a th:insert \uff1a\u5c06\u516c\u5171\u7247\u6bb5\u6574\u4e2a\u63d2\u5165\u5230\u58f0\u660e\u5f15\u5165\u7684\u5143\u7d20\u4e2d th:replace \uff1a\u5c06\u58f0\u660e\u5f15\u5165\u7684\u5143\u7d20\u66ff\u6362\u4e3a\u516c\u5171\u7247\u6bb5 th:include \uff1a\u5c06\u88ab\u5f15\u5165\u7684\u7247\u6bb5\u7684\u5185\u5bb9\u5305\u542b\u8fdb\u8fd9\u4e2a\u6807\u7b7e\u4e2d < footer th:fragment = \"copy\" > &copy; 2011 The Good Thymes Virtual Grocery </ footer > \u5f15\u5165\u65b9\u5f0f < div th:insert = \"footer :: copy\" ></ div > < div th:replace = \"footer :: copy\" ></ div > < div th:include = \"footer :: copy\" ></ div > \u6548\u679c < div > < footer > &copy; 2011 The Good Thymes Virtual Grocery </ footer > </ div > < footer > &copy; 2011 The Good Thymes Virtual Grocery </ footer > < div > &copy; 2011 The Good Thymes Virtual Grocery </ div > \u5f15\u5165\u7247\u6bb5\u7684\u65f6\u5019\u4f20\u5165\u53c2\u6570\uff1a < nav class = \"col-md-2 d-none d-md-block bg-light sidebar\" id = \"sidebar\" > < div class = \"sidebar-sticky\" > < ul class = \"nav flex-column\" > < li class = \"nav-item\" > < a class = \"nav-link active\" th:class = \"${activeUri=='main.html'?'nav-link active':'nav-link'}\" href = \"#\" th:href = \"@{/main.html}\" > < svg xmlns = \"http://www.w3.org/2000/svg\" width = \"24\" height = \"24\" viewBox = \"0 0 24 24\" fill = \"none\" stroke = \"currentColor\" stroke-width = \"2\" stroke-linecap = \"round\" stroke-linejoin = \"round\" class = \"feather feather-home\" > < path d = \"M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z\" ></ path > < polyline points = \"9 22 9 12 15 12 15 22\" ></ polyline > </ svg > Dashboard < span class = \"sr-only\" > (current) </ span > </ a > </ li > <!--\u5f15\u5165\u4fa7\u8fb9\u680f;\u4f20\u5165\u53c2\u6570--> < div th:replace = \"commons/bar::#sidebar(activeUri='emps')\" ></ div > 6\uff09\u3001CRUD-\u5458\u5de5\u6dfb\u52a0 \u00b6 \u6dfb\u52a0\u9875\u9762 < form > < div class = \"form-group\" > < label > LastName </ label > < input type = \"text\" class = \"form-control\" placeholder = \"zhangsan\" > </ div > < div class = \"form-group\" > < label > Email </ label > < input type = \"email\" class = \"form-control\" placeholder = \"zhangsan@atguigu.com\" > </ div > < div class = \"form-group\" > < label > Gender </ label >< br /> < div class = \"form-check form-check-inline\" > < input class = \"form-check-input\" type = \"radio\" name = \"gender\" value = \"1\" > < label class = \"form-check-label\" > \u7537 </ label > </ div > < div class = \"form-check form-check-inline\" > < input class = \"form-check-input\" type = \"radio\" name = \"gender\" value = \"0\" > < label class = \"form-check-label\" > \u5973 </ label > </ div > </ div > < div class = \"form-group\" > < label > department </ label > < select class = \"form-control\" > < option > 1 </ option > < option > 2 </ option > < option > 3 </ option > < option > 4 </ option > < option > 5 </ option > </ select > </ div > < div class = \"form-group\" > < label > Birth </ label > < input type = \"text\" class = \"form-control\" placeholder = \"zhangsan\" > </ div > < button type = \"submit\" class = \"btn btn-primary\" > \u6dfb\u52a0 </ button > </ form > \u63d0\u4ea4\u7684\u6570\u636e\u683c\u5f0f\u4e0d\u5bf9\uff1a\u751f\u65e5\uff1a\u65e5\u671f\uff1b 2017-12-12\uff1b2017/12/12\uff1b2017.12.12\uff1b \u65e5\u671f\u7684\u683c\u5f0f\u5316\uff1bSpringMVC\u5c06\u9875\u9762\u63d0\u4ea4\u7684\u503c\u9700\u8981\u8f6c\u6362\u4e3a\u6307\u5b9a\u7684\u7c7b\u578b; 2017-12-12---Date\uff1b \u7c7b\u578b\u8f6c\u6362\uff0c\u683c\u5f0f\u5316; \u9ed8\u8ba4\u65e5\u671f\u662f\u6309\u7167/\u7684\u65b9\u5f0f\uff1b 7\uff09\u3001CRUD-\u5458\u5de5\u4fee\u6539 \u00b6 \u4fee\u6539\u6dfb\u52a0\u4e8c\u5408\u4e00\u8868\u5355 <!--\u9700\u8981\u533a\u5206\u662f\u5458\u5de5\u4fee\u6539\u8fd8\u662f\u6dfb\u52a0\uff1b--> < form th:action = \"@{/emp}\" method = \"post\" > <!--\u53d1\u9001put\u8bf7\u6c42\u4fee\u6539\u5458\u5de5\u6570\u636e--> <!-- 1\u3001SpringMVC\u4e2d\u914d\u7f6eHiddenHttpMethodFilter;\uff08SpringBoot\u81ea\u52a8\u914d\u7f6e\u597d\u7684\uff09 2\u3001\u9875\u9762\u521b\u5efa\u4e00\u4e2apost\u8868\u5355 3\u3001\u521b\u5efa\u4e00\u4e2ainput\u9879\uff0cname=\"_method\";\u503c\u5c31\u662f\u6211\u4eec\u6307\u5b9a\u7684\u8bf7\u6c42\u65b9\u5f0f --> < input type = \"hidden\" name = \"_method\" value = \"put\" th:if = \"${emp!=null}\" /> < input type = \"hidden\" name = \"id\" th:if = \"${emp!=null}\" th:value = \"${emp.id}\" > < div class = \"form-group\" > < label > LastName </ label > < input name = \"lastName\" type = \"text\" class = \"form-control\" placeholder = \"zhangsan\" th:value = \"${emp!=null}?${emp.lastName}\" > </ div > < div class = \"form-group\" > < label > Email </ label > < input name = \"email\" type = \"email\" class = \"form-control\" placeholder = \"zhangsan@atguigu.com\" th:value = \"${emp!=null}?${emp.email}\" > </ div > < div class = \"form-group\" > < label > Gender </ label >< br /> < div class = \"form-check form-check-inline\" > < input class = \"form-check-input\" type = \"radio\" name = \"gender\" value = \"1\" th:checked = \"${emp!=null}?${emp.gender==1}\" > < label class = \"form-check-label\" > \u7537 </ label > </ div > < div class = \"form-check form-check-inline\" > < input class = \"form-check-input\" type = \"radio\" name = \"gender\" value = \"0\" th:checked = \"${emp!=null}?${emp.gender==0}\" > < label class = \"form-check-label\" > \u5973 </ label > </ div > </ div > < div class = \"form-group\" > < label > department </ label > <!--\u63d0\u4ea4\u7684\u662f\u90e8\u95e8\u7684id--> < select class = \"form-control\" name = \"department.id\" > < option th:selected = \"${emp!=null}?${dept.id == emp.department.id}\" th:value = \"${dept.id}\" th:each = \"dept:${depts}\" th:text = \"${dept.departmentName}\" > 1 </ option > </ select > </ div > < div class = \"form-group\" > < label > Birth </ label > < input name = \"birth\" type = \"text\" class = \"form-control\" placeholder = \"zhangsan\" th:value = \"${emp!=null}?${#dates.format(emp.birth, 'yyyy-MM-dd HH:mm')}\" > </ div > < button type = \"submit\" class = \"btn btn-primary\" th:text = \"${emp!=null}?'\u4fee\u6539':'\u6dfb\u52a0'\" > \u6dfb\u52a0 </ button > </ form > 8\uff09\u3001CRUD-\u5458\u5de5\u5220\u9664 \u00b6 < tr th:each = \"emp:${emps}\" > < td th:text = \"${emp.id}\" ></ td > < td > [[${emp.lastName}]] </ td > < td th:text = \"${emp.email}\" ></ td > < td th:text = \"${emp.gender}==0?'\u5973':'\u7537'\" ></ td > < td th:text = \"${emp.department.departmentName}\" ></ td > < td th:text = \"${#dates.format(emp.birth, 'yyyy-MM-dd HH:mm')}\" ></ td > < td > < a class = \"btn btn-sm btn-primary\" th:href = \"@{/emp/}+${emp.id}\" > \u7f16\u8f91 </ a > < button th:attr = \"del_uri=@{/emp/}+${emp.id}\" class = \"btn btn-sm btn-danger deleteBtn\" > \u5220\u9664 </ button > </ td > </ tr > < script > $ ( \".deleteBtn\" ). click ( function (){ //\u5220\u9664\u5f53\u524d\u5458\u5de5\u7684 $ ( \"#deleteEmpForm\" ). attr ( \"action\" , $ ( this ). attr ( \"del_uri\" )). submit (); return false ; }); </ script > 7\u3001\u9519\u8bef\u5904\u7406\u673a\u5236 \u00b6 1\uff09\u3001SpringBoot\u9ed8\u8ba4\u7684\u9519\u8bef\u5904\u7406\u673a\u5236 \u00b6 \u9ed8\u8ba4\u6548\u679c\uff1a \u200b 1\uff09\u3001\u6d4f\u89c8\u5668\uff0c\u8fd4\u56de\u4e00\u4e2a\u9ed8\u8ba4\u7684\u9519\u8bef\u9875\u9762 \u6d4f\u89c8\u5668\u53d1\u9001\u8bf7\u6c42\u7684\u8bf7\u6c42\u5934\uff1a \u200b 2\uff09\u3001\u5982\u679c\u662f\u5176\u4ed6\u5ba2\u6237\u7aef\uff0c\u9ed8\u8ba4\u54cd\u5e94\u4e00\u4e2ajson\u6570\u636e \u200b \u539f\u7406\uff1a \u200b \u53ef\u4ee5\u53c2\u7167ErrorMvcAutoConfiguration\uff1b\u9519\u8bef\u5904\u7406\u7684\u81ea\u52a8\u914d\u7f6e\uff1b \u7ed9\u5bb9\u5668\u4e2d\u6dfb\u52a0\u4e86\u4ee5\u4e0b\u7ec4\u4ef6 \u200b 1\u3001DefaultErrorAttributes\uff1a \u5e2e\u6211\u4eec\u5728\u9875\u9762\u5171\u4eab\u4fe1\u606f \uff1b @Override public Map < String , Object > getErrorAttributes ( RequestAttributes requestAttributes , boolean includeStackTrace ) { Map < String , Object > errorAttributes = new LinkedHashMap < String , Object > (); errorAttributes . put ( \"timestamp\" , new Date ()); addStatus ( errorAttributes , requestAttributes ); addErrorDetails ( errorAttributes , requestAttributes , includeStackTrace ); addPath ( errorAttributes , requestAttributes ); return errorAttributes ; } \u200b 2\u3001BasicErrorController\uff1a\u5904\u7406\u9ed8\u8ba4/error\u8bf7\u6c42 @Controller @RequestMapping ( \"${server.error.path:${error.path:/error}}\" ) public class BasicErrorController extends AbstractErrorController { @RequestMapping ( produces = \"text/html\" ) //\u4ea7\u751fhtml\u7c7b\u578b\u7684\u6570\u636e\uff1b\u6d4f\u89c8\u5668\u53d1\u9001\u7684\u8bf7\u6c42\u6765\u5230\u8fd9\u4e2a\u65b9\u6cd5\u5904\u7406 public ModelAndView errorHtml ( HttpServletRequest request , HttpServletResponse response ) { HttpStatus status = getStatus ( request ); Map < String , Object > model = Collections . unmodifiableMap ( getErrorAttributes ( request , isIncludeStackTrace ( request , MediaType . TEXT_HTML ))); response . setStatus ( status . value ()); //\u53bb\u54ea\u4e2a\u9875\u9762\u4f5c\u4e3a\u9519\u8bef\u9875\u9762\uff1b\u5305\u542b\u9875\u9762\u5730\u5740\u548c\u9875\u9762\u5185\u5bb9 ModelAndView modelAndView = resolveErrorView ( request , response , status , model ); return ( modelAndView == null ? new ModelAndView ( \"error\" , model ) : modelAndView ); } @RequestMapping @ResponseBody //\u4ea7\u751fjson\u6570\u636e\uff0c\u5176\u4ed6\u5ba2\u6237\u7aef\u6765\u5230\u8fd9\u4e2a\u65b9\u6cd5\u5904\u7406\uff1b public ResponseEntity < Map < String , Object >> error ( HttpServletRequest request ) { Map < String , Object > body = getErrorAttributes ( request , isIncludeStackTrace ( request , MediaType . ALL )); HttpStatus status = getStatus ( request ); return new ResponseEntity < Map < String , Object >> ( body , status ); } \u200b 3\u3001ErrorPageCustomizer\uff1a @Value ( \"${error.path:/error}\" ) private String path = \"/error\" ; \u7cfb\u7edf\u51fa\u73b0\u9519\u8bef\u4ee5\u540e\u6765\u5230error\u8bf7\u6c42\u8fdb\u884c\u5904\u7406 \uff1b\uff08 web . xml\u6ce8\u518c\u7684\u9519\u8bef\u9875\u9762\u89c4\u5219 \uff09 \u200b 4\u3001DefaultErrorViewResolver\uff1a @Override public ModelAndView resolveErrorView ( HttpServletRequest request , HttpStatus status , Map < String , Object > model ) { ModelAndView modelAndView = resolve ( String . valueOf ( status ), model ); if ( modelAndView == null && SERIES_VIEWS . containsKey ( status . series ())) { modelAndView = resolve ( SERIES_VIEWS . get ( status . series ()), model ); } return modelAndView ; } private ModelAndView resolve ( String viewName , Map < String , Object > model ) { //\u9ed8\u8ba4SpringBoot\u53ef\u4ee5\u53bb\u627e\u5230\u4e00\u4e2a\u9875\u9762\uff1f error/404 String errorViewName = \"error/\" + viewName ; //\u6a21\u677f\u5f15\u64ce\u53ef\u4ee5\u89e3\u6790\u8fd9\u4e2a\u9875\u9762\u5730\u5740\u5c31\u7528\u6a21\u677f\u5f15\u64ce\u89e3\u6790 TemplateAvailabilityProvider provider = this . templateAvailabilityProviders . getProvider ( errorViewName , this . applicationContext ); if ( provider != null ) { //\u6a21\u677f\u5f15\u64ce\u53ef\u7528\u7684\u60c5\u51b5\u4e0b\u8fd4\u56de\u5230errorViewName\u6307\u5b9a\u7684\u89c6\u56fe\u5730\u5740 return new ModelAndView ( errorViewName , model ); } //\u6a21\u677f\u5f15\u64ce\u4e0d\u53ef\u7528\uff0c\u5c31\u5728\u9759\u6001\u8d44\u6e90\u6587\u4ef6\u5939\u4e0b\u627eerrorViewName\u5bf9\u5e94\u7684\u9875\u9762 error/404.html return resolveResource ( errorViewName , model ); } \u200b \u6b65\u9aa4\uff1a \u200b \u4e00\u4f46\u7cfb\u7edf\u51fa\u73b04xx\u6216\u80055xx\u4e4b\u7c7b\u7684\u9519\u8bef\uff1bErrorPageCustomizer\u5c31\u4f1a\u751f\u6548\uff08\u5b9a\u5236\u9519\u8bef\u7684\u54cd\u5e94\u89c4\u5219\uff09\uff1b\u5c31\u4f1a\u6765\u5230/error\u8bf7\u6c42\uff1b\u5c31\u4f1a\u88ab**BasicErrorController**\u5904\u7406\uff1b \u200b 1\uff09\u54cd\u5e94\u9875\u9762\uff1b\u53bb\u54ea\u4e2a\u9875\u9762\u662f\u7531**DefaultErrorViewResolver**\u89e3\u6790\u5f97\u5230\u7684\uff1b protected ModelAndView resolveErrorView ( HttpServletRequest request , HttpServletResponse response , HttpStatus status , Map < String , Object > model ) { //\u6240\u6709\u7684ErrorViewResolver\u5f97\u5230ModelAndView for ( ErrorViewResolver resolver : this . errorViewResolvers ) { ModelAndView modelAndView = resolver . resolveErrorView ( request , status , model ); if ( modelAndView != null ) { return modelAndView ; } } return null ; } 2\uff09\u3001\u5982\u679c\u5b9a\u5236\u9519\u8bef\u54cd\u5e94\uff1a \u00b6 1\uff09\u3001\u5982\u4f55\u5b9a\u5236\u9519\u8bef\u7684\u9875\u9762\uff1b \u00b6 \u200b 1\uff09\u3001\u6709\u6a21\u677f\u5f15\u64ce\u7684\u60c5\u51b5\u4e0b\uff1berror/\u72b6\u6001\u7801; \u3010\u5c06\u9519\u8bef\u9875\u9762\u547d\u540d\u4e3a \u9519\u8bef\u72b6\u6001\u7801.html \u653e\u5728\u6a21\u677f\u5f15\u64ce\u6587\u4ef6\u5939\u91cc\u9762\u7684 error\u6587\u4ef6\u5939\u4e0b\u3011\uff0c\u53d1\u751f\u6b64\u72b6\u6001\u7801\u7684\u9519\u8bef\u5c31\u4f1a\u6765\u5230 \u5bf9\u5e94\u7684\u9875\u9762\uff1b \u200b \u6211\u4eec\u53ef\u4ee5\u4f7f\u75284xx\u548c5xx\u4f5c\u4e3a\u9519\u8bef\u9875\u9762\u7684\u6587\u4ef6\u540d\u6765\u5339\u914d\u8fd9\u79cd\u7c7b\u578b\u7684\u6240\u6709\u9519\u8bef\uff0c\u7cbe\u786e\u4f18\u5148\uff08\u4f18\u5148\u5bfb\u627e\u7cbe\u786e\u7684\u72b6\u6001\u7801.html\uff09\uff1b \u200b \u9875\u9762\u80fd\u83b7\u53d6\u7684\u4fe1\u606f\uff1b \u200b timestamp\uff1a\u65f6\u95f4\u6233 \u200b status\uff1a\u72b6\u6001\u7801 \u200b error\uff1a\u9519\u8bef\u63d0\u793a \u200b exception\uff1a\u5f02\u5e38\u5bf9\u8c61 \u200b message\uff1a\u5f02\u5e38\u6d88\u606f \u200b errors\uff1aJSR303\u6570\u636e\u6821\u9a8c\u7684\u9519\u8bef\u90fd\u5728\u8fd9\u91cc \u200b 2\uff09\u3001\u6ca1\u6709\u6a21\u677f\u5f15\u64ce\uff08\u6a21\u677f\u5f15\u64ce\u627e\u4e0d\u5230\u8fd9\u4e2a\u9519\u8bef\u9875\u9762\uff09\uff0c\u9759\u6001\u8d44\u6e90\u6587\u4ef6\u5939\u4e0b\u627e\uff1b \u200b 3\uff09\u3001\u4ee5\u4e0a\u90fd\u6ca1\u6709\u9519\u8bef\u9875\u9762\uff0c\u5c31\u662f\u9ed8\u8ba4\u6765\u5230SpringBoot\u9ed8\u8ba4\u7684\u9519\u8bef\u63d0\u793a\u9875\u9762\uff1b 2\uff09\u3001\u5982\u4f55\u5b9a\u5236\u9519\u8bef\u7684json\u6570\u636e\uff1b \u00b6 \u200b 1\uff09\u3001\u81ea\u5b9a\u4e49\u5f02\u5e38\u5904\u7406&\u8fd4\u56de\u5b9a\u5236json\u6570\u636e\uff1b @ControllerAdvice public class MyExceptionHandler { @ResponseBody @ExceptionHandler ( UserNotExistException . class ) public Map < String , Object > handleException ( Exception e ){ Map < String , Object > map = new HashMap <> (); map . put ( \"code\" , \"user.notexist\" ); map . put ( \"message\" , e . getMessage ()); return map ; } } //\u6ca1\u6709\u81ea\u9002\u5e94\u6548\u679c... \u200b 2\uff09\u3001\u8f6c\u53d1\u5230/error\u8fdb\u884c\u81ea\u9002\u5e94\u54cd\u5e94\u6548\u679c\u5904\u7406 @ExceptionHandler ( UserNotExistException . class ) public String handleException ( Exception e , HttpServletRequest request ){ Map < String , Object > map = new HashMap <> (); //\u4f20\u5165\u6211\u4eec\u81ea\u5df1\u7684\u9519\u8bef\u72b6\u6001\u7801 4xx 5xx\uff0c\u5426\u5219\u5c31\u4e0d\u4f1a\u8fdb\u5165\u5b9a\u5236\u9519\u8bef\u9875\u9762\u7684\u89e3\u6790\u6d41\u7a0b /** * Integer statusCode = (Integer) request .getAttribute(\"javax.servlet.error.status_code\"); */ request . setAttribute ( \"javax.servlet.error.status_code\" , 500 ); map . put ( \"code\" , \"user.notexist\" ); map . put ( \"message\" , e . getMessage ()); //\u8f6c\u53d1\u5230/error return \"forward:/error\" ; } 3\uff09\u3001\u5c06\u6211\u4eec\u7684\u5b9a\u5236\u6570\u636e\u643a\u5e26\u51fa\u53bb\uff1b \u00b6 \u51fa\u73b0\u9519\u8bef\u4ee5\u540e\uff0c\u4f1a\u6765\u5230/error\u8bf7\u6c42\uff0c\u4f1a\u88abBasicErrorController\u5904\u7406\uff0c\u54cd\u5e94\u51fa\u53bb\u53ef\u4ee5\u83b7\u53d6\u7684\u6570\u636e\u662f\u7531getErrorAttributes\u5f97\u5230\u7684\uff08\u662fAbstractErrorController\uff08ErrorController\uff09\u89c4\u5b9a\u7684\u65b9\u6cd5\uff09\uff1b \u200b 1\u3001\u5b8c\u5168\u6765\u7f16\u5199\u4e00\u4e2aErrorController\u7684\u5b9e\u73b0\u7c7b\u3010\u6216\u8005\u662f\u7f16\u5199AbstractErrorController\u7684\u5b50\u7c7b\u3011\uff0c\u653e\u5728\u5bb9\u5668\u4e2d\uff1b \u200b 2\u3001\u9875\u9762\u4e0a\u80fd\u7528\u7684\u6570\u636e\uff0c\u6216\u8005\u662fjson\u8fd4\u56de\u80fd\u7528\u7684\u6570\u636e\u90fd\u662f\u901a\u8fc7errorAttributes.getErrorAttributes\u5f97\u5230\uff1b \u200b \u5bb9\u5668\u4e2dDefaultErrorAttributes.getErrorAttributes()\uff1b\u9ed8\u8ba4\u8fdb\u884c\u6570\u636e\u5904\u7406\u7684\uff1b \u81ea\u5b9a\u4e49ErrorAttributes //\u7ed9\u5bb9\u5668\u4e2d\u52a0\u5165\u6211\u4eec\u81ea\u5df1\u5b9a\u4e49\u7684ErrorAttributes @Component public class MyErrorAttributes extends DefaultErrorAttributes { @Override public Map < String , Object > getErrorAttributes ( RequestAttributes requestAttributes , boolean includeStackTrace ) { Map < String , Object > map = super . getErrorAttributes ( requestAttributes , includeStackTrace ); map . put ( \"company\" , \"atguigu\" ); return map ; } } \u6700\u7ec8\u7684\u6548\u679c\uff1a\u54cd\u5e94\u662f\u81ea\u9002\u5e94\u7684\uff0c\u53ef\u4ee5\u901a\u8fc7\u5b9a\u5236ErrorAttributes\u6539\u53d8\u9700\u8981\u8fd4\u56de\u7684\u5185\u5bb9\uff0c 8\u3001\u914d\u7f6e\u5d4c\u5165\u5f0fServlet\u5bb9\u5668 \u00b6 SpringBoot\u9ed8\u8ba4\u4f7f\u7528Tomcat\u4f5c\u4e3a\u5d4c\u5165\u5f0f\u7684Servlet\u5bb9\u5668\uff1b \u95ee\u9898\uff1f 1\uff09\u3001\u5982\u4f55\u5b9a\u5236\u548c\u4fee\u6539Servlet\u5bb9\u5668\u7684\u76f8\u5173\u914d\u7f6e\uff1b \u00b6 1\u3001\u4fee\u6539\u548cserver\u6709\u5173\u7684\u914d\u7f6e\uff08ServerProperties\u3010\u4e5f\u662fEmbeddedServletContainerCustomizer\u3011\uff09\uff1b server.port = 8081 server.context-path = /crud server.tomcat.uri-encoding = UTF-8 //\u901a\u7528\u7684Servlet\u5bb9\u5668\u8bbe\u7f6e server.xxx //Tomcat\u7684\u8bbe\u7f6e server.tomcat.xxx 2\u3001\u7f16\u5199\u4e00\u4e2a**EmbeddedServletContainerCustomizer**\uff1a\u5d4c\u5165\u5f0f\u7684Servlet\u5bb9\u5668\u7684\u5b9a\u5236\u5668\uff1b\u6765\u4fee\u6539Servlet\u5bb9\u5668\u7684\u914d\u7f6e @Bean //\u4e00\u5b9a\u8981\u5c06\u8fd9\u4e2a\u5b9a\u5236\u5668\u52a0\u5165\u5230\u5bb9\u5668\u4e2d public EmbeddedServletContainerCustomizer embeddedServletContainerCustomizer (){ return new EmbeddedServletContainerCustomizer () { //\u5b9a\u5236\u5d4c\u5165\u5f0f\u7684Servlet\u5bb9\u5668\u76f8\u5173\u7684\u89c4\u5219 @Override public void customize ( ConfigurableEmbeddedServletContainer container ) { container . setPort ( 8083 ); } }; } 2\uff09\u3001\u6ce8\u518cServlet\u4e09\u5927\u7ec4\u4ef6\u3010Servlet\u3001Filter\u3001Listener\u3011 \u00b6 \u7531\u4e8eSpringBoot\u9ed8\u8ba4\u662f\u4ee5jar\u5305\u7684\u65b9\u5f0f\u542f\u52a8\u5d4c\u5165\u5f0f\u7684Servlet\u5bb9\u5668\u6765\u542f\u52a8SpringBoot\u7684web\u5e94\u7528\uff0c\u6ca1\u6709web.xml\u6587\u4ef6\u3002 \u6ce8\u518c\u4e09\u5927\u7ec4\u4ef6\u7528\u4ee5\u4e0b\u65b9\u5f0f ServletRegistrationBean //\u6ce8\u518c\u4e09\u5927\u7ec4\u4ef6 @Bean public ServletRegistrationBean myServlet (){ ServletRegistrationBean registrationBean = new ServletRegistrationBean ( new MyServlet (), \"/myServlet\" ); return registrationBean ; } FilterRegistrationBean @Bean public FilterRegistrationBean myFilter (){ FilterRegistrationBean registrationBean = new FilterRegistrationBean (); registrationBean . setFilter ( new MyFilter ()); registrationBean . setUrlPatterns ( Arrays . asList ( \"/hello\" , \"/myServlet\" )); return registrationBean ; } ServletListenerRegistrationBean @Bean public ServletListenerRegistrationBean myListener (){ ServletListenerRegistrationBean < MyListener > registrationBean = new ServletListenerRegistrationBean <> ( new MyListener ()); return registrationBean ; } SpringBoot\u5e2e\u6211\u4eec\u81ea\u52a8SpringMVC\u7684\u65f6\u5019\uff0c\u81ea\u52a8\u7684\u6ce8\u518cSpringMVC\u7684\u524d\u7aef\u63a7\u5236\u5668\uff1bDIspatcherServlet\uff1b DispatcherServletAutoConfiguration\u4e2d\uff1a @Bean ( name = DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME ) @ConditionalOnBean ( value = DispatcherServlet . class , name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME ) public ServletRegistrationBean dispatcherServletRegistration ( DispatcherServlet dispatcherServlet ) { ServletRegistrationBean registration = new ServletRegistrationBean ( dispatcherServlet , this . serverProperties . getServletMapping ()); //\u9ed8\u8ba4\u62e6\u622a\uff1a / \u6240\u6709\u8bf7\u6c42\uff1b\u5305\u9759\u6001\u8d44\u6e90\uff0c\u4f46\u662f\u4e0d\u62e6\u622ajsp\u8bf7\u6c42\uff1b /*\u4f1a\u62e6\u622ajsp //\u53ef\u4ee5\u901a\u8fc7server.servletPath\u6765\u4fee\u6539SpringMVC\u524d\u7aef\u63a7\u5236\u5668\u9ed8\u8ba4\u62e6\u622a\u7684\u8bf7\u6c42\u8def\u5f84 registration . setName ( DEFAULT_DISPATCHER_SERVLET_BEAN_NAME ); registration . setLoadOnStartup ( this . webMvcProperties . getServlet (). getLoadOnStartup ()); if ( this . multipartConfig != null ) { registration . setMultipartConfig ( this . multipartConfig ); } return registration ; } 2\uff09\u3001SpringBoot\u80fd\u4e0d\u80fd\u652f\u6301\u5176\u4ed6\u7684Servlet\u5bb9\u5668\uff1b 3\uff09\u3001\u66ff\u6362\u4e3a\u5176\u4ed6\u5d4c\u5165\u5f0fServlet\u5bb9\u5668 \u00b6 \u9ed8\u8ba4\u652f\u6301\uff1a Tomcat\uff08\u9ed8\u8ba4\u4f7f\u7528\uff09 <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-web </artifactId> \u5f15\u5165web\u6a21\u5757\u9ed8\u8ba4\u5c31\u662f\u4f7f\u7528\u5d4c\u5165\u5f0f\u7684Tomcat\u4f5c\u4e3aServlet\u5bb9\u5668\uff1b </dependency> Jetty <!-- \u5f15\u5165web\u6a21\u5757 --> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-web </artifactId> <exclusions> <exclusion> <artifactId> spring-boot-starter-tomcat </artifactId> <groupId> org.springframework.boot </groupId> </exclusion> </exclusions> </dependency> <!--\u5f15\u5165\u5176\u4ed6\u7684Servlet\u5bb9\u5668--> <dependency> <artifactId> spring-boot-starter-jetty </artifactId> <groupId> org.springframework.boot </groupId> </dependency> Undertow <!-- \u5f15\u5165web\u6a21\u5757 --> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-web </artifactId> <exclusions> <exclusion> <artifactId> spring-boot-starter-tomcat </artifactId> <groupId> org.springframework.boot </groupId> </exclusion> </exclusions> </dependency> <!--\u5f15\u5165\u5176\u4ed6\u7684Servlet\u5bb9\u5668--> <dependency> <artifactId> spring-boot-starter-undertow </artifactId> <groupId> org.springframework.boot </groupId> </dependency> 4\uff09\u3001\u5d4c\u5165\u5f0fServlet\u5bb9\u5668\u81ea\u52a8\u914d\u7f6e\u539f\u7406\uff1b \u00b6 EmbeddedServletContainerAutoConfiguration\uff1a\u5d4c\u5165\u5f0f\u7684Servlet\u5bb9\u5668\u81ea\u52a8\u914d\u7f6e\uff1f @AutoConfigureOrder ( Ordered . HIGHEST_PRECEDENCE ) @Configuration @ConditionalOnWebApplication @Import ( BeanPostProcessorsRegistrar . class ) //\u5bfc\u5165BeanPostProcessorsRegistrar\uff1aSpring\u6ce8\u89e3\u7248\uff1b\u7ed9\u5bb9\u5668\u4e2d\u5bfc\u5165\u4e00\u4e9b\u7ec4\u4ef6 //\u5bfc\u5165\u4e86EmbeddedServletContainerCustomizerBeanPostProcessor\uff1a //\u540e\u7f6e\u5904\u7406\u5668\uff1abean\u521d\u59cb\u5316\u524d\u540e\uff08\u521b\u5efa\u5b8c\u5bf9\u8c61\uff0c\u8fd8\u6ca1\u8d4b\u503c\u8d4b\u503c\uff09\u6267\u884c\u521d\u59cb\u5316\u5de5\u4f5c public class EmbeddedServletContainerAutoConfiguration { @Configuration @ConditionalOnClass ({ Servlet . class , Tomcat . class }) //\u5224\u65ad\u5f53\u524d\u662f\u5426\u5f15\u5165\u4e86Tomcat\u4f9d\u8d56\uff1b @ConditionalOnMissingBean ( value = EmbeddedServletContainerFactory . class , search = SearchStrategy . CURRENT ) //\u5224\u65ad\u5f53\u524d\u5bb9\u5668\u6ca1\u6709\u7528\u6237\u81ea\u5df1\u5b9a\u4e49EmbeddedServletContainerFactory\uff1a\u5d4c\u5165\u5f0f\u7684Servlet\u5bb9\u5668\u5de5\u5382\uff1b\u4f5c\u7528\uff1a\u521b\u5efa\u5d4c\u5165\u5f0f\u7684Servlet\u5bb9\u5668 public static class EmbeddedTomcat { @Bean public TomcatEmbeddedServletContainerFactory tomcatEmbeddedServletContainerFactory () { return new TomcatEmbeddedServletContainerFactory (); } } /** * Nested configuration if Jetty is being used. */ @Configuration @ConditionalOnClass ({ Servlet . class , Server . class , Loader . class , WebAppContext . class }) @ConditionalOnMissingBean ( value = EmbeddedServletContainerFactory . class , search = SearchStrategy . CURRENT ) public static class EmbeddedJetty { @Bean public JettyEmbeddedServletContainerFactory jettyEmbeddedServletContainerFactory () { return new JettyEmbeddedServletContainerFactory (); } } /** * Nested configuration if Undertow is being used. */ @Configuration @ConditionalOnClass ({ Servlet . class , Undertow . class , SslClientAuthMode . class }) @ConditionalOnMissingBean ( value = EmbeddedServletContainerFactory . class , search = SearchStrategy . CURRENT ) public static class EmbeddedUndertow { @Bean public UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory () { return new UndertowEmbeddedServletContainerFactory (); } } 1\uff09\u3001EmbeddedServletContainerFactory\uff08\u5d4c\u5165\u5f0fServlet\u5bb9\u5668\u5de5\u5382\uff09 public interface EmbeddedServletContainerFactory { //\u83b7\u53d6\u5d4c\u5165\u5f0f\u7684Servlet\u5bb9\u5668 EmbeddedServletContainer getEmbeddedServletContainer ( ServletContextInitializer ... initializers ); } 2\uff09\u3001EmbeddedServletContainer\uff1a\uff08\u5d4c\u5165\u5f0f\u7684Servlet\u5bb9\u5668\uff09 3\uff09\u3001\u4ee5**TomcatEmbeddedServletContainerFactory**\u4e3a\u4f8b @Override public EmbeddedServletContainer getEmbeddedServletContainer ( ServletContextInitializer ... initializers ) { //\u521b\u5efa\u4e00\u4e2aTomcat Tomcat tomcat = new Tomcat (); //\u914d\u7f6eTomcat\u7684\u57fa\u672c\u73af\u8282 File baseDir = ( this . baseDirectory != null ? this . baseDirectory : createTempDir ( \"tomcat\" )); tomcat . setBaseDir ( baseDir . getAbsolutePath ()); Connector connector = new Connector ( this . protocol ); tomcat . getService (). addConnector ( connector ); customizeConnector ( connector ); tomcat . setConnector ( connector ); tomcat . getHost (). setAutoDeploy ( false ); configureEngine ( tomcat . getEngine ()); for ( Connector additionalConnector : this . additionalTomcatConnectors ) { tomcat . getService (). addConnector ( additionalConnector ); } prepareContext ( tomcat . getHost (), initializers ); //\u5c06\u914d\u7f6e\u597d\u7684Tomcat\u4f20\u5165\u8fdb\u53bb\uff0c\u8fd4\u56de\u4e00\u4e2aEmbeddedServletContainer\uff1b\u5e76\u4e14\u542f\u52a8Tomcat\u670d\u52a1\u5668 return getTomcatEmbeddedServletContainer ( tomcat ); } 4\uff09\u3001\u6211\u4eec\u5bf9\u5d4c\u5165\u5f0f\u5bb9\u5668\u7684\u914d\u7f6e\u4fee\u6539\u662f\u600e\u4e48\u751f\u6548\uff1f ServerProperties\u3001EmbeddedServletContainerCustomizer EmbeddedServletContainerCustomizer \uff1a\u5b9a\u5236\u5668\u5e2e\u6211\u4eec\u4fee\u6539\u4e86Servlet\u5bb9\u5668\u7684\u914d\u7f6e\uff1f \u600e\u4e48\u4fee\u6539\u7684\u539f\u7406\uff1f 5\uff09\u3001\u5bb9\u5668\u4e2d\u5bfc\u5165\u4e86**EmbeddedServletContainerCustomizerBeanPostProcessor** //\u521d\u59cb\u5316\u4e4b\u524d @Override public Object postProcessBeforeInitialization ( Object bean , String beanName ) throws BeansException { //\u5982\u679c\u5f53\u524d\u521d\u59cb\u5316\u7684\u662f\u4e00\u4e2aConfigurableEmbeddedServletContainer\u7c7b\u578b\u7684\u7ec4\u4ef6 if ( bean instanceof ConfigurableEmbeddedServletContainer ) { // postProcessBeforeInitialization (( ConfigurableEmbeddedServletContainer ) bean ); } return bean ; } private void postProcessBeforeInitialization ( ConfigurableEmbeddedServletContainer bean ) { //\u83b7\u53d6\u6240\u6709\u7684\u5b9a\u5236\u5668\uff0c\u8c03\u7528\u6bcf\u4e00\u4e2a\u5b9a\u5236\u5668\u7684customize\u65b9\u6cd5\u6765\u7ed9Servlet\u5bb9\u5668\u8fdb\u884c\u5c5e\u6027\u8d4b\u503c\uff1b for ( EmbeddedServletContainerCustomizer customizer : getCustomizers ()) { customizer . customize ( bean ); } } private Collection < EmbeddedServletContainerCustomizer > getCustomizers () { if ( this . customizers == null ) { // Look up does not include the parent context this . customizers = new ArrayList < EmbeddedServletContainerCustomizer > ( this . beanFactory //\u4ece\u5bb9\u5668\u4e2d\u83b7\u53d6\u6240\u6709\u8fd9\u845b\u7c7b\u578b\u7684\u7ec4\u4ef6\uff1aEmbeddedServletContainerCustomizer //\u5b9a\u5236Servlet\u5bb9\u5668\uff0c\u7ed9\u5bb9\u5668\u4e2d\u53ef\u4ee5\u6dfb\u52a0\u4e00\u4e2aEmbeddedServletContainerCustomizer\u7c7b\u578b\u7684\u7ec4\u4ef6 . getBeansOfType ( EmbeddedServletContainerCustomizer . class , false , false ) . values ()); Collections . sort ( this . customizers , AnnotationAwareOrderComparator . INSTANCE ); this . customizers = Collections . unmodifiableList ( this . customizers ); } return this . customizers ; } ServerProperties\u4e5f\u662f\u5b9a\u5236\u5668 \u6b65\u9aa4\uff1a 1\uff09\u3001SpringBoot\u6839\u636e\u5bfc\u5165\u7684\u4f9d\u8d56\u60c5\u51b5\uff0c\u7ed9\u5bb9\u5668\u4e2d\u6dfb\u52a0\u76f8\u5e94\u7684EmbeddedServletContainerFactory\u3010TomcatEmbeddedServletContainerFactory\u3011 2\uff09\u3001\u5bb9\u5668\u4e2d\u67d0\u4e2a\u7ec4\u4ef6\u8981\u521b\u5efa\u5bf9\u8c61\u5c31\u4f1a\u60ca\u52a8\u540e\u7f6e\u5904\u7406\u5668\uff1bEmbeddedServletContainerCustomizerBeanPostProcessor\uff1b \u53ea\u8981\u662f\u5d4c\u5165\u5f0f\u7684Servlet\u5bb9\u5668\u5de5\u5382\uff0c\u540e\u7f6e\u5904\u7406\u5668\u5c31\u5de5\u4f5c\uff1b 3\uff09\u3001\u540e\u7f6e\u5904\u7406\u5668\uff0c\u4ece\u5bb9\u5668\u4e2d\u83b7\u53d6\u6240\u6709\u7684**EmbeddedServletContainerCustomizer**\uff0c\u8c03\u7528\u5b9a\u5236\u5668\u7684\u5b9a\u5236\u65b9\u6cd5 5\uff09\u3001\u5d4c\u5165\u5f0fServlet\u5bb9\u5668\u542f\u52a8\u539f\u7406\uff1b \u00b6 \u4ec0\u4e48\u65f6\u5019\u521b\u5efa\u5d4c\u5165\u5f0f\u7684Servlet\u5bb9\u5668\u5de5\u5382\uff1f\u4ec0\u4e48\u65f6\u5019\u83b7\u53d6\u5d4c\u5165\u5f0f\u7684Servlet\u5bb9\u5668\u5e76\u542f\u52a8Tomcat\uff1b \u83b7\u53d6\u5d4c\u5165\u5f0f\u7684Servlet\u5bb9\u5668\u5de5\u5382\uff1a 1\uff09\u3001SpringBoot\u5e94\u7528\u542f\u52a8\u8fd0\u884crun\u65b9\u6cd5 2\uff09\u3001refreshContext(context);SpringBoot\u5237\u65b0IOC\u5bb9\u5668\u3010\u521b\u5efaIOC\u5bb9\u5668\u5bf9\u8c61\uff0c\u5e76\u521d\u59cb\u5316\u5bb9\u5668\uff0c\u521b\u5efa\u5bb9\u5668\u4e2d\u7684\u6bcf\u4e00\u4e2a\u7ec4\u4ef6\u3011\uff1b\u5982\u679c\u662fweb\u5e94\u7528\u521b\u5efa**AnnotationConfigEmbeddedWebApplicationContext**\uff0c\u5426\u5219\uff1a AnnotationConfigApplicationContext 3\uff09\u3001refresh(context); \u5237\u65b0\u521a\u624d\u521b\u5efa\u597d\u7684ioc\u5bb9\u5668\uff1b public void refresh () throws BeansException , IllegalStateException { synchronized ( this . startupShutdownMonitor ) { // Prepare this context for refreshing. prepareRefresh (); // Tell the subclass to refresh the internal bean factory. ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory (); // Prepare the bean factory for use in this context. prepareBeanFactory ( beanFactory ); try { // Allows post-processing of the bean factory in context subclasses. postProcessBeanFactory ( beanFactory ); // Invoke factory processors registered as beans in the context. invokeBeanFactoryPostProcessors ( beanFactory ); // Register bean processors that intercept bean creation. registerBeanPostProcessors ( beanFactory ); // Initialize message source for this context. initMessageSource (); // Initialize event multicaster for this context. initApplicationEventMulticaster (); // Initialize other special beans in specific context subclasses. onRefresh (); // Check for listener beans and register them. registerListeners (); // Instantiate all remaining (non-lazy-init) singletons. finishBeanFactoryInitialization ( beanFactory ); // Last step: publish corresponding event. finishRefresh (); } catch ( BeansException ex ) { if ( logger . isWarnEnabled ()) { logger . warn ( \"Exception encountered during context initialization - \" + \"cancelling refresh attempt: \" + ex ); } // Destroy already created singletons to avoid dangling resources. destroyBeans (); // Reset 'active' flag. cancelRefresh ( ex ); // Propagate exception to caller. throw ex ; } finally { // Reset common introspection caches in Spring's core, since we // might not ever need metadata for singleton beans anymore... resetCommonCaches (); } } } 4\uff09\u3001 onRefresh(); web\u7684ioc\u5bb9\u5668\u91cd\u5199\u4e86onRefresh\u65b9\u6cd5 5\uff09\u3001webioc\u5bb9\u5668\u4f1a\u521b\u5efa\u5d4c\u5165\u5f0f\u7684Servlet\u5bb9\u5668\uff1b createEmbeddedServletContainer (); 6\uff09\u3001\u83b7\u53d6\u5d4c\u5165\u5f0f\u7684Servlet\u5bb9\u5668\u5de5\u5382\uff1a EmbeddedServletContainerFactory containerFactory = getEmbeddedServletContainerFactory(); \u200b \u4eceioc\u5bb9\u5668\u4e2d\u83b7\u53d6EmbeddedServletContainerFactory \u7ec4\u4ef6\uff1b**TomcatEmbeddedServletContainerFactory**\u521b\u5efa\u5bf9\u8c61\uff0c\u540e\u7f6e\u5904\u7406\u5668\u4e00\u770b\u662f\u8fd9\u4e2a\u5bf9\u8c61\uff0c\u5c31\u83b7\u53d6\u6240\u6709\u7684\u5b9a\u5236\u5668\u6765\u5148\u5b9a\u5236Servlet\u5bb9\u5668\u7684\u76f8\u5173\u914d\u7f6e\uff1b 7\uff09\u3001 \u4f7f\u7528\u5bb9\u5668\u5de5\u5382\u83b7\u53d6\u5d4c\u5165\u5f0f\u7684Servlet\u5bb9\u5668 \uff1athis.embeddedServletContainer = containerFactory .getEmbeddedServletContainer(getSelfInitializer()); 8\uff09\u3001\u5d4c\u5165\u5f0f\u7684Servlet\u5bb9\u5668\u521b\u5efa\u5bf9\u8c61\u5e76\u542f\u52a8Servlet\u5bb9\u5668\uff1b \u5148\u542f\u52a8\u5d4c\u5165\u5f0f\u7684Servlet\u5bb9\u5668\uff0c\u518d\u5c06ioc\u5bb9\u5668\u4e2d\u5269\u4e0b\u6ca1\u6709\u521b\u5efa\u51fa\u7684\u5bf9\u8c61\u83b7\u53d6\u51fa\u6765\uff1b IOC\u5bb9\u5668\u542f\u52a8\u521b\u5efa\u5d4c\u5165\u5f0f\u7684Servlet\u5bb9\u5668 9\u3001\u4f7f\u7528\u5916\u7f6e\u7684Servlet\u5bb9\u5668 \u00b6 \u5d4c\u5165\u5f0fServlet\u5bb9\u5668\uff1a\u5e94\u7528\u6253\u6210\u53ef\u6267\u884c\u7684jar \u200b \u4f18\u70b9\uff1a\u7b80\u5355\u3001\u4fbf\u643a\uff1b \u200b \u7f3a\u70b9\uff1a\u9ed8\u8ba4\u4e0d\u652f\u6301JSP\u3001\u4f18\u5316\u5b9a\u5236\u6bd4\u8f83\u590d\u6742\uff08\u4f7f\u7528\u5b9a\u5236\u5668\u3010ServerProperties\u3001\u81ea\u5b9a\u4e49EmbeddedServletContainerCustomizer\u3011\uff0c\u81ea\u5df1\u7f16\u5199\u5d4c\u5165\u5f0fServlet\u5bb9\u5668\u7684\u521b\u5efa\u5de5\u5382\u3010EmbeddedServletContainerFactory\u3011\uff09\uff1b \u5916\u7f6e\u7684Servlet\u5bb9\u5668\uff1a\u5916\u9762\u5b89\u88c5Tomcat---\u5e94\u7528war\u5305\u7684\u65b9\u5f0f\u6253\u5305\uff1b \u6b65\u9aa4 \u00b6 1\uff09\u3001\u5fc5\u987b\u521b\u5efa\u4e00\u4e2awar\u9879\u76ee\uff1b\uff08\u5229\u7528idea\u521b\u5efa\u597d\u76ee\u5f55\u7ed3\u6784\uff09 2\uff09\u3001\u5c06\u5d4c\u5165\u5f0f\u7684Tomcat\u6307\u5b9a\u4e3aprovided\uff1b <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-tomcat </artifactId> <scope> provided </scope> </dependency> 3\uff09\u3001\u5fc5\u987b\u7f16\u5199\u4e00\u4e2a**SpringBootServletInitializer**\u7684\u5b50\u7c7b\uff0c\u5e76\u8c03\u7528configure\u65b9\u6cd5 public class ServletInitializer extends SpringBootServletInitializer { @Override protected SpringApplicationBuilder configure ( SpringApplicationBuilder application ) { //\u4f20\u5165SpringBoot\u5e94\u7528\u7684\u4e3b\u7a0b\u5e8f return application . sources ( SpringBoot04WebJspApplication . class ); } } 4\uff09\u3001\u542f\u52a8\u670d\u52a1\u5668\u5c31\u53ef\u4ee5\u4f7f\u7528\uff1b \u539f\u7406 \u00b6 jar\u5305\uff1a\u6267\u884cSpringBoot\u4e3b\u7c7b\u7684main\u65b9\u6cd5\uff0c\u542f\u52a8ioc\u5bb9\u5668\uff0c\u521b\u5efa\u5d4c\u5165\u5f0f\u7684Servlet\u5bb9\u5668\uff1b war\u5305\uff1a\u542f\u52a8\u670d\u52a1\u5668\uff0c \u670d\u52a1\u5668\u542f\u52a8SpringBoot\u5e94\u7528 \u3010SpringBootServletInitializer\u3011\uff0c\u542f\u52a8ioc\u5bb9\u5668\uff1b servlet3.0\uff08Spring\u6ce8\u89e3\u7248\uff09\uff1a 8.2.4 Shared libraries / runtimes pluggability\uff1a \u89c4\u5219\uff1a \u200b 1\uff09\u3001\u670d\u52a1\u5668\u542f\u52a8\uff08web\u5e94\u7528\u542f\u52a8\uff09\u4f1a\u521b\u5efa\u5f53\u524dweb\u5e94\u7528\u91cc\u9762\u6bcf\u4e00\u4e2ajar\u5305\u91cc\u9762ServletContainerInitializer\u5b9e\u4f8b\uff1a \u200b 2\uff09\u3001ServletContainerInitializer\u7684\u5b9e\u73b0\u653e\u5728jar\u5305\u7684META-INF/services\u6587\u4ef6\u5939\u4e0b\uff0c\u6709\u4e00\u4e2a\u540d\u4e3ajavax.servlet.ServletContainerInitializer\u7684\u6587\u4ef6\uff0c\u5185\u5bb9\u5c31\u662fServletContainerInitializer\u7684\u5b9e\u73b0\u7c7b\u7684\u5168\u7c7b\u540d \u200b 3\uff09\u3001\u8fd8\u53ef\u4ee5\u4f7f\u7528@HandlesTypes\uff0c\u5728\u5e94\u7528\u542f\u52a8\u7684\u65f6\u5019\u52a0\u8f7d\u6211\u4eec\u611f\u5174\u8da3\u7684\u7c7b\uff1b \u6d41\u7a0b\uff1a 1\uff09\u3001\u542f\u52a8Tomcat 2\uff09\u3001org\\springframework\\spring-web\\4.3.14.RELEASE\\spring-web-4.3.14.RELEASE.jar!\\META-INF\\services\\javax.servlet.ServletContainerInitializer\uff1a Spring\u7684web\u6a21\u5757\u91cc\u9762\u6709\u8fd9\u4e2a\u6587\u4ef6\uff1a org.springframework.web.SpringServletContainerInitializer 3\uff09\u3001SpringServletContainerInitializer\u5c06@HandlesTypes(WebApplicationInitializer.class)\u6807\u6ce8\u7684\u6240\u6709\u8fd9\u4e2a\u7c7b\u578b\u7684\u7c7b\u90fd\u4f20\u5165\u5230onStartup\u65b9\u6cd5\u7684Set<Class<?>>\uff1b\u4e3a\u8fd9\u4e9bWebApplicationInitializer\u7c7b\u578b\u7684\u7c7b\u521b\u5efa\u5b9e\u4f8b\uff1b 4\uff09\u3001\u6bcf\u4e00\u4e2aWebApplicationInitializer\u90fd\u8c03\u7528\u81ea\u5df1\u7684onStartup\uff1b 5\uff09\u3001\u76f8\u5f53\u4e8e\u6211\u4eec\u7684SpringBootServletInitializer\u7684\u7c7b\u4f1a\u88ab\u521b\u5efa\u5bf9\u8c61\uff0c\u5e76\u6267\u884conStartup\u65b9\u6cd5 6\uff09\u3001SpringBootServletInitializer\u5b9e\u4f8b\u6267\u884conStartup\u7684\u65f6\u5019\u4f1acreateRootApplicationContext\uff1b\u521b\u5efa\u5bb9\u5668 protected WebApplicationContext createRootApplicationContext ( ServletContext servletContext ) { //1\u3001\u521b\u5efaSpringApplicationBuilder SpringApplicationBuilder builder = createSpringApplicationBuilder (); StandardServletEnvironment environment = new StandardServletEnvironment (); environment . initPropertySources ( servletContext , null ); builder . environment ( environment ); builder . main ( getClass ()); ApplicationContext parent = getExistingRootWebApplicationContext ( servletContext ); if ( parent != null ) { this . logger . info ( \"Root context already created (using as parent).\" ); servletContext . setAttribute ( WebApplicationContext . ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE , null ); builder . initializers ( new ParentContextApplicationContextInitializer ( parent )); } builder . initializers ( new ServletContextApplicationContextInitializer ( servletContext )); builder . contextClass ( AnnotationConfigEmbeddedWebApplicationContext . class ); //\u8c03\u7528configure\u65b9\u6cd5\uff0c\u5b50\u7c7b\u91cd\u5199\u4e86\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u5c06SpringBoot\u7684\u4e3b\u7a0b\u5e8f\u7c7b\u4f20\u5165\u4e86\u8fdb\u6765 builder = configure ( builder ); //\u4f7f\u7528builder\u521b\u5efa\u4e00\u4e2aSpring\u5e94\u7528 SpringApplication application = builder . build (); if ( application . getSources (). isEmpty () && AnnotationUtils . findAnnotation ( getClass (), Configuration . class ) != null ) { application . getSources (). add ( getClass ()); } Assert . state ( ! application . getSources (). isEmpty (), \"No SpringApplication sources have been defined. Either override the \" + \"configure method or add an @Configuration annotation\" ); // Ensure error pages are registered if ( this . registerErrorPageFilter ) { application . getSources (). add ( ErrorPageFilterConfiguration . class ); } //\u542f\u52a8Spring\u5e94\u7528 return run ( application ); } 7\uff09\u3001Spring\u7684\u5e94\u7528\u5c31\u542f\u52a8\u5e76\u4e14\u521b\u5efaIOC\u5bb9\u5668 public ConfigurableApplicationContext run ( String ... args ) { StopWatch stopWatch = new StopWatch (); stopWatch . start (); ConfigurableApplicationContext context = null ; FailureAnalyzers analyzers = null ; configureHeadlessProperty (); SpringApplicationRunListeners listeners = getRunListeners ( args ); listeners . starting (); try { ApplicationArguments applicationArguments = new DefaultApplicationArguments ( args ); ConfigurableEnvironment environment = prepareEnvironment ( listeners , applicationArguments ); Banner printedBanner = printBanner ( environment ); context = createApplicationContext (); analyzers = new FailureAnalyzers ( context ); prepareContext ( context , environment , listeners , applicationArguments , printedBanner ); //\u5237\u65b0IOC\u5bb9\u5668 refreshContext ( context ); afterRefresh ( context , applicationArguments ); listeners . finished ( context , null ); stopWatch . stop (); if ( this . logStartupInfo ) { new StartupInfoLogger ( this . mainApplicationClass ) . logStarted ( getApplicationLog (), stopWatch ); } return context ; } catch ( Throwable ex ) { handleRunFailure ( context , listeners , analyzers , ex ); throw new IllegalStateException ( ex ); } } \u542f\u52a8Servlet\u5bb9\u5668\uff0c\u518d\u542f\u52a8SpringBoot\u5e94\u7528 \u4e94\u3001Docker \u00b6 1\u3001\u7b80\u4ecb \u00b6 **Docker**\u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u5e94\u7528\u5bb9\u5668\u5f15\u64ce\uff1b\u662f\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u5bb9\u5668\u6280\u672f\uff1b Docker\u652f\u6301\u5c06\u8f6f\u4ef6\u7f16\u8bd1\u6210\u4e00\u4e2a\u955c\u50cf\uff1b\u7136\u540e\u5728\u955c\u50cf\u4e2d\u5404\u79cd\u8f6f\u4ef6\u505a\u597d\u914d\u7f6e\uff0c\u5c06\u955c\u50cf\u53d1\u5e03\u51fa\u53bb\uff0c\u5176\u4ed6\u4f7f\u7528\u8005\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u8fd9\u4e2a\u955c\u50cf\uff1b \u8fd0\u884c\u4e2d\u7684\u8fd9\u4e2a\u955c\u50cf\u79f0\u4e3a\u5bb9\u5668\uff0c\u5bb9\u5668\u542f\u52a8\u662f\u975e\u5e38\u5feb\u901f\u7684\u3002 2\u3001\u6838\u5fc3\u6982\u5ff5 \u00b6 docker\u4e3b\u673a(Host)\uff1a\u5b89\u88c5\u4e86Docker\u7a0b\u5e8f\u7684\u673a\u5668\uff08Docker\u76f4\u63a5\u5b89\u88c5\u5728\u64cd\u4f5c\u7cfb\u7edf\u4e4b\u4e0a\uff09\uff1b docker\u5ba2\u6237\u7aef(Client)\uff1a\u8fde\u63a5docker\u4e3b\u673a\u8fdb\u884c\u64cd\u4f5c\uff1b docker\u4ed3\u5e93(Registry)\uff1a\u7528\u6765\u4fdd\u5b58\u5404\u79cd\u6253\u5305\u597d\u7684\u8f6f\u4ef6\u955c\u50cf\uff1b docker\u955c\u50cf(Images)\uff1a\u8f6f\u4ef6\u6253\u5305\u597d\u7684\u955c\u50cf\uff1b\u653e\u5728docker\u4ed3\u5e93\u4e2d\uff1b docker\u5bb9\u5668(Container)\uff1a\u955c\u50cf\u542f\u52a8\u540e\u7684\u5b9e\u4f8b\u79f0\u4e3a\u4e00\u4e2a\u5bb9\u5668\uff1b\u5bb9\u5668\u662f\u72ec\u7acb\u8fd0\u884c\u7684\u4e00\u4e2a\u6216\u4e00\u7ec4\u5e94\u7528 \u4f7f\u7528Docker\u7684\u6b65\u9aa4\uff1a 1\uff09\u3001\u5b89\u88c5Docker 2\uff09\u3001\u53bbDocker\u4ed3\u5e93\u627e\u5230\u8fd9\u4e2a\u8f6f\u4ef6\u5bf9\u5e94\u7684\u955c\u50cf\uff1b 3\uff09\u3001\u4f7f\u7528Docker\u8fd0\u884c\u8fd9\u4e2a\u955c\u50cf\uff0c\u8fd9\u4e2a\u955c\u50cf\u5c31\u4f1a\u751f\u6210\u4e00\u4e2aDocker\u5bb9\u5668\uff1b 4\uff09\u3001\u5bf9\u5bb9\u5668\u7684\u542f\u52a8\u505c\u6b62\u5c31\u662f\u5bf9\u8f6f\u4ef6\u7684\u542f\u52a8\u505c\u6b62\uff1b 3\u3001\u5b89\u88c5Docker \u00b6 1\uff09\u3001\u5b89\u88c5linux\u865a\u62df\u673a \u00b6 \u200b 1\uff09\u3001VMWare\u3001VirtualBox\uff08\u5b89\u88c5\uff09\uff1b \u200b 2\uff09\u3001\u5bfc\u5165\u865a\u62df\u673a\u6587\u4ef6centos7-atguigu.ova\uff1b \u200b 3\uff09\u3001\u53cc\u51fb\u542f\u52a8linux\u865a\u62df\u673a;\u4f7f\u7528 root/ 123456\u767b\u9646 \u200b 4\uff09\u3001\u4f7f\u7528\u5ba2\u6237\u7aef\u8fde\u63a5linux\u670d\u52a1\u5668\u8fdb\u884c\u547d\u4ee4\u64cd\u4f5c\uff1b \u200b 5\uff09\u3001\u8bbe\u7f6e\u865a\u62df\u673a\u7f51\u7edc\uff1b \u200b \u6865\u63a5\u7f51\u7edc===\u9009\u597d\u7f51\u5361====\u63a5\u5165\u7f51\u7ebf\uff1b \u200b 6\uff09\u3001\u8bbe\u7f6e\u597d\u7f51\u7edc\u4ee5\u540e\u4f7f\u7528\u547d\u4ee4\u91cd\u542f\u865a\u62df\u673a\u7684\u7f51\u7edc service network restart \u200b 7\uff09\u3001\u67e5\u770blinux\u7684ip\u5730\u5740 ip addr \u200b 8\uff09\u3001\u4f7f\u7528\u5ba2\u6237\u7aef\u8fde\u63a5linux\uff1b 2\uff09\u3001\u5728linux\u865a\u62df\u673a\u4e0a\u5b89\u88c5docker \u00b6 \u6b65\u9aa4\uff1a 1 \u3001\u68c0\u67e5\u5185\u6838\u7248\u672c\uff0c\u5fc5\u987b\u662f3.10\u53ca\u4ee5\u4e0a uname -r 2 \u3001\u5b89\u88c5docker yum install docker 3 \u3001\u8f93\u5165y\u786e\u8ba4\u5b89\u88c5 4 \u3001\u542f\u52a8docker [ root@localhost ~ ] # systemctl start docker [ root@localhost ~ ] # docker -v Docker version 1 .12.6, build 3e8e77d/1.12.6 5 \u3001\u5f00\u673a\u542f\u52a8docker [ root@localhost ~ ] # systemctl enable docker Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service. 6 \u3001\u505c\u6b62docker systemctl stop docker 4\u3001Docker\u5e38\u7528\u547d\u4ee4&\u64cd\u4f5c \u00b6 1\uff09\u3001\u955c\u50cf\u64cd\u4f5c \u00b6 \u64cd\u4f5c \u547d\u4ee4 \u8bf4\u660e \u68c0\u7d22 docker search \u5173\u952e\u5b57 eg\uff1adocker search redis \u6211\u4eec\u7ecf\u5e38\u53bbdocker hub\u4e0a\u68c0\u7d22\u955c\u50cf\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u5982\u955c\u50cf\u7684TAG\u3002 \u62c9\u53d6 docker pull \u955c\u50cf\u540d:tag :tag\u662f\u53ef\u9009\u7684\uff0ctag\u8868\u793a\u6807\u7b7e\uff0c\u591a\u4e3a\u8f6f\u4ef6\u7684\u7248\u672c\uff0c\u9ed8\u8ba4\u662flatest \u5217\u8868 docker images \u67e5\u770b\u6240\u6709\u672c\u5730\u955c\u50cf \u5220\u9664 docker rmi image-id \u5220\u9664\u6307\u5b9a\u7684\u672c\u5730\u955c\u50cf https://hub.docker.com/ 2\uff09\u3001\u5bb9\u5668\u64cd\u4f5c \u00b6 \u8f6f\u4ef6\u955c\u50cf\uff08QQ\u5b89\u88c5\u7a0b\u5e8f\uff09----\u8fd0\u884c\u955c\u50cf----\u4ea7\u751f\u4e00\u4e2a\u5bb9\u5668\uff08\u6b63\u5728\u8fd0\u884c\u7684\u8f6f\u4ef6\uff0c\u8fd0\u884c\u7684QQ\uff09\uff1b \u6b65\u9aa4\uff1a 1 \u3001\u641c\u7d22\u955c\u50cf [ root@localhost ~ ] # docker search tomcat 2 \u3001\u62c9\u53d6\u955c\u50cf [ root@localhost ~ ] # docker pull tomcat 3 \u3001\u6839\u636e\u955c\u50cf\u542f\u52a8\u5bb9\u5668 docker run --name mytomcat -d tomcat:latest 4 \u3001docker ps \u67e5\u770b\u8fd0\u884c\u4e2d\u7684\u5bb9\u5668 5 \u3001 \u505c\u6b62\u8fd0\u884c\u4e2d\u7684\u5bb9\u5668 docker stop \u5bb9\u5668\u7684id 6 \u3001\u67e5\u770b\u6240\u6709\u7684\u5bb9\u5668 docker ps -a 7 \u3001\u542f\u52a8\u5bb9\u5668 docker start \u5bb9\u5668id 8 \u3001\u5220\u9664\u4e00\u4e2a\u5bb9\u5668 docker rm \u5bb9\u5668id 9 \u3001\u542f\u52a8\u4e00\u4e2a\u505a\u4e86\u7aef\u53e3\u6620\u5c04\u7684tomcat [ root@localhost ~ ] # docker run -d -p 8888:8080 tomcat -d\uff1a\u540e\u53f0\u8fd0\u884c -p: \u5c06\u4e3b\u673a\u7684\u7aef\u53e3\u6620\u5c04\u5230\u5bb9\u5668\u7684\u4e00\u4e2a\u7aef\u53e3 \u4e3b\u673a\u7aef\u53e3:\u5bb9\u5668\u5185\u90e8\u7684\u7aef\u53e3 10 \u3001\u4e3a\u4e86\u6f14\u793a\u7b80\u5355\u5173\u95ed\u4e86linux\u7684\u9632\u706b\u5899 service firewalld status \uff1b\u67e5\u770b\u9632\u706b\u5899\u72b6\u6001 service firewalld stop\uff1a\u5173\u95ed\u9632\u706b\u5899 11 \u3001\u67e5\u770b\u5bb9\u5668\u7684\u65e5\u5fd7 docker logs container-name/container-id \u66f4\u591a\u547d\u4ee4\u53c2\u770b https://docs.docker.com/engine/reference/commandline/docker/ \u53ef\u4ee5\u53c2\u8003\u6bcf\u4e00\u4e2a\u955c\u50cf\u7684\u6587\u6863 3\uff09\u3001\u5b89\u88c5MySQL\u793a\u4f8b \u00b6 docker pull mysql \u9519\u8bef\u7684\u542f\u52a8 [ root@localhost ~ ] # docker run --name mysql01 -d mysql 42f09819908bb72dd99ae19e792e0a5d03c48638421fa64cce5f8ba0f40f5846 mysql\u9000\u51fa\u4e86 [ root@localhost ~ ] # docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 42f09819908b mysql \"docker-entrypoint.sh\" 34 seconds ago Exited ( 1 ) 33 seconds ago mysql01 538bde63e500 tomcat \"catalina.sh run\" About an hour ago Exited ( 143 ) About an hour ago compassionate_ goldstine c4f1ac60b3fc tomcat \"catalina.sh run\" About an hour ago Exited ( 143 ) About an hour ago lonely_fermi 81ec743a5271 tomcat \"catalina.sh run\" About an hour ago Exited ( 143 ) About an hour ago sick_ramanujan //\u9519\u8bef\u65e5\u5fd7 [ root@localhost ~ ] # docker logs 42f09819908b error: database is uninitialized and password option is not specified You need to specify one of MYSQL_ROOT_PASSWORD, MYSQL_ALLOW_EMPTY_PASSWORD and MYSQL_RANDOM_ROOT_PASSWORD\uff1b\u8fd9\u4e2a\u4e09\u4e2a\u53c2\u6570\u5fc5\u987b\u6307\u5b9a\u4e00\u4e2a \u6b63\u786e\u7684\u542f\u52a8 [ root@localhost ~ ] # docker run --name mysql01 -e MYSQL_ROOT_PASSWORD=123456 -d mysql b874c56bec49fb43024b3805ab51e9097da779f2f572c22c695305dedd684c5f [ root@localhost ~ ] # docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES b874c56bec49 mysql \"docker-entrypoint.sh\" 4 seconds ago Up 3 seconds 3306 /tcp mysql01 \u505a\u4e86\u7aef\u53e3\u6620\u5c04 [ root@localhost ~ ] # docker run -p 3306:3306 --name mysql02 -e MYSQL_ROOT_PASSWORD=123456 -d mysql ad10e4bc5c6a0f61cbad43898de71d366117d120e39db651844c0e73863b9434 [ root@localhost ~ ] # docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES ad10e4bc5c6a mysql \"docker-entrypoint.sh\" 4 seconds ago Up 2 seconds 0 .0.0.0:3306->3306/tcp mysql02 \u51e0\u4e2a\u5176\u4ed6\u7684\u9ad8\u7ea7\u64cd\u4f5c docker run --name mysql03 -v /conf/mysql:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag \u628a\u4e3b\u673a\u7684/conf/mysql\u6587\u4ef6\u5939\u6302\u8f7d\u5230 mysqldocker\u5bb9\u5668\u7684/etc/mysql/conf.d\u6587\u4ef6\u5939\u91cc\u9762 \u6539mysql\u7684\u914d\u7f6e\u6587\u4ef6\u5c31\u53ea\u9700\u8981\u628amysql\u914d\u7f6e\u6587\u4ef6\u653e\u5728\u81ea\u5b9a\u4e49\u7684\u6587\u4ef6\u5939\u4e0b\uff08/conf/mysql\uff09 docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci \u6307\u5b9amysql\u7684\u4e00\u4e9b\u914d\u7f6e\u53c2\u6570 \u516d\u3001SpringBoot\u4e0e\u6570\u636e\u8bbf\u95ee \u00b6 1\u3001JDBC \u00b6 <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-jdbc </artifactId> </dependency> <dependency> <groupId> mysql </groupId> <artifactId> mysql-connector-java </artifactId> <scope> runtime </scope> </dependency> spring : datasource : username : root password : 123456 url : jdbc:mysql://192.168.15.22:3306/jdbc driver-class-name : com.mysql.jdbc.Driver \u6548\u679c\uff1a \u200b \u9ed8\u8ba4\u662f\u7528org.apache.tomcat.jdbc.pool.DataSource\u4f5c\u4e3a\u6570\u636e\u6e90\uff1b \u200b \u6570\u636e\u6e90\u7684\u76f8\u5173\u914d\u7f6e\u90fd\u5728DataSourceProperties\u91cc\u9762\uff1b \u81ea\u52a8\u914d\u7f6e\u539f\u7406\uff1a org.springframework.boot.autoconfigure.jdbc\uff1a 1\u3001\u53c2\u8003DataSourceConfiguration\uff0c\u6839\u636e\u914d\u7f6e\u521b\u5efa\u6570\u636e\u6e90\uff0c\u9ed8\u8ba4\u4f7f\u7528Tomcat\u8fde\u63a5\u6c60\uff1b\u53ef\u4ee5\u4f7f\u7528spring.datasource.type\u6307\u5b9a\u81ea\u5b9a\u4e49\u7684\u6570\u636e\u6e90\u7c7b\u578b\uff1b 2\u3001SpringBoot\u9ed8\u8ba4\u53ef\u4ee5\u652f\u6301\uff1b org.apache.tomcat.jdbc.pool.DataSource\u3001HikariDataSource\u3001BasicDataSource\u3001 3\u3001\u81ea\u5b9a\u4e49\u6570\u636e\u6e90\u7c7b\u578b /** * Generic DataSource configuration. */ @ConditionalOnMissingBean ( DataSource . class ) @ConditionalOnProperty ( name = \"spring.datasource.type\" ) static class Generic { @Bean public DataSource dataSource ( DataSourceProperties properties ) { //\u4f7f\u7528DataSourceBuilder\u521b\u5efa\u6570\u636e\u6e90\uff0c\u5229\u7528\u53cd\u5c04\u521b\u5efa\u54cd\u5e94type\u7684\u6570\u636e\u6e90\uff0c\u5e76\u4e14\u7ed1\u5b9a\u76f8\u5173\u5c5e\u6027 return properties . initializeDataSourceBuilder (). build (); } } 4\u3001 DataSourceInitializer\uff1aApplicationListener \uff1b \u200b \u4f5c\u7528\uff1a \u200b 1\uff09\u3001runSchemaScripts();\u8fd0\u884c\u5efa\u8868\u8bed\u53e5\uff1b \u200b 2\uff09\u3001runDataScripts();\u8fd0\u884c\u63d2\u5165\u6570\u636e\u7684sql\u8bed\u53e5\uff1b \u9ed8\u8ba4\u53ea\u9700\u8981\u5c06\u6587\u4ef6\u547d\u540d\u4e3a\uff1a schema-*.sql\u3001data-*.sql \u9ed8\u8ba4\u89c4\u5219\uff1aschema.sql\uff0cschema-all.sql\uff1b \u53ef\u4ee5\u4f7f\u7528 schema : - classpath : department.sql \u6307\u5b9a\u4f4d\u7f6e 5\u3001\u64cd\u4f5c\u6570\u636e\u5e93\uff1a\u81ea\u52a8\u914d\u7f6e\u4e86JdbcTemplate\u64cd\u4f5c\u6570\u636e\u5e93 2\u3001\u6574\u5408Druid\u6570\u636e\u6e90 \u00b6 \u5bfc\u5165druid\u6570\u636e\u6e90 @Configuration public class DruidConfig { @ConfigurationProperties ( prefix = \"spring.datasource\" ) @Bean public DataSource druid (){ return new DruidDataSource (); } //\u914d\u7f6eDruid\u7684\u76d1\u63a7 //1\u3001\u914d\u7f6e\u4e00\u4e2a\u7ba1\u7406\u540e\u53f0\u7684Servlet @Bean public ServletRegistrationBean statViewServlet (){ ServletRegistrationBean bean = new ServletRegistrationBean ( new StatViewServlet (), \"/druid/*\" ); Map < String , String > initParams = new HashMap <> (); initParams . put ( \"loginUsername\" , \"admin\" ); initParams . put ( \"loginPassword\" , \"123456\" ); initParams . put ( \"allow\" , \"\" ); //\u9ed8\u8ba4\u5c31\u662f\u5141\u8bb8\u6240\u6709\u8bbf\u95ee initParams . put ( \"deny\" , \"192.168.15.21\" ); bean . setInitParameters ( initParams ); return bean ; } //2\u3001\u914d\u7f6e\u4e00\u4e2aweb\u76d1\u63a7\u7684filter @Bean public FilterRegistrationBean webStatFilter (){ FilterRegistrationBean bean = new FilterRegistrationBean (); bean . setFilter ( new WebStatFilter ()); Map < String , String > initParams = new HashMap <> (); initParams . put ( \"exclusions\" , \"*.js,*.css,/druid/*\" ); bean . setInitParameters ( initParams ); bean . setUrlPatterns ( Arrays . asList ( \"/*\" )); return bean ; } } 3\u3001\u6574\u5408MyBatis \u00b6 <dependency> <groupId> org.mybatis.spring.boot </groupId> <artifactId> mybatis-spring-boot-starter </artifactId> <version> 1.3.1 </version> </dependency> \u6b65\u9aa4\uff1a \u200b 1\uff09\u3001\u914d\u7f6e\u6570\u636e\u6e90\u76f8\u5173\u5c5e\u6027\uff08\u89c1\u4e0a\u4e00\u8282Druid\uff09 \u200b 2\uff09\u3001\u7ed9\u6570\u636e\u5e93\u5efa\u8868 \u200b 3\uff09\u3001\u521b\u5efaJavaBean 4\uff09\u3001\u6ce8\u89e3\u7248 \u00b6 //\u6307\u5b9a\u8fd9\u662f\u4e00\u4e2a\u64cd\u4f5c\u6570\u636e\u5e93\u7684mapper @Mapper public interface DepartmentMapper { @Select ( \"select * from department where id=#{id}\" ) public Department getDeptById ( Integer id ); @Delete ( \"delete from department where id=#{id}\" ) public int deleteDeptById ( Integer id ); @Options ( useGeneratedKeys = true , keyProperty = \"id\" ) @Insert ( \"insert into department(departmentName) values(#{departmentName})\" ) public int insertDept ( Department department ); @Update ( \"update department set departmentName=#{departmentName} where id=#{id}\" ) public int updateDept ( Department department ); } \u95ee\u9898\uff1a \u81ea\u5b9a\u4e49MyBatis\u7684\u914d\u7f6e\u89c4\u5219\uff1b\u7ed9\u5bb9\u5668\u4e2d\u6dfb\u52a0\u4e00\u4e2aConfigurationCustomizer\uff1b @org.springframework.context.annotation.Configuration public class MyBatisConfig { @Bean public ConfigurationCustomizer configurationCustomizer (){ return new ConfigurationCustomizer (){ @Override public void customize ( Configuration configuration ) { configuration . setMapUnderscoreToCamelCase ( true ); } }; } } \u4f7f\u7528MapperScan\u6279\u91cf\u626b\u63cf\u6240\u6709\u7684Mapper\u63a5\u53e3 \uff1b @MapperScan ( value = \"com.atguigu.springboot.mapper\" ) @SpringBootApplication public class SpringBoot06DataMybatisApplication { public static void main ( String [] args ) { SpringApplication . run ( SpringBoot06DataMybatisApplication . class , args ); } } 5\uff09\u3001\u914d\u7f6e\u6587\u4ef6\u7248 \u00b6 mybatis : config-location : classpath:mybatis/mybatis-config.xml \u6307\u5b9a\u5168\u5c40\u914d\u7f6e\u6587\u4ef6\u7684\u4f4d\u7f6e mapper-locations : classpath:mybatis/mapper/*.xml \u6307\u5b9asql\u6620\u5c04\u6587\u4ef6\u7684\u4f4d\u7f6e \u66f4\u591a\u4f7f\u7528\u53c2\u7167 http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/ 4\u3001\u6574\u5408SpringData JPA \u00b6 1\uff09\u3001SpringData\u7b80\u4ecb \u00b6 2\uff09\u3001\u6574\u5408SpringData JPA \u00b6 JPA:ORM\uff08Object Relational Mapping\uff09\uff1b 1\uff09\u3001\u7f16\u5199\u4e00\u4e2a\u5b9e\u4f53\u7c7b\uff08bean\uff09\u548c\u6570\u636e\u8868\u8fdb\u884c\u6620\u5c04\uff0c\u5e76\u4e14\u914d\u7f6e\u597d\u6620\u5c04\u5173\u7cfb\uff1b //\u4f7f\u7528JPA\u6ce8\u89e3\u914d\u7f6e\u6620\u5c04\u5173\u7cfb @Entity //\u544a\u8bc9JPA\u8fd9\u662f\u4e00\u4e2a\u5b9e\u4f53\u7c7b\uff08\u548c\u6570\u636e\u8868\u6620\u5c04\u7684\u7c7b\uff09 @Table ( name = \"tbl_user\" ) //@Table\u6765\u6307\u5b9a\u548c\u54ea\u4e2a\u6570\u636e\u8868\u5bf9\u5e94;\u5982\u679c\u7701\u7565\u9ed8\u8ba4\u8868\u540d\u5c31\u662fuser\uff1b public class User { @Id //\u8fd9\u662f\u4e00\u4e2a\u4e3b\u952e @GeneratedValue ( strategy = GenerationType . IDENTITY ) //\u81ea\u589e\u4e3b\u952e private Integer id ; @Column ( name = \"last_name\" , length = 50 ) //\u8fd9\u662f\u548c\u6570\u636e\u8868\u5bf9\u5e94\u7684\u4e00\u4e2a\u5217 private String lastName ; @Column //\u7701\u7565\u9ed8\u8ba4\u5217\u540d\u5c31\u662f\u5c5e\u6027\u540d private String email ; 2\uff09\u3001\u7f16\u5199\u4e00\u4e2aDao\u63a5\u53e3\u6765\u64cd\u4f5c\u5b9e\u4f53\u7c7b\u5bf9\u5e94\u7684\u6570\u636e\u8868\uff08Repository\uff09 //\u7ee7\u627fJpaRepository\u6765\u5b8c\u6210\u5bf9\u6570\u636e\u5e93\u7684\u64cd\u4f5c public interface UserRepository extends JpaRepository < User , Integer > { } 3\uff09\u3001\u57fa\u672c\u7684\u914d\u7f6eJpaProperties spring : jpa : hibernate : # \u66f4\u65b0\u6216\u8005\u521b\u5efa\u6570\u636e\u8868\u7ed3\u6784 ddl-auto : update # \u63a7\u5236\u53f0\u663e\u793aSQL show-sql : true \u4e03\u3001\u542f\u52a8\u914d\u7f6e\u539f\u7406 \u00b6 \u51e0\u4e2a\u91cd\u8981\u7684\u4e8b\u4ef6\u56de\u8c03\u673a\u5236 \u914d\u7f6e\u5728META-INF/spring.factories ApplicationContextInitializer SpringApplicationRunListener \u53ea\u9700\u8981\u653e\u5728ioc\u5bb9\u5668\u4e2d ApplicationRunner CommandLineRunner \u542f\u52a8\u6d41\u7a0b\uff1a 1\u3001\u521b\u5efaSpringApplication\u5bf9\u8c61 \u00b6 initialize ( sources ); private void initialize ( Object [] sources ) { //\u4fdd\u5b58\u4e3b\u914d\u7f6e\u7c7b if ( sources != null && sources . length > 0 ) { this . sources . addAll ( Arrays . asList ( sources )); } //\u5224\u65ad\u5f53\u524d\u662f\u5426\u4e00\u4e2aweb\u5e94\u7528 this . webEnvironment = deduceWebEnvironment (); //\u4ece\u7c7b\u8def\u5f84\u4e0b\u627e\u5230META-INF/spring.factories\u914d\u7f6e\u7684\u6240\u6709ApplicationContextInitializer\uff1b\u7136\u540e\u4fdd\u5b58\u8d77\u6765 setInitializers (( Collection ) getSpringFactoriesInstances ( ApplicationContextInitializer . class )); //\u4ece\u7c7b\u8def\u5f84\u4e0b\u627e\u5230ETA-INF/spring.factories\u914d\u7f6e\u7684\u6240\u6709ApplicationListener setListeners (( Collection ) getSpringFactoriesInstances ( ApplicationListener . class )); //\u4ece\u591a\u4e2a\u914d\u7f6e\u7c7b\u4e2d\u627e\u5230\u6709main\u65b9\u6cd5\u7684\u4e3b\u914d\u7f6e\u7c7b this . mainApplicationClass = deduceMainApplicationClass (); } 2\u3001\u8fd0\u884crun\u65b9\u6cd5 \u00b6 public ConfigurableApplicationContext run ( String ... args ) { StopWatch stopWatch = new StopWatch (); stopWatch . start (); ConfigurableApplicationContext context = null ; FailureAnalyzers analyzers = null ; configureHeadlessProperty (); //\u83b7\u53d6SpringApplicationRunListeners\uff1b\u4ece\u7c7b\u8def\u5f84\u4e0bMETA-INF/spring.factories SpringApplicationRunListeners listeners = getRunListeners ( args ); //\u56de\u8c03\u6240\u6709\u7684\u83b7\u53d6SpringApplicationRunListener.starting()\u65b9\u6cd5 listeners . starting (); try { //\u5c01\u88c5\u547d\u4ee4\u884c\u53c2\u6570 ApplicationArguments applicationArguments = new DefaultApplicationArguments ( args ); //\u51c6\u5907\u73af\u5883 ConfigurableEnvironment environment = prepareEnvironment ( listeners , applicationArguments ); //\u521b\u5efa\u73af\u5883\u5b8c\u6210\u540e\u56de\u8c03SpringApplicationRunListener.environmentPrepared()\uff1b\u8868\u793a\u73af\u5883\u51c6\u5907\u5b8c\u6210 Banner printedBanner = printBanner ( environment ); //\u521b\u5efaApplicationContext\uff1b\u51b3\u5b9a\u521b\u5efaweb\u7684ioc\u8fd8\u662f\u666e\u901a\u7684ioc context = createApplicationContext (); analyzers = new FailureAnalyzers ( context ); //\u51c6\u5907\u4e0a\u4e0b\u6587\u73af\u5883;\u5c06environment\u4fdd\u5b58\u5230ioc\u4e2d\uff1b\u800c\u4e14applyInitializers()\uff1b //applyInitializers()\uff1a\u56de\u8c03\u4e4b\u524d\u4fdd\u5b58\u7684\u6240\u6709\u7684ApplicationContextInitializer\u7684initialize\u65b9\u6cd5 //\u56de\u8c03\u6240\u6709\u7684SpringApplicationRunListener\u7684contextPrepared()\uff1b // prepareContext ( context , environment , listeners , applicationArguments , printedBanner ); //prepareContext\u8fd0\u884c\u5b8c\u6210\u4ee5\u540e\u56de\u8c03\u6240\u6709\u7684SpringApplicationRunListener\u7684contextLoaded\uff08\uff09\uff1b //s\u5237\u65b0\u5bb9\u5668\uff1bioc\u5bb9\u5668\u521d\u59cb\u5316\uff08\u5982\u679c\u662fweb\u5e94\u7528\u8fd8\u4f1a\u521b\u5efa\u5d4c\u5165\u5f0f\u7684Tomcat\uff09\uff1bSpring\u6ce8\u89e3\u7248 //\u626b\u63cf\uff0c\u521b\u5efa\uff0c\u52a0\u8f7d\u6240\u6709\u7ec4\u4ef6\u7684\u5730\u65b9\uff1b\uff08\u914d\u7f6e\u7c7b\uff0c\u7ec4\u4ef6\uff0c\u81ea\u52a8\u914d\u7f6e\uff09 refreshContext ( context ); //\u4eceioc\u5bb9\u5668\u4e2d\u83b7\u53d6\u6240\u6709\u7684ApplicationRunner\u548cCommandLineRunner\u8fdb\u884c\u56de\u8c03 //ApplicationRunner\u5148\u56de\u8c03\uff0cCommandLineRunner\u518d\u56de\u8c03 afterRefresh ( context , applicationArguments ); //\u6240\u6709\u7684SpringApplicationRunListener\u56de\u8c03finished\u65b9\u6cd5 listeners . finished ( context , null ); stopWatch . stop (); if ( this . logStartupInfo ) { new StartupInfoLogger ( this . mainApplicationClass ) . logStarted ( getApplicationLog (), stopWatch ); } //\u6574\u4e2aSpringBoot\u5e94\u7528\u542f\u52a8\u5b8c\u6210\u4ee5\u540e\u8fd4\u56de\u542f\u52a8\u7684ioc\u5bb9\u5668\uff1b return context ; } catch ( Throwable ex ) { handleRunFailure ( context , listeners , analyzers , ex ); throw new IllegalStateException ( ex ); } } 3\u3001\u4e8b\u4ef6\u76d1\u542c\u673a\u5236 \u00b6 \u914d\u7f6e\u5728META-INF/spring.factories ApplicationContextInitializer public class HelloApplicationContextInitializer implements ApplicationContextInitializer < ConfigurableApplicationContext > { @Override public void initialize ( ConfigurableApplicationContext applicationContext ) { System . out . println ( \"ApplicationContextInitializer...initialize...\" + applicationContext ); } } SpringApplicationRunListener public class HelloSpringApplicationRunListener implements SpringApplicationRunListener { //\u5fc5\u987b\u6709\u7684\u6784\u9020\u5668 public HelloSpringApplicationRunListener ( SpringApplication application , String [] args ){ } @Override public void starting () { System . out . println ( \"SpringApplicationRunListener...starting...\" ); } @Override public void environmentPrepared ( ConfigurableEnvironment environment ) { Object o = environment . getSystemProperties (). get ( \"os.name\" ); System . out . println ( \"SpringApplicationRunListener...environmentPrepared..\" + o ); } @Override public void contextPrepared ( ConfigurableApplicationContext context ) { System . out . println ( \"SpringApplicationRunListener...contextPrepared...\" ); } @Override public void contextLoaded ( ConfigurableApplicationContext context ) { System . out . println ( \"SpringApplicationRunListener...contextLoaded...\" ); } @Override public void finished ( ConfigurableApplicationContext context , Throwable exception ) { System . out . println ( \"SpringApplicationRunListener...finished...\" ); } } \u914d\u7f6e\uff08META-INF/spring.factories\uff09 org.springframework.context.ApplicationContextInitializer = \\ com.atguigu.springboot.listener.HelloApplicationContextInitializer org.springframework.boot.SpringApplicationRunListener = \\ com.atguigu.springboot.listener.HelloSpringApplicationRunListener \u53ea\u9700\u8981\u653e\u5728ioc\u5bb9\u5668\u4e2d ApplicationRunner @Component public class HelloApplicationRunner implements ApplicationRunner { @Override public void run ( ApplicationArguments args ) throws Exception { System . out . println ( \"ApplicationRunner...run....\" ); } } CommandLineRunner @Component public class HelloCommandLineRunner implements CommandLineRunner { @Override public void run ( String ... args ) throws Exception { System . out . println ( \"CommandLineRunner...run...\" + Arrays . asList ( args )); } } \u516b\u3001\u81ea\u5b9a\u4e49starter \u00b6 starter\uff1a \u200b 1\u3001\u8fd9\u4e2a\u573a\u666f\u9700\u8981\u4f7f\u7528\u5230\u7684\u4f9d\u8d56\u662f\u4ec0\u4e48\uff1f \u200b 2\u3001\u5982\u4f55\u7f16\u5199\u81ea\u52a8\u914d\u7f6e @Configuration //\u6307\u5b9a\u8fd9\u4e2a\u7c7b\u662f\u4e00\u4e2a\u914d\u7f6e\u7c7b @ConditionalOnXXX //\u5728\u6307\u5b9a\u6761\u4ef6\u6210\u7acb\u7684\u60c5\u51b5\u4e0b\u81ea\u52a8\u914d\u7f6e\u7c7b\u751f\u6548 @AutoConfigureAfter //\u6307\u5b9a\u81ea\u52a8\u914d\u7f6e\u7c7b\u7684\u987a\u5e8f @Bean //\u7ed9\u5bb9\u5668\u4e2d\u6dfb\u52a0\u7ec4\u4ef6 @ConfigurationPropertie\u7ed3\u5408\u76f8\u5173xxxProperties\u7c7b\u6765\u7ed1\u5b9a\u76f8\u5173\u7684\u914d\u7f6e @EnableConfigurationProperties //\u8ba9xxxProperties\u751f\u6548\u52a0\u5165\u5230\u5bb9\u5668\u4e2d \u81ea\u52a8\u914d\u7f6e\u7c7b\u8981\u80fd\u52a0\u8f7d \u5c06\u9700\u8981\u542f\u52a8\u5c31\u52a0\u8f7d\u7684\u81ea\u52a8\u914d\u7f6e\u7c7b \uff0c \u914d\u7f6e\u5728META - INF / spring . factories org . springframework . boot . autoconfigure . EnableAutoConfiguration = \\ org . springframework . boot . autoconfigure . admin . SpringApplicationAdminJmxAutoConfiguration , \\ org . springframework . boot . autoconfigure . aop . AopAutoConfiguration , \\ \u200b 3\u3001\u6a21\u5f0f\uff1a \u542f\u52a8\u5668\u53ea\u7528\u6765\u505a\u4f9d\u8d56\u5bfc\u5165\uff1b \u4e13\u95e8\u6765\u5199\u4e00\u4e2a\u81ea\u52a8\u914d\u7f6e\u6a21\u5757\uff1b \u542f\u52a8\u5668\u4f9d\u8d56\u81ea\u52a8\u914d\u7f6e\uff1b\u522b\u4eba\u53ea\u9700\u8981\u5f15\u5165\u542f\u52a8\u5668\uff08starter\uff09 mybatis-spring-boot-starter\uff1b\u81ea\u5b9a\u4e49\u542f\u52a8\u5668\u540d-spring-boot-starter \u6b65\u9aa4\uff1a 1\uff09\u3001\u542f\u52a8\u5668\u6a21\u5757 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <groupId> com.atguigu.starter </groupId> <artifactId> atguigu-spring-boot-starter </artifactId> <version> 1.0-SNAPSHOT </version> <!--\u542f\u52a8\u5668--> <dependencies> <!--\u5f15\u5165\u81ea\u52a8\u914d\u7f6e\u6a21\u5757--> <dependency> <groupId> com.atguigu.starter </groupId> <artifactId> atguigu-spring-boot-starter-autoconfigurer </artifactId> <version> 0.0.1-SNAPSHOT </version> </dependency> </dependencies> </project> 2\uff09\u3001\u81ea\u52a8\u914d\u7f6e\u6a21\u5757 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <groupId> com.atguigu.starter </groupId> <artifactId> atguigu-spring-boot-starter-autoconfigurer </artifactId> <version> 0.0.1-SNAPSHOT </version> <packaging> jar </packaging> <name> atguigu-spring-boot-starter-autoconfigurer </name> <description> Demo project for Spring Boot </description> <parent> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-parent </artifactId> <version> 1.5.10.RELEASE </version> <relativePath/> <!-- lookup parent from repository --> </parent> <properties> <project.build.sourceEncoding> UTF-8 </project.build.sourceEncoding> <project.reporting.outputEncoding> UTF-8 </project.reporting.outputEncoding> <java.version> 1.8 </java.version> </properties> <dependencies> <!--\u5f15\u5165spring-boot-starter\uff1b\u6240\u6709starter\u7684\u57fa\u672c\u914d\u7f6e--> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter </artifactId> </dependency> </dependencies> </project> package com.atguigu.starter ; import org.springframework.boot.context.properties.ConfigurationProperties ; @ConfigurationProperties ( prefix = \"atguigu.hello\" ) public class HelloProperties { private String prefix ; private String suffix ; public String getPrefix () { return prefix ; } public void setPrefix ( String prefix ) { this . prefix = prefix ; } public String getSuffix () { return suffix ; } public void setSuffix ( String suffix ) { this . suffix = suffix ; } } package com.atguigu.starter ; public class HelloService { HelloProperties helloProperties ; public HelloProperties getHelloProperties () { return helloProperties ; } public void setHelloProperties ( HelloProperties helloProperties ) { this . helloProperties = helloProperties ; } public String sayHellAtguigu ( String name ){ return helloProperties . getPrefix () + \"-\" + name + helloProperties . getSuffix (); } } package com.atguigu.starter ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication ; import org.springframework.boot.context.properties.EnableConfigurationProperties ; import org.springframework.context.annotation.Bean ; import org.springframework.context.annotation.Configuration ; @Configuration @ConditionalOnWebApplication //web\u5e94\u7528\u624d\u751f\u6548 @EnableConfigurationProperties ( HelloProperties . class ) public class HelloServiceAutoConfiguration { @Autowired HelloProperties helloProperties ; @Bean public HelloService helloService (){ HelloService service = new HelloService (); service . setHelloProperties ( helloProperties ); return service ; } } \u66f4\u591aSpringBoot\u6574\u5408\u793a\u4f8b \u00b6 https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples","title":"SpringBoot\u6838\u5fc3\u6280\u672f"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#spring-boot","text":"","title":"**\u4e00\u3001**Spring Boot \u5165\u95e8"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#1spring-boot","text":"\u7b80\u5316Spring\u5e94\u7528\u5f00\u53d1\u7684\u4e00\u4e2a\u6846\u67b6\uff1b \u6574\u4e2aSpring\u6280\u672f\u6808\u7684\u4e00\u4e2a\u5927\u6574\u5408\uff1b J2EE\u5f00\u53d1\u7684\u4e00\u7ad9\u5f0f\u89e3\u51b3\u65b9\u6848\uff1b","title":"1\u3001Spring Boot \u7b80\u4ecb"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#2","text":"2014\uff0cmartin fowler \u5fae\u670d\u52a1\uff1a\u67b6\u6784\u98ce\u683c\uff08\u670d\u52a1\u5fae\u5316\uff09 \u4e00\u4e2a\u5e94\u7528\u5e94\u8be5\u662f\u4e00\u7ec4\u5c0f\u578b\u670d\u52a1\uff1b\u53ef\u4ee5\u901a\u8fc7HTTP\u7684\u65b9\u5f0f\u8fdb\u884c\u4e92\u901a\uff1b \u5355\u4f53\u5e94\u7528\uff1aALL IN ONE \u5fae\u670d\u52a1\uff1a\u6bcf\u4e00\u4e2a\u529f\u80fd\u5143\u7d20\u6700\u7ec8\u90fd\u662f\u4e00\u4e2a\u53ef\u72ec\u7acb\u66ff\u6362\u548c\u72ec\u7acb\u5347\u7ea7\u7684\u8f6f\u4ef6\u5355\u5143\uff1b \u8be6\u7ec6\u53c2\u7167\u5fae\u670d\u52a1\u6587\u6863","title":"2\u3001\u5fae\u670d\u52a1"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#3","text":"http://www.gulixueyuan.com/ \u8c37\u7c92\u5b66\u9662 \u73af\u5883\u7ea6\u675f \u2013jdk1.8\uff1aSpring Boot \u63a8\u8350jdk1.7\u53ca\u4ee5\u4e0a\uff1bjava version \"1.8.0_112\" \u2013maven3.x\uff1amaven 3.3\u4ee5\u4e0a\u7248\u672c\uff1bApache Maven 3.3.9 \u2013IntelliJIDEA2017\uff1aIntelliJ IDEA 2017.2.2 x64\u3001STS \u2013SpringBoot 1.5.9.RELEASE\uff1a1.5.9\uff1b \u7edf\u4e00\u73af\u5883\uff1b","title":"3\u3001\u73af\u5883\u51c6\u5907"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#1maven","text":"\u7ed9maven \u7684settings.xml\u914d\u7f6e\u6587\u4ef6\u7684profiles\u6807\u7b7e\u6dfb\u52a0 <profile> <id> jdk-1.8 </id> <activation> <activeByDefault> true </activeByDefault> <jdk> 1.8 </jdk> </activation> <properties> <maven.compiler.source> 1.8 </maven.compiler.source> <maven.compiler.target> 1.8 </maven.compiler.target> <maven.compiler.compilerVersion> 1.8 </maven.compiler.compilerVersion> </properties> </profile>","title":"1\u3001MAVEN\u8bbe\u7f6e\uff1b"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#2idea","text":"\u6574\u5408maven\u8fdb\u6765\uff1b","title":"2\u3001IDEA\u8bbe\u7f6e"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#4spring-boot-helloworld","text":"\u4e00\u4e2a\u529f\u80fd\uff1a \u6d4f\u89c8\u5668\u53d1\u9001hello\u8bf7\u6c42\uff0c\u670d\u52a1\u5668\u63a5\u53d7\u8bf7\u6c42\u5e76\u5904\u7406\uff0c\u54cd\u5e94Hello World\u5b57\u7b26\u4e32\uff1b","title":"4\u3001Spring Boot HelloWorld"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#1mavenjar","text":"","title":"1\u3001\u521b\u5efa\u4e00\u4e2amaven\u5de5\u7a0b\uff1b\uff08jar\uff09"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#2spring-boot","text":"<parent> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-parent </artifactId> <version> 1.5.9.RELEASE </version> </parent> <dependencies> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-web </artifactId> </dependency> </dependencies>","title":"2\u3001\u5bfc\u5165spring boot\u76f8\u5173\u7684\u4f9d\u8d56"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#3spring-boot","text":"/** * @SpringBootApplication \u6765\u6807\u6ce8\u4e00\u4e2a\u4e3b\u7a0b\u5e8f\u7c7b\uff0c\u8bf4\u660e\u8fd9\u662f\u4e00\u4e2aSpring Boot\u5e94\u7528 */ @SpringBootApplication public class HelloWorldMainApplication { public static void main ( String [] args ) { // Spring\u5e94\u7528\u542f\u52a8\u8d77\u6765 SpringApplication . run ( HelloWorldMainApplication . class , args ); } }","title":"3\u3001\u7f16\u5199\u4e00\u4e2a\u4e3b\u7a0b\u5e8f\uff1b\u542f\u52a8Spring Boot\u5e94\u7528"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#4controllerservice","text":"@Controller public class HelloController { @ResponseBody @RequestMapping ( \"/hello\" ) public String hello (){ return \"Hello World!\" ; } }","title":"4\u3001\u7f16\u5199\u76f8\u5173\u7684Controller\u3001Service"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#5","text":"","title":"5\u3001\u8fd0\u884c\u4e3b\u7a0b\u5e8f\u6d4b\u8bd5"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#6","text":"<!-- \u8fd9\u4e2a\u63d2\u4ef6\uff0c\u53ef\u4ee5\u5c06\u5e94\u7528\u6253\u5305\u6210\u4e00\u4e2a\u53ef\u6267\u884c\u7684jar\u5305\uff1b--> <build> <plugins> <plugin> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-maven-plugin </artifactId> </plugin> </plugins> </build> \u5c06\u8fd9\u4e2a\u5e94\u7528\u6253\u6210jar\u5305\uff0c\u76f4\u63a5\u4f7f\u7528java -jar\u7684\u547d\u4ee4\u8fdb\u884c\u6267\u884c\uff1b","title":"6\u3001\u7b80\u5316\u90e8\u7f72"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#5hello-world","text":"","title":"5\u3001Hello World\u63a2\u7a76"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#1pom","text":"","title":"1\u3001POM\u6587\u4ef6"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#1","text":"<parent> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-parent </artifactId> <version> 1.5.9.RELEASE </version> </parent> \u4ed6\u7684\u7236\u9879\u76ee\u662f <parent> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-dependencies </artifactId> <version> 1.5.9.RELEASE </version> <relativePath> ../../spring-boot-dependencies </relativePath> </parent> \u4ed6\u6765\u771f\u6b63\u7ba1\u7406Spring Boot\u5e94\u7528\u91cc\u9762\u7684\u6240\u6709\u4f9d\u8d56\u7248\u672c\uff1b Spring Boot\u7684\u7248\u672c\u4ef2\u88c1\u4e2d\u5fc3\uff1b \u4ee5\u540e\u6211\u4eec\u5bfc\u5165\u4f9d\u8d56\u9ed8\u8ba4\u662f\u4e0d\u9700\u8981\u5199\u7248\u672c\uff1b\uff08\u6ca1\u6709\u5728dependencies\u91cc\u9762\u7ba1\u7406\u7684\u4f9d\u8d56\u81ea\u7136\u9700\u8981\u58f0\u660e\u7248\u672c\u53f7\uff09","title":"1\u3001\u7236\u9879\u76ee"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#2_1","text":"<dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-web </artifactId> </dependency> spring-boot-starter - web \uff1a \u200b spring-boot-starter\uff1aspring-boot\u573a\u666f\u542f\u52a8\u5668\uff1b\u5e2e\u6211\u4eec\u5bfc\u5165\u4e86web\u6a21\u5757\u6b63\u5e38\u8fd0\u884c\u6240\u4f9d\u8d56\u7684\u7ec4\u4ef6\uff1b Spring Boot\u5c06\u6240\u6709\u7684\u529f\u80fd\u573a\u666f\u90fd\u62bd\u53d6\u51fa\u6765\uff0c\u505a\u6210\u4e00\u4e2a\u4e2a\u7684starters\uff08\u542f\u52a8\u5668\uff09\uff0c\u53ea\u9700\u8981\u5728\u9879\u76ee\u91cc\u9762\u5f15\u5165\u8fd9\u4e9bstarter\u76f8\u5173\u573a\u666f\u7684\u6240\u6709\u4f9d\u8d56\u90fd\u4f1a\u5bfc\u5165\u8fdb\u6765\u3002\u8981\u7528\u4ec0\u4e48\u529f\u80fd\u5c31\u5bfc\u5165\u4ec0\u4e48\u573a\u666f\u7684\u542f\u52a8\u5668","title":"2\u3001\u542f\u52a8\u5668"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#2_2","text":"/** * @SpringBootApplication \u6765\u6807\u6ce8\u4e00\u4e2a\u4e3b\u7a0b\u5e8f\u7c7b\uff0c\u8bf4\u660e\u8fd9\u662f\u4e00\u4e2aSpring Boot\u5e94\u7528 */ @SpringBootApplication public class HelloWorldMainApplication { public static void main ( String [] args ) { // Spring\u5e94\u7528\u542f\u52a8\u8d77\u6765 SpringApplication . run ( HelloWorldMainApplication . class , args ); } } @ SpringBootApplication : Spring Boot\u5e94\u7528\u6807\u6ce8\u5728\u67d0\u4e2a\u7c7b\u4e0a\u8bf4\u660e\u8fd9\u4e2a\u7c7b\u662fSpringBoot\u7684\u4e3b\u914d\u7f6e\u7c7b\uff0cSpringBoot\u5c31\u5e94\u8be5\u8fd0\u884c\u8fd9\u4e2a\u7c7b\u7684main\u65b9\u6cd5\u6765\u542f\u52a8SpringBoot\u5e94\u7528\uff1b @Target ( ElementType . TYPE ) @Retention ( RetentionPolicy . RUNTIME ) @Documented @Inherited @SpringBootConfiguration @EnableAutoConfiguration @ComponentScan ( excludeFilters = { @Filter ( type = FilterType . CUSTOM , classes = TypeExcludeFilter . class ), @Filter ( type = FilterType . CUSTOM , classes = AutoConfigurationExcludeFilter . class ) }) public @interface SpringBootApplication { @ SpringBootConfiguration :Spring Boot\u7684\u914d\u7f6e\u7c7b\uff1b \u200b \u6807\u6ce8\u5728\u67d0\u4e2a\u7c7b\u4e0a\uff0c\u8868\u793a\u8fd9\u662f\u4e00\u4e2aSpring Boot\u7684\u914d\u7f6e\u7c7b\uff1b \u200b @ Configuration :\u914d\u7f6e\u7c7b\u4e0a\u6765\u6807\u6ce8\u8fd9\u4e2a\u6ce8\u89e3\uff1b \u200b \u914d\u7f6e\u7c7b ----- \u914d\u7f6e\u6587\u4ef6\uff1b\u914d\u7f6e\u7c7b\u4e5f\u662f\u5bb9\u5668\u4e2d\u7684\u4e00\u4e2a\u7ec4\u4ef6\uff1b@Component @ EnableAutoConfiguration \uff1a\u5f00\u542f\u81ea\u52a8\u914d\u7f6e\u529f\u80fd\uff1b \u200b \u4ee5\u524d\u6211\u4eec\u9700\u8981\u914d\u7f6e\u7684\u4e1c\u897f\uff0cSpring Boot\u5e2e\u6211\u4eec\u81ea\u52a8\u914d\u7f6e\uff1b@**EnableAutoConfiguration**\u544a\u8bc9SpringBoot\u5f00\u542f\u81ea\u52a8\u914d\u7f6e\u529f\u80fd\uff1b\u8fd9\u6837\u81ea\u52a8\u914d\u7f6e\u624d\u80fd\u751f\u6548\uff1b @AutoConfigurationPackage @Import ( EnableAutoConfigurationImportSelector . class ) public @interface EnableAutoConfiguration { \u200b @ AutoConfigurationPackage \uff1a\u81ea\u52a8\u914d\u7f6e\u5305 \u200b @ Import (AutoConfigurationPackages.Registrar.class)\uff1a \u200b Spring\u7684\u5e95\u5c42\u6ce8\u89e3@Import\uff0c\u7ed9\u5bb9\u5668\u4e2d\u5bfc\u5165\u4e00\u4e2a\u7ec4\u4ef6\uff1b\u5bfc\u5165\u7684\u7ec4\u4ef6\u7531AutoConfigurationPackages.Registrar.class\uff1b \u5c06\u4e3b\u914d\u7f6e\u7c7b\uff08@SpringBootApplication\u6807\u6ce8\u7684\u7c7b\uff09\u7684\u6240\u5728\u5305\u53ca\u4e0b\u9762\u6240\u6709\u5b50\u5305\u91cc\u9762\u7684\u6240\u6709\u7ec4\u4ef6\u626b\u63cf\u5230Spring\u5bb9\u5668\uff1b \u200b @ Import (EnableAutoConfigurationImportSelector.class)\uff1b \u200b \u7ed9\u5bb9\u5668\u4e2d\u5bfc\u5165\u7ec4\u4ef6\uff1f \u200b EnableAutoConfigurationImportSelector \uff1a\u5bfc\u5165\u54ea\u4e9b\u7ec4\u4ef6\u7684\u9009\u62e9\u5668\uff1b \u200b \u5c06\u6240\u6709\u9700\u8981\u5bfc\u5165\u7684\u7ec4\u4ef6\u4ee5\u5168\u7c7b\u540d\u7684\u65b9\u5f0f\u8fd4\u56de\uff1b\u8fd9\u4e9b\u7ec4\u4ef6\u5c31\u4f1a\u88ab\u6dfb\u52a0\u5230\u5bb9\u5668\u4e2d\uff1b \u200b \u4f1a\u7ed9\u5bb9\u5668\u4e2d\u5bfc\u5165\u975e\u5e38\u591a\u7684\u81ea\u52a8\u914d\u7f6e\u7c7b\uff08xxxAutoConfiguration\uff09\uff1b\u5c31\u662f\u7ed9\u5bb9\u5668\u4e2d\u5bfc\u5165\u8fd9\u4e2a\u573a\u666f\u9700\u8981\u7684\u6240\u6709\u7ec4\u4ef6\uff0c\u5e76\u914d\u7f6e\u597d\u8fd9\u4e9b\u7ec4\u4ef6\uff1b \u6709\u4e86\u81ea\u52a8\u914d\u7f6e\u7c7b\uff0c\u514d\u53bb\u4e86\u6211\u4eec\u624b\u52a8\u7f16\u5199\u914d\u7f6e\u6ce8\u5165\u529f\u80fd\u7ec4\u4ef6\u7b49\u7684\u5de5\u4f5c\uff1b \u200b SpringFactoriesLoader.loadFactoryNames(EnableAutoConfiguration.class,classLoader)\uff1b ==Spring Boot\u5728\u542f\u52a8\u7684\u65f6\u5019\u4ece\u7c7b\u8def\u5f84\u4e0b\u7684META-INF/spring.factories\u4e2d\u83b7\u53d6EnableAutoConfiguration\u6307\u5b9a\u7684\u503c\uff0c\u5c06\u8fd9\u4e9b\u503c\u4f5c\u4e3a\u81ea\u52a8\u914d\u7f6e\u7c7b\u5bfc\u5165\u5230\u5bb9\u5668\u4e2d\uff0c\u81ea\u52a8\u914d\u7f6e\u7c7b\u5c31\u751f\u6548\uff0c\u5e2e\u6211\u4eec\u8fdb\u884c\u81ea\u52a8\u914d\u7f6e\u5de5\u4f5c\uff1b==\u4ee5\u524d\u6211\u4eec\u9700\u8981\u81ea\u5df1\u914d\u7f6e\u7684\u4e1c\u897f\uff0c\u81ea\u52a8\u914d\u7f6e\u7c7b\u90fd\u5e2e\u6211\u4eec\uff1b J2EE\u7684\u6574\u4f53\u6574\u5408\u89e3\u51b3\u65b9\u6848\u548c\u81ea\u52a8\u914d\u7f6e\u90fd\u5728spring-boot-autoconfigure-1.5.9.RELEASE.jar\uff1b \u200b Spring\u6ce8\u89e3\u7248\uff08\u8c37\u7c92\u5b66\u9662\uff09","title":"2\u3001\u4e3b\u7a0b\u5e8f\u7c7b\uff0c\u4e3b\u5165\u53e3\u7c7b"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#6spring-initializerspring-boot","text":"","title":"6\u3001\u4f7f\u7528Spring Initializer\u5feb\u901f\u521b\u5efaSpring Boot\u9879\u76ee"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#1idea-spring-initializer","text":"IDE\u90fd\u652f\u6301\u4f7f\u7528Spring\u7684\u9879\u76ee\u521b\u5efa\u5411\u5bfc\u5feb\u901f\u521b\u5efa\u4e00\u4e2aSpring Boot\u9879\u76ee\uff1b \u9009\u62e9\u6211\u4eec\u9700\u8981\u7684\u6a21\u5757\uff1b\u5411\u5bfc\u4f1a\u8054\u7f51\u521b\u5efaSpring Boot\u9879\u76ee\uff1b \u9ed8\u8ba4\u751f\u6210\u7684Spring Boot\u9879\u76ee\uff1b \u4e3b\u7a0b\u5e8f\u5df2\u7ecf\u751f\u6210\u597d\u4e86\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6211\u4eec\u81ea\u5df1\u7684\u903b\u8f91 resources\u6587\u4ef6\u5939\u4e2d\u76ee\u5f55\u7ed3\u6784 static\uff1a\u4fdd\u5b58\u6240\u6709\u7684\u9759\u6001\u8d44\u6e90\uff1b js css images\uff1b templates\uff1a\u4fdd\u5b58\u6240\u6709\u7684\u6a21\u677f\u9875\u9762\uff1b\uff08Spring Boot\u9ed8\u8ba4jar\u5305\u4f7f\u7528\u5d4c\u5165\u5f0f\u7684Tomcat\uff0c\u9ed8\u8ba4\u4e0d\u652f\u6301JSP\u9875\u9762\uff09\uff1b\u53ef\u4ee5\u4f7f\u7528\u6a21\u677f\u5f15\u64ce\uff08freemarker\u3001thymeleaf\uff09\uff1b application.properties\uff1aSpring Boot\u5e94\u7528\u7684\u914d\u7f6e\u6587\u4ef6\uff1b\u53ef\u4ee5\u4fee\u6539\u4e00\u4e9b\u9ed8\u8ba4\u8bbe\u7f6e\uff1b","title":"1\u3001IDEA\uff1a\u4f7f\u7528 Spring Initializer\u5feb\u901f\u521b\u5efa\u9879\u76ee"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#2sts-spring-starter-project","text":"","title":"2\u3001STS\u4f7f\u7528 Spring Starter Project\u5feb\u901f\u521b\u5efa\u9879\u76ee"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#_1","text":"","title":"\u4e8c\u3001\u914d\u7f6e\u6587\u4ef6"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#1_1","text":"SpringBoot\u4f7f\u7528\u4e00\u4e2a\u5168\u5c40\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u914d\u7f6e\u6587\u4ef6\u540d\u662f\u56fa\u5b9a\u7684\uff1b \u2022application.properties \u2022application.yml \u914d\u7f6e\u6587\u4ef6\u7684\u4f5c\u7528\uff1a\u4fee\u6539SpringBoot\u81ea\u52a8\u914d\u7f6e\u7684\u9ed8\u8ba4\u503c\uff1bSpringBoot\u5728\u5e95\u5c42\u90fd\u7ed9\u6211\u4eec\u81ea\u52a8\u914d\u7f6e\u597d\uff1b YAML\uff08YAML Ain't Markup Language\uff09 \u200b YAML A Markup Language\uff1a\u662f\u4e00\u4e2a\u6807\u8bb0\u8bed\u8a00 \u200b YAML isn't Markup Language\uff1a\u4e0d\u662f\u4e00\u4e2a\u6807\u8bb0\u8bed\u8a00\uff1b \u6807\u8bb0\u8bed\u8a00\uff1a \u200b \u4ee5\u524d\u7684\u914d\u7f6e\u6587\u4ef6\uff1b\u5927\u591a\u90fd\u4f7f\u7528\u7684\u662f **xxxx.xml**\u6587\u4ef6\uff1b \u200b YAML\uff1a \u4ee5\u6570\u636e\u4e3a\u4e2d\u5fc3 \uff0c\u6bd4json\u3001xml\u7b49\u66f4\u9002\u5408\u505a\u914d\u7f6e\u6587\u4ef6\uff1b \u200b YAML\uff1a\u914d\u7f6e\u4f8b\u5b50 server : port : 8081 \u200b XML\uff1a <server> <port> 8081 </port> </server>","title":"1\u3001\u914d\u7f6e\u6587\u4ef6"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#2yaml","text":"","title":"2\u3001YAML\u8bed\u6cd5\uff1a"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#1_2","text":"k:(\u7a7a\u683c)v\uff1a\u8868\u793a\u4e00\u5bf9\u952e\u503c\u5bf9\uff08\u7a7a\u683c\u5fc5\u987b\u6709\uff09\uff1b \u4ee5**\u7a7a\u683c**\u7684\u7f29\u8fdb\u6765\u63a7\u5236\u5c42\u7ea7\u5173\u7cfb\uff1b\u53ea\u8981\u662f\u5de6\u5bf9\u9f50\u7684\u4e00\u5217\u6570\u636e\uff0c\u90fd\u662f\u540c\u4e00\u4e2a\u5c42\u7ea7\u7684 server : port : 8081 path : /hello \u5c5e\u6027\u548c\u503c\u4e5f\u662f\u5927\u5c0f\u5199\u654f\u611f\uff1b","title":"1\u3001\u57fa\u672c\u8bed\u6cd5"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#2_3","text":"","title":"2\u3001\u503c\u7684\u5199\u6cd5"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#_2","text":"\u200b k: v\uff1a\u5b57\u9762\u76f4\u63a5\u6765\u5199\uff1b \u200b \u5b57\u7b26\u4e32\u9ed8\u8ba4\u4e0d\u7528\u52a0\u4e0a\u5355\u5f15\u53f7\u6216\u8005\u53cc\u5f15\u53f7\uff1b \u200b \"\"\uff1a\u53cc\u5f15\u53f7\uff1b\u4e0d\u4f1a\u8f6c\u4e49\u5b57\u7b26\u4e32\u91cc\u9762\u7684\u7279\u6b8a\u5b57\u7b26\uff1b\u7279\u6b8a\u5b57\u7b26\u4f1a\u4f5c\u4e3a\u672c\u8eab\u60f3\u8868\u793a\u7684\u610f\u601d \u200b name: \"zhangsan \\n lisi\"\uff1a\u8f93\u51fa\uff1bzhangsan \u6362\u884c lisi \u200b ''\uff1a\u5355\u5f15\u53f7\uff1b\u4f1a\u8f6c\u4e49\u7279\u6b8a\u5b57\u7b26\uff0c\u7279\u6b8a\u5b57\u7b26\u6700\u7ec8\u53ea\u662f\u4e00\u4e2a\u666e\u901a\u7684\u5b57\u7b26\u4e32\u6570\u636e \u200b name: \u2018zhangsan \\n lisi\u2019\uff1a\u8f93\u51fa\uff1bzhangsan \\n lisi","title":"\u5b57\u9762\u91cf\uff1a\u666e\u901a\u7684\u503c\uff08\u6570\u5b57\uff0c\u5b57\u7b26\u4e32\uff0c\u5e03\u5c14\uff09"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#map","text":"\u200b k: v\uff1a\u5728\u4e0b\u4e00\u884c\u6765\u5199\u5bf9\u8c61\u7684\u5c5e\u6027\u548c\u503c\u7684\u5173\u7cfb\uff1b\u6ce8\u610f\u7f29\u8fdb \u200b \u5bf9\u8c61\u8fd8\u662fk: v\u7684\u65b9\u5f0f friends : lastName : zhangsan age : 20 \u884c\u5185\u5199\u6cd5\uff1a friends : { lastName : zhangsan , age : 18 }","title":"\u5bf9\u8c61\u3001Map\uff08\u5c5e\u6027\u548c\u503c\uff09\uff08\u952e\u503c\u5bf9\uff09\uff1a"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#listset","text":"\u7528- \u503c\u8868\u793a\u6570\u7ec4\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20 pets : - cat - dog - pig \u884c\u5185\u5199\u6cd5 pets : [ cat , dog , pig ]","title":"\u6570\u7ec4\uff08List\u3001Set\uff09\uff1a"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#3_1","text":"\u914d\u7f6e\u6587\u4ef6 person : lastName : hello age : 18 boss : false birth : 2017/12/12 maps : { k1 : v1 , k2 : 12 } lists : - lisi - zhaoliu dog : name : \u5c0f\u72d7 age : 12 javaBean\uff1a /** * \u5c06\u914d\u7f6e\u6587\u4ef6\u4e2d\u914d\u7f6e\u7684\u6bcf\u4e00\u4e2a\u5c5e\u6027\u7684\u503c\uff0c\u6620\u5c04\u5230\u8fd9\u4e2a\u7ec4\u4ef6\u4e2d * @ConfigurationProperties\uff1a\u544a\u8bc9SpringBoot\u5c06\u672c\u7c7b\u4e2d\u7684\u6240\u6709\u5c5e\u6027\u548c\u914d\u7f6e\u6587\u4ef6\u4e2d\u76f8\u5173\u7684\u914d\u7f6e\u8fdb\u884c\u7ed1\u5b9a\uff1b * prefix = \"person\"\uff1a\u914d\u7f6e\u6587\u4ef6\u4e2d\u54ea\u4e2a\u4e0b\u9762\u7684\u6240\u6709\u5c5e\u6027\u8fdb\u884c\u4e00\u4e00\u6620\u5c04 * * \u53ea\u6709\u8fd9\u4e2a\u7ec4\u4ef6\u662f\u5bb9\u5668\u4e2d\u7684\u7ec4\u4ef6\uff0c\u624d\u80fd\u5bb9\u5668\u63d0\u4f9b\u7684@ConfigurationProperties\u529f\u80fd\uff1b * */ @Component @ConfigurationProperties ( prefix = \"person\" ) public class Person { private String lastName ; private Integer age ; private Boolean boss ; private Date birth ; private Map < String , Object > maps ; private List < Object > lists ; private Dog dog ; \u6211\u4eec\u53ef\u4ee5\u5bfc\u5165\u914d\u7f6e\u6587\u4ef6\u5904\u7406\u5668\uff0c\u4ee5\u540e\u7f16\u5199\u914d\u7f6e\u5c31\u6709\u63d0\u793a\u4e86 <!--\u5bfc\u5165\u914d\u7f6e\u6587\u4ef6\u5904\u7406\u5668\uff0c\u914d\u7f6e\u6587\u4ef6\u8fdb\u884c\u7ed1\u5b9a\u5c31\u4f1a\u6709\u63d0\u793a--> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-configuration-processor </artifactId> <optional> true </optional> </dependency>","title":"3\u3001\u914d\u7f6e\u6587\u4ef6\u503c\u6ce8\u5165"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#1propertiesideautf-8","text":"\u8c03\u6574","title":"1\u3001properties\u914d\u7f6e\u6587\u4ef6\u5728idea\u4e2d\u9ed8\u8ba4utf-8\u53ef\u80fd\u4f1a\u4e71\u7801"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#2valueconfigurationproperties","text":"@ConfigurationProperties @Value \u529f\u80fd \u6279\u91cf\u6ce8\u5165\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u5c5e\u6027 \u4e00\u4e2a\u4e2a\u6307\u5b9a \u677e\u6563\u7ed1\u5b9a\uff08\u677e\u6563\u8bed\u6cd5\uff09 \u652f\u6301 \u4e0d\u652f\u6301 SpEL \u4e0d\u652f\u6301 \u652f\u6301 JSR303\u6570\u636e\u6821\u9a8c \u652f\u6301 \u4e0d\u652f\u6301 \u590d\u6742\u7c7b\u578b\u5c01\u88c5 \u652f\u6301 \u4e0d\u652f\u6301 \u914d\u7f6e\u6587\u4ef6yml\u8fd8\u662fproperties\u4ed6\u4eec\u90fd\u80fd\u83b7\u53d6\u5230\u503c\uff1b \u5982\u679c\u8bf4\uff0c\u6211\u4eec\u53ea\u662f\u5728\u67d0\u4e2a\u4e1a\u52a1\u903b\u8f91\u4e2d\u9700\u8981\u83b7\u53d6\u4e00\u4e0b\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u67d0\u9879\u503c\uff0c\u4f7f\u7528@Value\uff1b \u5982\u679c\u8bf4\uff0c\u6211\u4eec\u4e13\u95e8\u7f16\u5199\u4e86\u4e00\u4e2ajavaBean\u6765\u548c\u914d\u7f6e\u6587\u4ef6\u8fdb\u884c\u6620\u5c04\uff0c\u6211\u4eec\u5c31\u76f4\u63a5\u4f7f\u7528@ConfigurationProperties\uff1b","title":"2\u3001@Value\u83b7\u53d6\u503c\u548c@ConfigurationProperties\u83b7\u53d6\u503c\u6bd4\u8f83"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#3_2","text":"@Component @ConfigurationProperties ( prefix = \"person\" ) @Validated public class Person { /** * <bean class=\"Person\"> * <property name=\"lastName\" value=\"\u5b57\u9762\u91cf/${key}\u4ece\u73af\u5883\u53d8\u91cf\u3001\u914d\u7f6e\u6587\u4ef6\u4e2d\u83b7\u53d6\u503c/#{SpEL}\"></property> * <bean/> */ //lastName\u5fc5\u987b\u662f\u90ae\u7bb1\u683c\u5f0f @Email //@Value(\"${person.last-name}\") private String lastName ; //@Value(\"#{11*2}\") private Integer age ; //@Value(\"true\") private Boolean boss ; private Date birth ; private Map < String , Object > maps ; private List < Object > lists ; private Dog dog ;","title":"3\u3001\u914d\u7f6e\u6587\u4ef6\u6ce8\u5165\u503c\u6570\u636e\u6821\u9a8c"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#4propertysourceimportresourcebean","text":"@ PropertySource \uff1a\u52a0\u8f7d\u6307\u5b9a\u7684\u914d\u7f6e\u6587\u4ef6\uff1b /** * \u5c06\u914d\u7f6e\u6587\u4ef6\u4e2d\u914d\u7f6e\u7684\u6bcf\u4e00\u4e2a\u5c5e\u6027\u7684\u503c\uff0c\u6620\u5c04\u5230\u8fd9\u4e2a\u7ec4\u4ef6\u4e2d * @ConfigurationProperties\uff1a\u544a\u8bc9SpringBoot\u5c06\u672c\u7c7b\u4e2d\u7684\u6240\u6709\u5c5e\u6027\u548c\u914d\u7f6e\u6587\u4ef6\u4e2d\u76f8\u5173\u7684\u914d\u7f6e\u8fdb\u884c\u7ed1\u5b9a\uff1b * prefix = \"person\"\uff1a\u914d\u7f6e\u6587\u4ef6\u4e2d\u54ea\u4e2a\u4e0b\u9762\u7684\u6240\u6709\u5c5e\u6027\u8fdb\u884c\u4e00\u4e00\u6620\u5c04 * * \u53ea\u6709\u8fd9\u4e2a\u7ec4\u4ef6\u662f\u5bb9\u5668\u4e2d\u7684\u7ec4\u4ef6\uff0c\u624d\u80fd\u5bb9\u5668\u63d0\u4f9b\u7684@ConfigurationProperties\u529f\u80fd\uff1b * @ConfigurationProperties(prefix = \"person\")\u9ed8\u8ba4\u4ece\u5168\u5c40\u914d\u7f6e\u6587\u4ef6\u4e2d\u83b7\u53d6\u503c\uff1b * */ @PropertySource ( value = { \"classpath:person.properties\" }) @Component @ConfigurationProperties ( prefix = \"person\" ) //@Validated public class Person { /** * <bean class=\"Person\"> * <property name=\"lastName\" value=\"\u5b57\u9762\u91cf/${key}\u4ece\u73af\u5883\u53d8\u91cf\u3001\u914d\u7f6e\u6587\u4ef6\u4e2d\u83b7\u53d6\u503c/#{SpEL}\"></property> * <bean/> */ //lastName\u5fc5\u987b\u662f\u90ae\u7bb1\u683c\u5f0f // @Email //@Value(\"${person.last-name}\") private String lastName ; //@Value(\"#{11*2}\") private Integer age ; //@Value(\"true\") private Boolean boss ; @ ImportResource \uff1a\u5bfc\u5165Spring\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u8ba9\u914d\u7f6e\u6587\u4ef6\u91cc\u9762\u7684\u5185\u5bb9\u751f\u6548\uff1b Spring Boot\u91cc\u9762\u6ca1\u6709Spring\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u6211\u4eec\u81ea\u5df1\u7f16\u5199\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u4e5f\u4e0d\u80fd\u81ea\u52a8\u8bc6\u522b\uff1b \u60f3\u8ba9Spring\u7684\u914d\u7f6e\u6587\u4ef6\u751f\u6548\uff0c\u52a0\u8f7d\u8fdb\u6765\uff1b@**ImportResource**\u6807\u6ce8\u5728\u4e00\u4e2a\u914d\u7f6e\u7c7b\u4e0a @ImportResource ( locations = { \"classpath:beans.xml\" }) \u5bfc\u5165Spring\u7684\u914d\u7f6e\u6587\u4ef6\u8ba9\u5176\u751f\u6548 \u4e0d\u6765\u7f16\u5199Spring\u7684\u914d\u7f6e\u6587\u4ef6 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <beans xmlns= \"http://www.springframework.org/schema/beans\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\" > <bean id= \"helloService\" class= \"com.atguigu.springboot.service.HelloService\" ></bean> </beans> SpringBoot\u63a8\u8350\u7ed9\u5bb9\u5668\u4e2d\u6dfb\u52a0\u7ec4\u4ef6\u7684\u65b9\u5f0f\uff1b\u63a8\u8350\u4f7f\u7528\u5168\u6ce8\u89e3\u7684\u65b9\u5f0f 1\u3001\u914d\u7f6e\u7c7b**@Configuration**------>Spring\u914d\u7f6e\u6587\u4ef6 2\u3001\u4f7f\u7528**@Bean**\u7ed9\u5bb9\u5668\u4e2d\u6dfb\u52a0\u7ec4\u4ef6 /** * @Configuration\uff1a\u6307\u660e\u5f53\u524d\u7c7b\u662f\u4e00\u4e2a\u914d\u7f6e\u7c7b\uff1b\u5c31\u662f\u6765\u66ff\u4ee3\u4e4b\u524d\u7684Spring\u914d\u7f6e\u6587\u4ef6 * * \u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u7528<bean><bean/>\u6807\u7b7e\u6dfb\u52a0\u7ec4\u4ef6 * */ @Configuration public class MyAppConfig { //\u5c06\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u6dfb\u52a0\u5230\u5bb9\u5668\u4e2d\uff1b\u5bb9\u5668\u4e2d\u8fd9\u4e2a\u7ec4\u4ef6\u9ed8\u8ba4\u7684id\u5c31\u662f\u65b9\u6cd5\u540d @Bean public HelloService helloService02 (){ System . out . println ( \"\u914d\u7f6e\u7c7b@Bean\u7ed9\u5bb9\u5668\u4e2d\u6dfb\u52a0\u7ec4\u4ef6\u4e86...\" ); return new HelloService (); } }","title":"4\u3001@PropertySource&amp;@ImportResource&amp;@Bean"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#4","text":"","title":"4\u3001\u914d\u7f6e\u6587\u4ef6\u5360\u4f4d\u7b26"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#1_3","text":"$ { random . value } \u3001 $ { random . int } \u3001 $ { random . long } $ { random . int ( 10 )} \u3001 $ { random . int [ 1024 , 65536 ] }","title":"1\u3001\u968f\u673a\u6570"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#2_4","text":"person.last-name = \u5f20\u4e09${random.uuid} person.age = ${random.int} person.birth = 2017/12/15 person.boss = false person.maps.k1 = v1 person.maps.k2 = 14 person.lists = a,b,c person.dog.name = ${person.hello:hello}_dog person.dog.age = 15","title":"2\u3001\u5360\u4f4d\u7b26\u83b7\u53d6\u4e4b\u524d\u914d\u7f6e\u7684\u503c\uff0c\u5982\u679c\u6ca1\u6709\u53ef\u4ee5\u662f\u7528:\u6307\u5b9a\u9ed8\u8ba4\u503c"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#5profile","text":"","title":"5\u3001Profile"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#1profile","text":"\u6211\u4eec\u5728\u4e3b\u914d\u7f6e\u6587\u4ef6\u7f16\u5199\u7684\u65f6\u5019\uff0c\u6587\u4ef6\u540d\u53ef\u4ee5\u662f application-{profile}.properties/yml \u9ed8\u8ba4\u4f7f\u7528application.properties\u7684\u914d\u7f6e\uff1b","title":"1\u3001\u591aProfile\u6587\u4ef6"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#2yml","text":"server: port: 8081 spring: profiles: active: prod --- server: port: 8083 spring: profiles: dev --- server: port: 8084 spring: profiles: prod #\u6307\u5b9a\u5c5e\u4e8e\u54ea\u4e2a\u73af\u5883","title":"2\u3001yml\u652f\u6301\u591a\u6587\u6863\u5757\u65b9\u5f0f"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#3profile","text":"\u200b 1\u3001\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u6307\u5b9a spring.profiles.active=dev \u200b 2\u3001\u547d\u4ee4\u884c\uff1a \u200b java -jar spring-boot-02-config-0.0.1-SNAPSHOT.jar --spring.profiles.active=dev\uff1b \u200b \u53ef\u4ee5\u76f4\u63a5\u5728\u6d4b\u8bd5\u7684\u65f6\u5019\uff0c\u914d\u7f6e\u4f20\u5165\u547d\u4ee4\u884c\u53c2\u6570 \u200b 3\u3001\u865a\u62df\u673a\u53c2\u6570\uff1b \u200b -Dspring.profiles.active=dev","title":"3\u3001\u6fc0\u6d3b\u6307\u5b9aprofile"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#6_1","text":"springboot \u542f\u52a8\u4f1a\u626b\u63cf\u4ee5\u4e0b\u4f4d\u7f6e\u7684application.properties\u6216\u8005application.yml\u6587\u4ef6\u4f5c\u4e3aSpring boot\u7684\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6 \u2013file:./config/ \u2013file:./ \u2013classpath:/config/ \u2013classpath:/ \u4f18\u5148\u7ea7\u7531\u9ad8\u5230\u5e95\uff0c\u9ad8\u4f18\u5148\u7ea7\u7684\u914d\u7f6e\u4f1a\u8986\u76d6\u4f4e\u4f18\u5148\u7ea7\u7684\u914d\u7f6e\uff1b SpringBoot\u4f1a\u4ece\u8fd9\u56db\u4e2a\u4f4d\u7f6e\u5168\u90e8\u52a0\u8f7d\u4e3b\u914d\u7f6e\u6587\u4ef6\uff1b \u4e92\u8865\u914d\u7f6e \uff1b \u6211\u4eec\u8fd8\u53ef\u4ee5\u901a\u8fc7spring.config.location\u6765\u6539\u53d8\u9ed8\u8ba4\u7684\u914d\u7f6e\u6587\u4ef6\u4f4d\u7f6e \u9879\u76ee\u6253\u5305\u597d\u4ee5\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u547d\u4ee4\u884c\u53c2\u6570\u7684\u5f62\u5f0f\uff0c\u542f\u52a8\u9879\u76ee\u7684\u65f6\u5019\u6765\u6307\u5b9a\u914d\u7f6e\u6587\u4ef6\u7684\u65b0\u4f4d\u7f6e\uff1b\u6307\u5b9a\u914d\u7f6e\u6587\u4ef6\u548c\u9ed8\u8ba4\u52a0\u8f7d\u7684\u8fd9\u4e9b\u914d\u7f6e\u6587\u4ef6\u5171\u540c\u8d77\u4f5c\u7528\u5f62\u6210\u4e92\u8865\u914d\u7f6e\uff1b java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar --spring.config.location=G:/application.properties","title":"6\u3001\u914d\u7f6e\u6587\u4ef6\u52a0\u8f7d\u4f4d\u7f6e"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#7","text":"SpringBoot\u4e5f\u53ef\u4ee5\u4ece\u4ee5\u4e0b\u4f4d\u7f6e\u52a0\u8f7d\u914d\u7f6e\uff1b \u4f18\u5148\u7ea7\u4ece\u9ad8\u5230\u4f4e\uff1b\u9ad8\u4f18\u5148\u7ea7\u7684\u914d\u7f6e\u8986\u76d6\u4f4e\u4f18\u5148\u7ea7\u7684\u914d\u7f6e\uff0c\u6240\u6709\u7684\u914d\u7f6e\u4f1a\u5f62\u6210\u4e92\u8865\u914d\u7f6e 1.\u547d\u4ee4\u884c\u53c2\u6570 \u6240\u6709\u7684\u914d\u7f6e\u90fd\u53ef\u4ee5\u5728\u547d\u4ee4\u884c\u4e0a\u8fdb\u884c\u6307\u5b9a java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar --server.port=8087 --server.context-path=/abc \u591a\u4e2a\u914d\u7f6e\u7528\u7a7a\u683c\u5206\u5f00\uff1b --\u914d\u7f6e\u9879=\u503c 2.\u6765\u81eajava:comp/env\u7684JNDI\u5c5e\u6027 3.Java\u7cfb\u7edf\u5c5e\u6027\uff08System.getProperties()\uff09 4.\u64cd\u4f5c\u7cfb\u7edf\u73af\u5883\u53d8\u91cf 5.RandomValuePropertySource\u914d\u7f6e\u7684random.*\u5c5e\u6027\u503c \u7531jar\u5305\u5916\u5411jar\u5305\u5185\u8fdb\u884c\u5bfb\u627e\uff1b \u4f18\u5148\u52a0\u8f7d\u5e26profile 6.jar\u5305\u5916\u90e8\u7684application-{profile}.properties\u6216application.yml(\u5e26spring.profile)\u914d\u7f6e\u6587\u4ef6 7.jar\u5305\u5185\u90e8\u7684application-{profile}.properties\u6216application.yml(\u5e26spring.profile)\u914d\u7f6e\u6587\u4ef6 \u518d\u6765\u52a0\u8f7d\u4e0d\u5e26profile 8.jar\u5305\u5916\u90e8\u7684application.properties\u6216application.yml(\u4e0d\u5e26spring.profile)\u914d\u7f6e\u6587\u4ef6 9.jar\u5305\u5185\u90e8\u7684application.properties\u6216application.yml(\u4e0d\u5e26spring.profile)\u914d\u7f6e\u6587\u4ef6 10.@Configuration\u6ce8\u89e3\u7c7b\u4e0a\u7684@PropertySource 11.\u901a\u8fc7SpringApplication.setDefaultProperties\u6307\u5b9a\u7684\u9ed8\u8ba4\u5c5e\u6027 \u6240\u6709\u652f\u6301\u7684\u914d\u7f6e\u52a0\u8f7d\u6765\u6e90\uff1b \u53c2\u8003\u5b98\u65b9\u6587\u6863","title":"7\u3001\u5916\u90e8\u914d\u7f6e\u52a0\u8f7d\u987a\u5e8f"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#8","text":"\u914d\u7f6e\u6587\u4ef6\u5230\u5e95\u80fd\u5199\u4ec0\u4e48\uff1f\u600e\u4e48\u5199\uff1f\u81ea\u52a8\u914d\u7f6e\u539f\u7406\uff1b \u914d\u7f6e\u6587\u4ef6\u80fd\u914d\u7f6e\u7684\u5c5e\u6027\u53c2\u7167","title":"8\u3001\u81ea\u52a8\u914d\u7f6e\u539f\u7406"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#1_4","text":"1\uff09\u3001SpringBoot\u542f\u52a8\u7684\u65f6\u5019\u52a0\u8f7d\u4e3b\u914d\u7f6e\u7c7b\uff0c\u5f00\u542f\u4e86\u81ea\u52a8\u914d\u7f6e\u529f\u80fd @EnableAutoConfiguration 2\uff09\u3001@EnableAutoConfiguration \u4f5c\u7528\uff1a \u5229\u7528EnableAutoConfigurationImportSelector\u7ed9\u5bb9\u5668\u4e2d\u5bfc\u5165\u4e00\u4e9b\u7ec4\u4ef6\uff1f \u53ef\u4ee5\u67e5\u770bselectImports()\u65b9\u6cd5\u7684\u5185\u5bb9\uff1b List configurations = getCandidateConfigurations(annotationMetadata, attributes);\u83b7\u53d6\u5019\u9009\u7684\u914d\u7f6e ```java SpringFactoriesLoader.loadFactoryNames() \u626b\u63cf\u6240\u6709jar\u5305\u7c7b\u8def\u5f84\u4e0b META-INF/spring.factories \u628a\u626b\u63cf\u5230\u7684\u8fd9\u4e9b\u6587\u4ef6\u7684\u5185\u5bb9\u5305\u88c5\u6210properties\u5bf9\u8c61 \u4eceproperties\u4e2d\u83b7\u53d6\u5230EnableAutoConfiguration.class\u7c7b\uff08\u7c7b\u540d\uff09\u5bf9\u5e94\u7684\u503c\uff0c\u7136\u540e\u628a\u4ed6\u4eec\u6dfb\u52a0\u5728\u5bb9\u5668\u4e2d ``` \u200b \u5c06 \u7c7b\u8def\u5f84\u4e0b META-INF/spring.factories \u91cc\u9762\u914d\u7f6e\u7684\u6240\u6709EnableAutoConfiguration\u7684\u503c\u52a0\u5165\u5230\u4e86\u5bb9\u5668\u4e2d\uff1b # Auto Configure org.springframework.boot.autoconfigure.EnableAutoConfiguration = \\ org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\\ org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\\ org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\\ org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\\ org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\\ org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\\ org.springframework.boot.autoconfigure.cloud.CloudAutoConfiguration,\\ org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\\ org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\\ org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\\ org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\\ org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\\ org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\\ org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\\ org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\\ org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\\ org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\\ org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\\ org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\\ org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\\ org.springframework.boot.autoconfigure.data.ldap.LdapDataAutoConfiguration,\\ org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\\ org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\\ org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\\ org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\\ org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\\ org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\\ org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\\ org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\\ org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\\ org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\\ org.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration,\\ org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\\ org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\\ org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\\ org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\\ org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\\ org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\\ org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\\ org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\\ org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\\ org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\\ org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\\ org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\\ org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\\ org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\\ org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\\ org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\\ org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\\ org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\\ org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\\ org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\\ org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\\ org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\\ org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\\ org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\\ org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\\ org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\\ org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\\ org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\\ org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\\ org.springframework.boot.autoconfigure.mobile.DeviceResolverAutoConfiguration,\\ org.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverAutoConfiguration,\\ org.springframework.boot.autoconfigure.mobile.SitePreferenceAutoConfiguration,\\ org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\\ org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\\ org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\\ org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\\ org.springframework.boot.autoconfigure.reactor.ReactorAutoConfiguration,\\ org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration,\\ org.springframework.boot.autoconfigure.security.SecurityFilterAutoConfiguration,\\ org.springframework.boot.autoconfigure.security.FallbackWebSecurityAutoConfiguration,\\ org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfiguration,\\ org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\\ org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\\ org.springframework.boot.autoconfigure.social.SocialWebAutoConfiguration,\\ org.springframework.boot.autoconfigure.social.FacebookAutoConfiguration,\\ org.springframework.boot.autoconfigure.social.LinkedInAutoConfiguration,\\ org.springframework.boot.autoconfigure.social.TwitterAutoConfiguration,\\ org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\\ org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\\ org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\\ org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\\ org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\\ org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration,\\ org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration,\\ org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration,\\ org.springframework.boot.autoconfigure.web.HttpEncodingAutoConfiguration,\\ org.springframework.boot.autoconfigure.web.HttpMessageConvertersAutoConfiguration,\\ org.springframework.boot.autoconfigure.web.MultipartAutoConfiguration,\\ org.springframework.boot.autoconfigure.web.ServerPropertiesAutoConfiguration,\\ org.springframework.boot.autoconfigure.web.WebClientAutoConfiguration,\\ org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration,\\ org.springframework.boot.autoconfigure.websocket.WebSocketAutoConfiguration,\\ org.springframework.boot.autoconfigure.websocket.WebSocketMessagingAutoConfiguration,\\ org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration \u6bcf\u4e00\u4e2a\u8fd9\u6837\u7684 xxxAutoConfiguration\u7c7b\u90fd\u662f\u5bb9\u5668\u4e2d\u7684\u4e00\u4e2a\u7ec4\u4ef6\uff0c\u90fd\u52a0\u5165\u5230\u5bb9\u5668\u4e2d\uff1b\u7528\u4ed6\u4eec\u6765\u505a\u81ea\u52a8\u914d\u7f6e\uff1b 3\uff09\u3001\u6bcf\u4e00\u4e2a\u81ea\u52a8\u914d\u7f6e\u7c7b\u8fdb\u884c\u81ea\u52a8\u914d\u7f6e\u529f\u80fd\uff1b 4\uff09\u3001\u4ee5**HttpEncodingAutoConfiguration\uff08Http\u7f16\u7801\u81ea\u52a8\u914d\u7f6e\uff09**\u4e3a\u4f8b\u89e3\u91ca\u81ea\u52a8\u914d\u7f6e\u539f\u7406\uff1b @Configuration //\u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u914d\u7f6e\u7c7b\uff0c\u4ee5\u524d\u7f16\u5199\u7684\u914d\u7f6e\u6587\u4ef6\u4e00\u6837\uff0c\u4e5f\u53ef\u4ee5\u7ed9\u5bb9\u5668\u4e2d\u6dfb\u52a0\u7ec4\u4ef6 @EnableConfigurationProperties ( HttpEncodingProperties . class ) //\u542f\u52a8\u6307\u5b9a\u7c7b\u7684ConfigurationProperties\u529f\u80fd\uff1b\u5c06\u914d\u7f6e\u6587\u4ef6\u4e2d\u5bf9\u5e94\u7684\u503c\u548cHttpEncodingProperties\u7ed1\u5b9a\u8d77\u6765\uff1b\u5e76\u628aHttpEncodingProperties\u52a0\u5165\u5230ioc\u5bb9\u5668\u4e2d @ConditionalOnWebApplication //Spring\u5e95\u5c42@Conditional\u6ce8\u89e3\uff08Spring\u6ce8\u89e3\u7248\uff09\uff0c\u6839\u636e\u4e0d\u540c\u7684\u6761\u4ef6\uff0c\u5982\u679c\u6ee1\u8db3\u6307\u5b9a\u7684\u6761\u4ef6\uff0c\u6574\u4e2a\u914d\u7f6e\u7c7b\u91cc\u9762\u7684\u914d\u7f6e\u5c31\u4f1a\u751f\u6548\uff1b \u5224\u65ad\u5f53\u524d\u5e94\u7528\u662f\u5426\u662fweb\u5e94\u7528\uff0c\u5982\u679c\u662f\uff0c\u5f53\u524d\u914d\u7f6e\u7c7b\u751f\u6548 @ConditionalOnClass ( CharacterEncodingFilter . class ) //\u5224\u65ad\u5f53\u524d\u9879\u76ee\u6709\u6ca1\u6709\u8fd9\u4e2a\u7c7bCharacterEncodingFilter\uff1bSpringMVC\u4e2d\u8fdb\u884c\u4e71\u7801\u89e3\u51b3\u7684\u8fc7\u6ee4\u5668\uff1b @ConditionalOnProperty ( prefix = \"spring.http.encoding\" , value = \"enabled\" , matchIfMissing = true ) //\u5224\u65ad\u914d\u7f6e\u6587\u4ef6\u4e2d\u662f\u5426\u5b58\u5728\u67d0\u4e2a\u914d\u7f6e spring.http.encoding.enabled\uff1b\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5224\u65ad\u4e5f\u662f\u6210\u7acb\u7684 //\u5373\u4f7f\u6211\u4eec\u914d\u7f6e\u6587\u4ef6\u4e2d\u4e0d\u914d\u7f6epring.http.encoding.enabled=true\uff0c\u4e5f\u662f\u9ed8\u8ba4\u751f\u6548\u7684\uff1b public class HttpEncodingAutoConfiguration { //\u4ed6\u5df2\u7ecf\u548cSpringBoot\u7684\u914d\u7f6e\u6587\u4ef6\u6620\u5c04\u4e86 private final HttpEncodingProperties properties ; //\u53ea\u6709\u4e00\u4e2a\u6709\u53c2\u6784\u9020\u5668\u7684\u60c5\u51b5\u4e0b\uff0c\u53c2\u6570\u7684\u503c\u5c31\u4f1a\u4ece\u5bb9\u5668\u4e2d\u62ff public HttpEncodingAutoConfiguration ( HttpEncodingProperties properties ) { this . properties = properties ; } @Bean //\u7ed9\u5bb9\u5668\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u7ec4\u4ef6\uff0c\u8fd9\u4e2a\u7ec4\u4ef6\u7684\u67d0\u4e9b\u503c\u9700\u8981\u4eceproperties\u4e2d\u83b7\u53d6 @ConditionalOnMissingBean ( CharacterEncodingFilter . class ) //\u5224\u65ad\u5bb9\u5668\u6ca1\u6709\u8fd9\u4e2a\u7ec4\u4ef6\uff1f public CharacterEncodingFilter characterEncodingFilter () { CharacterEncodingFilter filter = new OrderedCharacterEncodingFilter (); filter . setEncoding ( this . properties . getCharset (). name ()); filter . setForceRequestEncoding ( this . properties . shouldForce ( Type . REQUEST )); filter . setForceResponseEncoding ( this . properties . shouldForce ( Type . RESPONSE )); return filter ; } \u6839\u636e\u5f53\u524d\u4e0d\u540c\u7684\u6761\u4ef6\u5224\u65ad\uff0c\u51b3\u5b9a\u8fd9\u4e2a\u914d\u7f6e\u7c7b\u662f\u5426\u751f\u6548\uff1f \u4e00\u4f46\u8fd9\u4e2a\u914d\u7f6e\u7c7b\u751f\u6548\uff1b\u8fd9\u4e2a\u914d\u7f6e\u7c7b\u5c31\u4f1a\u7ed9\u5bb9\u5668\u4e2d\u6dfb\u52a0\u5404\u79cd\u7ec4\u4ef6\uff1b\u8fd9\u4e9b\u7ec4\u4ef6\u7684\u5c5e\u6027\u662f\u4ece\u5bf9\u5e94\u7684properties\u7c7b\u4e2d\u83b7\u53d6\u7684\uff0c\u8fd9\u4e9b\u7c7b\u91cc\u9762\u7684\u6bcf\u4e00\u4e2a\u5c5e\u6027\u53c8\u662f\u548c\u914d\u7f6e\u6587\u4ef6\u7ed1\u5b9a\u7684\uff1b 5\uff09\u3001\u6240\u6709\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u80fd\u914d\u7f6e\u7684\u5c5e\u6027\u90fd\u662f\u5728xxxxProperties\u7c7b\u4e2d\u5c01\u88c5\u8005\u2018\uff1b\u914d\u7f6e\u6587\u4ef6\u80fd\u914d\u7f6e\u4ec0\u4e48\u5c31\u53ef\u4ee5\u53c2\u7167\u67d0\u4e2a\u529f\u80fd\u5bf9\u5e94\u7684\u8fd9\u4e2a\u5c5e\u6027\u7c7b @ConfigurationProperties ( prefix = \"spring.http.encoding\" ) //\u4ece\u914d\u7f6e\u6587\u4ef6\u4e2d\u83b7\u53d6\u6307\u5b9a\u7684\u503c\u548cbean\u7684\u5c5e\u6027\u8fdb\u884c\u7ed1\u5b9a public class HttpEncodingProperties { public static final Charset DEFAULT_CHARSET = Charset . forName ( \"UTF-8\" ); \u7cbe\u9ad3\uff1a \u200b 1\uff09\u3001SpringBoot\u542f\u52a8\u4f1a\u52a0\u8f7d\u5927\u91cf\u7684\u81ea\u52a8\u914d\u7f6e\u7c7b \u200b 2\uff09\u3001\u6211\u4eec\u770b\u6211\u4eec\u9700\u8981\u7684\u529f\u80fd\u6709\u6ca1\u6709SpringBoot\u9ed8\u8ba4\u5199\u597d\u7684\u81ea\u52a8\u914d\u7f6e\u7c7b\uff1b \u200b 3\uff09\u3001\u6211\u4eec\u518d\u6765\u770b\u8fd9\u4e2a\u81ea\u52a8\u914d\u7f6e\u7c7b\u4e2d\u5230\u5e95\u914d\u7f6e\u4e86\u54ea\u4e9b\u7ec4\u4ef6\uff1b\uff08\u53ea\u8981\u6211\u4eec\u8981\u7528\u7684\u7ec4\u4ef6\u6709\uff0c\u6211\u4eec\u5c31\u4e0d\u9700\u8981\u518d\u6765\u914d\u7f6e\u4e86\uff09 \u200b 4\uff09\u3001\u7ed9\u5bb9\u5668\u4e2d\u81ea\u52a8\u914d\u7f6e\u7c7b\u6dfb\u52a0\u7ec4\u4ef6\u7684\u65f6\u5019\uff0c\u4f1a\u4eceproperties\u7c7b\u4e2d\u83b7\u53d6\u67d0\u4e9b\u5c5e\u6027\u3002\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u6307\u5b9a\u8fd9\u4e9b\u5c5e\u6027\u7684\u503c\uff1b xxxxAutoConfigurartion\uff1a\u81ea\u52a8\u914d\u7f6e\u7c7b\uff1b \u7ed9\u5bb9\u5668\u4e2d\u6dfb\u52a0\u7ec4\u4ef6 xxxxProperties:\u5c01\u88c5\u914d\u7f6e\u6587\u4ef6\u4e2d\u76f8\u5173\u5c5e\u6027\uff1b","title":"1\u3001\u81ea\u52a8\u914d\u7f6e\u539f\u7406\uff1a"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#2_5","text":"","title":"2\u3001\u7ec6\u8282"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#1conditionalspringconditional","text":"\u4f5c\u7528\uff1a\u5fc5\u987b\u662f@Conditional\u6307\u5b9a\u7684\u6761\u4ef6\u6210\u7acb\uff0c\u624d\u7ed9\u5bb9\u5668\u4e2d\u6dfb\u52a0\u7ec4\u4ef6\uff0c\u914d\u7f6e\u914d\u91cc\u9762\u7684\u6240\u6709\u5185\u5bb9\u624d\u751f\u6548\uff1b @Conditional\u6269\u5c55\u6ce8\u89e3 \u4f5c\u7528\uff08\u5224\u65ad\u662f\u5426\u6ee1\u8db3\u5f53\u524d\u6307\u5b9a\u6761\u4ef6\uff09 @ConditionalOnJava \u7cfb\u7edf\u7684java\u7248\u672c\u662f\u5426\u7b26\u5408\u8981\u6c42 @ConditionalOnBean \u5bb9\u5668\u4e2d\u5b58\u5728\u6307\u5b9aBean\uff1b @ConditionalOnMissingBean \u5bb9\u5668\u4e2d\u4e0d\u5b58\u5728\u6307\u5b9aBean\uff1b @ConditionalOnExpression \u6ee1\u8db3SpEL\u8868\u8fbe\u5f0f\u6307\u5b9a @ConditionalOnClass \u7cfb\u7edf\u4e2d\u6709\u6307\u5b9a\u7684\u7c7b @ConditionalOnMissingClass \u7cfb\u7edf\u4e2d\u6ca1\u6709\u6307\u5b9a\u7684\u7c7b @ConditionalOnSingleCandidate \u5bb9\u5668\u4e2d\u53ea\u6709\u4e00\u4e2a\u6307\u5b9a\u7684Bean\uff0c\u6216\u8005\u8fd9\u4e2aBean\u662f\u9996\u9009Bean @ConditionalOnProperty \u7cfb\u7edf\u4e2d\u6307\u5b9a\u7684\u5c5e\u6027\u662f\u5426\u6709\u6307\u5b9a\u7684\u503c @ConditionalOnResource \u7c7b\u8def\u5f84\u4e0b\u662f\u5426\u5b58\u5728\u6307\u5b9a\u8d44\u6e90\u6587\u4ef6 @ConditionalOnWebApplication \u5f53\u524d\u662fweb\u73af\u5883 @ConditionalOnNotWebApplication \u5f53\u524d\u4e0d\u662fweb\u73af\u5883 @ConditionalOnJndi JNDI\u5b58\u5728\u6307\u5b9a\u9879 \u81ea\u52a8\u914d\u7f6e\u7c7b\u5fc5\u987b\u5728\u4e00\u5b9a\u7684\u6761\u4ef6\u4e0b\u624d\u80fd\u751f\u6548\uff1b \u6211\u4eec\u600e\u4e48\u77e5\u9053\u54ea\u4e9b\u81ea\u52a8\u914d\u7f6e\u7c7b\u751f\u6548\uff1b \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u542f\u7528 debug=true\u5c5e\u6027\uff1b\u6765\u8ba9\u63a7\u5236\u53f0\u6253\u5370\u81ea\u52a8\u914d\u7f6e\u62a5\u544a \uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u77e5\u9053\u54ea\u4e9b\u81ea\u52a8\u914d\u7f6e\u7c7b\u751f\u6548\uff1b ========================= AUTO - CONFIGURATION REPORT ========================= Positive matches : \uff08 \u81ea\u52a8\u914d\u7f6e\u7c7b\u542f\u7528\u7684 \uff09 ----------------- DispatcherServletAutoConfiguration matched : - @ConditionalOnClass found required class ' org . springframework . web . servlet . DispatcherServlet ' ; @ConditionalOnMissingClass did not find unwanted class ( OnClassCondition ) - @ConditionalOnWebApplication ( required ) found StandardServletEnvironment ( OnWebApplicationCondition ) Negative matches : \uff08 \u6ca1\u6709\u542f\u52a8 \uff0c \u6ca1\u6709\u5339\u914d\u6210\u529f\u7684\u81ea\u52a8\u914d\u7f6e\u7c7b \uff09 ----------------- ActiveMQAutoConfiguration: Did not match : - @ConditionalOnClass did not find required classes ' javax . jms . ConnectionFactory ' , ' org . apache . activemq . ActiveMQConnectionFactory ' ( OnClassCondition ) AopAutoConfiguration: Did not match : - @ConditionalOnClass did not find required classes ' org . aspectj . lang . annotation . Aspect ' , ' org . aspectj . lang . reflect . Advice ' ( OnClassCondition )","title":"1\u3001@Conditional\u6d3e\u751f\u6ce8\u89e3\uff08Spring\u6ce8\u89e3\u7248\u539f\u751f\u7684@Conditional\u4f5c\u7528\uff09"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#_3","text":"","title":"\u4e09\u3001\u65e5\u5fd7"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#1_5","text":"\u5c0f\u5f20\uff1b\u5f00\u53d1\u4e00\u4e2a\u5927\u578b\u7cfb\u7edf\uff1b \u200b 1\u3001System.out.println(\"\")\uff1b\u5c06\u5173\u952e\u6570\u636e\u6253\u5370\u5728\u63a7\u5236\u53f0\uff1b\u53bb\u6389\uff1f\u5199\u5728\u4e00\u4e2a\u6587\u4ef6\uff1f \u200b 2\u3001\u6846\u67b6\u6765\u8bb0\u5f55\u7cfb\u7edf\u7684\u4e00\u4e9b\u8fd0\u884c\u65f6\u4fe1\u606f\uff1b\u65e5\u5fd7\u6846\u67b6 \uff1b zhanglogging.jar\uff1b \u200b 3\u3001\u9ad8\u5927\u4e0a\u7684\u51e0\u4e2a\u529f\u80fd\uff1f\u5f02\u6b65\u6a21\u5f0f\uff1f\u81ea\u52a8\u5f52\u6863\uff1fxxxx\uff1f zhanglogging-good.jar\uff1f \u200b 4\u3001\u5c06\u4ee5\u524d\u6846\u67b6\u5378\u4e0b\u6765\uff1f\u6362\u4e0a\u65b0\u7684\u6846\u67b6\uff0c\u91cd\u65b0\u4fee\u6539\u4e4b\u524d\u76f8\u5173\u7684API\uff1bzhanglogging-prefect.jar\uff1b \u200b 5\u3001JDBC---\u6570\u636e\u5e93\u9a71\u52a8\uff1b \u200b \u5199\u4e86\u4e00\u4e2a\u7edf\u4e00\u7684\u63a5\u53e3\u5c42\uff1b\u65e5\u5fd7\u95e8\u9762\uff08\u65e5\u5fd7\u7684\u4e00\u4e2a\u62bd\u8c61\u5c42\uff09\uff1blogging-abstract.jar\uff1b \u200b \u7ed9\u9879\u76ee\u4e2d\u5bfc\u5165\u5177\u4f53\u7684\u65e5\u5fd7\u5b9e\u73b0\u5c31\u884c\u4e86\uff1b\u6211\u4eec\u4e4b\u524d\u7684\u65e5\u5fd7\u6846\u67b6\u90fd\u662f\u5b9e\u73b0\u7684\u62bd\u8c61\u5c42\uff1b \u5e02\u9762\u4e0a\u7684\u65e5\u5fd7\u6846\u67b6\uff1b JUL\u3001JCL\u3001Jboss-logging\u3001logback\u3001log4j\u3001log4j2\u3001slf4j.... \u65e5\u5fd7\u95e8\u9762 \uff08\u65e5\u5fd7\u7684\u62bd\u8c61\u5c42\uff09 \u65e5\u5fd7\u5b9e\u73b0 JCL\uff08Jakarta Commons Logging\uff09 SLF4j\uff08Simple Logging Facade for Java\uff09 jboss-logging Log4j JUL\uff08java.util.logging\uff09 Log4j2 Logback \u5de6\u8fb9\u9009\u4e00\u4e2a\u95e8\u9762\uff08\u62bd\u8c61\u5c42\uff09\u3001\u53f3\u8fb9\u6765\u9009\u4e00\u4e2a\u5b9e\u73b0\uff1b \u65e5\u5fd7\u95e8\u9762\uff1a SLF4J\uff1b \u65e5\u5fd7\u5b9e\u73b0\uff1aLogback\uff1b SpringBoot\uff1a\u5e95\u5c42\u662fSpring\u6846\u67b6\uff0cSpring\u6846\u67b6\u9ed8\u8ba4\u662f\u7528JCL\uff1b\u2018 \u200b SpringBoot\u9009\u7528 SLF4j\u548clogback\uff1b","title":"1\u3001\u65e5\u5fd7\u6846\u67b6"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#2slf4j","text":"","title":"2\u3001SLF4j\u4f7f\u7528"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#1slf4j-httpswwwslf4jorg","text":"\u4ee5\u540e\u5f00\u53d1\u7684\u65f6\u5019\uff0c\u65e5\u5fd7\u8bb0\u5f55\u65b9\u6cd5\u7684\u8c03\u7528\uff0c\u4e0d\u5e94\u8be5\u6765\u76f4\u63a5\u8c03\u7528\u65e5\u5fd7\u7684\u5b9e\u73b0\u7c7b\uff0c\u800c\u662f\u8c03\u7528\u65e5\u5fd7\u62bd\u8c61\u5c42\u91cc\u9762\u7684\u65b9\u6cd5\uff1b \u7ed9\u7cfb\u7edf\u91cc\u9762\u5bfc\u5165slf4j\u7684jar\u548c logback\u7684\u5b9e\u73b0jar import org.slf4j.Logger ; import org.slf4j.LoggerFactory ; public class HelloWorld { public static void main ( String [] args ) { Logger logger = LoggerFactory . getLogger ( HelloWorld . class ); logger . info ( \"Hello World\" ); } } \u56fe\u793a\uff1b \u6bcf\u4e00\u4e2a\u65e5\u5fd7\u7684\u5b9e\u73b0\u6846\u67b6\u90fd\u6709\u81ea\u5df1\u7684\u914d\u7f6e\u6587\u4ef6\u3002\u4f7f\u7528slf4j\u4ee5\u540e\uff0c \u914d\u7f6e\u6587\u4ef6\u8fd8\u662f\u505a\u6210\u65e5\u5fd7\u5b9e\u73b0\u6846\u67b6\u81ea\u5df1\u672c\u8eab\u7684\u914d\u7f6e\u6587\u4ef6\uff1b","title":"1\u3001\u5982\u4f55\u5728\u7cfb\u7edf\u4e2d\u4f7f\u7528SLF4j   https://www.slf4j.org"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#2_6","text":"a\uff08slf4j+logback\uff09: Spring\uff08commons-logging\uff09\u3001Hibernate\uff08jboss-logging\uff09\u3001MyBatis\u3001xxxx \u7edf\u4e00\u65e5\u5fd7\u8bb0\u5f55\uff0c\u5373\u4f7f\u662f\u522b\u7684\u6846\u67b6\u548c\u6211\u4e00\u8d77\u7edf\u4e00\u4f7f\u7528slf4j\u8fdb\u884c\u8f93\u51fa\uff1f \u5982\u4f55\u8ba9\u7cfb\u7edf\u4e2d\u6240\u6709\u7684\u65e5\u5fd7\u90fd\u7edf\u4e00\u5230slf4j\uff1b 1\u3001\u5c06\u7cfb\u7edf\u4e2d\u5176\u4ed6\u65e5\u5fd7\u6846\u67b6\u5148\u6392\u9664\u51fa\u53bb\uff1b 2\u3001\u7528\u4e2d\u95f4\u5305\u6765\u66ff\u6362\u539f\u6709\u7684\u65e5\u5fd7\u6846\u67b6\uff1b 3\u3001\u6211\u4eec\u5bfc\u5165slf4j\u5176\u4ed6\u7684\u5b9e\u73b0","title":"2\u3001\u9057\u7559\u95ee\u9898"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#3springboot","text":"<dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter </artifactId> </dependency> SpringBoot\u4f7f\u7528\u5b83\u6765\u505a\u65e5\u5fd7\u529f\u80fd\uff1b <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-logging </artifactId> </dependency> \u5e95\u5c42\u4f9d\u8d56\u5173\u7cfb \u603b\u7ed3\uff1a \u200b 1\uff09\u3001SpringBoot\u5e95\u5c42\u4e5f\u662f\u4f7f\u7528slf4j+logback\u7684\u65b9\u5f0f\u8fdb\u884c\u65e5\u5fd7\u8bb0\u5f55 \u200b 2\uff09\u3001SpringBoot\u4e5f\u628a\u5176\u4ed6\u7684\u65e5\u5fd7\u90fd\u66ff\u6362\u6210\u4e86slf4j\uff1b \u200b 3\uff09\u3001\u4e2d\u95f4\u66ff\u6362\u5305\uff1f @SuppressWarnings ( \"rawtypes\" ) public abstract class LogFactory { static String UNSUPPORTED_OPERATION_IN_JCL_OVER_SLF4J = \"http://www.slf4j.org/codes.html#unsupported_operation_in_jcl_over_slf4j\" ; static LogFactory logFactory = new SLF4JLogFactory (); \u200b 4\uff09\u3001\u5982\u679c\u6211\u4eec\u8981\u5f15\u5165\u5176\u4ed6\u6846\u67b6\uff1f\u4e00\u5b9a\u8981\u628a\u8fd9\u4e2a\u6846\u67b6\u7684\u9ed8\u8ba4\u65e5\u5fd7\u4f9d\u8d56\u79fb\u9664\u6389\uff1f \u200b Spring\u6846\u67b6\u7528\u7684\u662fcommons-logging\uff1b <dependency> <groupId> org.springframework </groupId> <artifactId> spring-core </artifactId> <exclusions> <exclusion> <groupId> commons-logging </groupId> <artifactId> commons-logging </artifactId> </exclusion> </exclusions> </dependency> SpringBoot\u80fd\u81ea\u52a8\u9002\u914d\u6240\u6709\u7684\u65e5\u5fd7\uff0c\u800c\u4e14\u5e95\u5c42\u4f7f\u7528slf4j+logback\u7684\u65b9\u5f0f\u8bb0\u5f55\u65e5\u5fd7\uff0c\u5f15\u5165\u5176\u4ed6\u6846\u67b6\u7684\u65f6\u5019\uff0c\u53ea\u9700\u8981\u628a\u8fd9\u4e2a\u6846\u67b6\u4f9d\u8d56\u7684\u65e5\u5fd7\u6846\u67b6\u6392\u9664\u6389\u5373\u53ef\uff1b","title":"3\u3001SpringBoot\u65e5\u5fd7\u5173\u7cfb"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#4_1","text":"","title":"4\u3001\u65e5\u5fd7\u4f7f\u7528\uff1b"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#1_6","text":"SpringBoot\u9ed8\u8ba4\u5e2e\u6211\u4eec\u914d\u7f6e\u597d\u4e86\u65e5\u5fd7\uff1b //\u8bb0\u5f55\u5668 Logger logger = LoggerFactory . getLogger ( getClass ()); @Test public void contextLoads () { //System.out.println(); //\u65e5\u5fd7\u7684\u7ea7\u522b\uff1b //\u7531\u4f4e\u5230\u9ad8 trace<debug<info<warn<error //\u53ef\u4ee5\u8c03\u6574\u8f93\u51fa\u7684\u65e5\u5fd7\u7ea7\u522b\uff1b\u65e5\u5fd7\u5c31\u53ea\u4f1a\u5728\u8fd9\u4e2a\u7ea7\u522b\u4ee5\u4ee5\u540e\u7684\u9ad8\u7ea7\u522b\u751f\u6548 logger . trace ( \"\u8fd9\u662ftrace\u65e5\u5fd7...\" ); logger . debug ( \"\u8fd9\u662fdebug\u65e5\u5fd7...\" ); //SpringBoot\u9ed8\u8ba4\u7ed9\u6211\u4eec\u4f7f\u7528\u7684\u662finfo\u7ea7\u522b\u7684\uff0c\u6ca1\u6709\u6307\u5b9a\u7ea7\u522b\u7684\u5c31\u7528SpringBoot\u9ed8\u8ba4\u89c4\u5b9a\u7684\u7ea7\u522b\uff1broot\u7ea7\u522b logger . info ( \"\u8fd9\u662finfo\u65e5\u5fd7...\" ); logger . warn ( \"\u8fd9\u662fwarn\u65e5\u5fd7...\" ); logger . error ( \"\u8fd9\u662ferror\u65e5\u5fd7...\" ); } \u65e5\u5fd7\u8f93\u51fa\u683c\u5f0f\uff1a %d\u8868\u793a\u65e5\u671f\u65f6\u95f4\uff0c %thread\u8868\u793a\u7ebf\u7a0b\u540d\uff0c %-5level\uff1a\u7ea7\u522b\u4ece\u5de6\u663e\u793a5\u4e2a\u5b57\u7b26\u5bbd\u5ea6 %logger{50} \u8868\u793alogger\u540d\u5b57\u6700\u957f50\u4e2a\u5b57\u7b26\uff0c\u5426\u5219\u6309\u7167\u53e5\u70b9\u5206\u5272\u3002 %msg\uff1a\u65e5\u5fd7\u6d88\u606f\uff0c %n\u662f\u6362\u884c\u7b26 --> %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n SpringBoot\u4fee\u6539\u65e5\u5fd7\u7684\u9ed8\u8ba4\u914d\u7f6e logging.level.com.atguigu = trace #logging.path= # \u4e0d\u6307\u5b9a\u8def\u5f84\u5728\u5f53\u524d\u9879\u76ee\u4e0b\u751f\u6210springboot.log\u65e5\u5fd7 # \u53ef\u4ee5\u6307\u5b9a\u5b8c\u6574\u7684\u8def\u5f84\uff1b #logging.file=G:/springboot.log # \u5728\u5f53\u524d\u78c1\u76d8\u7684\u6839\u8def\u5f84\u4e0b\u521b\u5efaspring\u6587\u4ef6\u5939\u548c\u91cc\u9762\u7684log\u6587\u4ef6\u5939\uff1b\u4f7f\u7528 spring.log \u4f5c\u4e3a\u9ed8\u8ba4\u6587\u4ef6 logging.path = /spring/log # \u5728\u63a7\u5236\u53f0\u8f93\u51fa\u7684\u65e5\u5fd7\u7684\u683c\u5f0f logging.pattern.console = %d{yyyy-MM-dd} [%thread] %-5level %logger{50} - %msg%n # \u6307\u5b9a\u6587\u4ef6\u4e2d\u65e5\u5fd7\u8f93\u51fa\u7684\u683c\u5f0f logging.pattern.file = %d{yyyy-MM-dd} === [%thread] === %-5level === %logger{50} ==== %msg%n logging.file logging.path Example Description (none) (none) \u53ea\u5728\u63a7\u5236\u53f0\u8f93\u51fa \u6307\u5b9a\u6587\u4ef6\u540d (none) my.log \u8f93\u51fa\u65e5\u5fd7\u5230my.log\u6587\u4ef6 (none) \u6307\u5b9a\u76ee\u5f55 /var/log \u8f93\u51fa\u5230\u6307\u5b9a\u76ee\u5f55\u7684 spring.log \u6587\u4ef6\u4e2d","title":"1\u3001\u9ed8\u8ba4\u914d\u7f6e"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#2_7","text":"\u7ed9\u7c7b\u8def\u5f84\u4e0b\u653e\u4e0a\u6bcf\u4e2a\u65e5\u5fd7\u6846\u67b6\u81ea\u5df1\u7684\u914d\u7f6e\u6587\u4ef6\u5373\u53ef\uff1bSpringBoot\u5c31\u4e0d\u4f7f\u7528\u4ed6\u9ed8\u8ba4\u914d\u7f6e\u7684\u4e86 Logging System Customization Logback logback-spring.xml , logback-spring.groovy , logback.xml or logback.groovy Log4j2 log4j2-spring.xml or log4j2.xml JDK (Java Util Logging) logging.properties logback.xml\uff1a\u76f4\u63a5\u5c31\u88ab\u65e5\u5fd7\u6846\u67b6\u8bc6\u522b\u4e86\uff1b logback-spring.xml \uff1a\u65e5\u5fd7\u6846\u67b6\u5c31\u4e0d\u76f4\u63a5\u52a0\u8f7d\u65e5\u5fd7\u7684\u914d\u7f6e\u9879\uff0c\u7531SpringBoot\u89e3\u6790\u65e5\u5fd7\u914d\u7f6e\uff0c\u53ef\u4ee5\u4f7f\u7528SpringBoot\u7684\u9ad8\u7ea7Profile\u529f\u80fd <springProfile name= \"staging\" > <!-- configuration to be enabled when the \"staging\" profile is active --> \u53ef\u4ee5\u6307\u5b9a\u67d0\u6bb5\u914d\u7f6e\u53ea\u5728\u67d0\u4e2a\u73af\u5883\u4e0b\u751f\u6548 </springProfile> \u5982\uff1a <appender name= \"stdout\" class= \"ch.qos.logback.core.ConsoleAppender\" > <!-- \u65e5\u5fd7\u8f93\u51fa\u683c\u5f0f\uff1a %d\u8868\u793a\u65e5\u671f\u65f6\u95f4\uff0c %thread\u8868\u793a\u7ebf\u7a0b\u540d\uff0c %-5level\uff1a\u7ea7\u522b\u4ece\u5de6\u663e\u793a5\u4e2a\u5b57\u7b26\u5bbd\u5ea6 %logger{50} \u8868\u793alogger\u540d\u5b57\u6700\u957f50\u4e2a\u5b57\u7b26\uff0c\u5426\u5219\u6309\u7167\u53e5\u70b9\u5206\u5272\u3002 %msg\uff1a\u65e5\u5fd7\u6d88\u606f\uff0c %n\u662f\u6362\u884c\u7b26 --> <layout class= \"ch.qos.logback.classic.PatternLayout\" > <springProfile name= \"dev\" > <pattern> %d{yyyy-MM-dd HH:mm:ss.SSS} ----> [%thread] ---> %-5level %logger{50} - %msg%n </pattern> </springProfile> <springProfile name= \"!dev\" > <pattern> %d{yyyy-MM-dd HH:mm:ss.SSS} ==== [%thread] ==== %-5level %logger{50} - %msg%n </pattern> </springProfile> </layout> </appender> \u5982\u679c\u4f7f\u7528logback.xml\u4f5c\u4e3a\u65e5\u5fd7\u914d\u7f6e\u6587\u4ef6\uff0c\u8fd8\u8981\u4f7f\u7528profile\u529f\u80fd\uff0c\u4f1a\u6709\u4ee5\u4e0b\u9519\u8bef no applicable action for [springProfile]","title":"2\u3001\u6307\u5b9a\u914d\u7f6e"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#5_1","text":"\u53ef\u4ee5\u6309\u7167slf4j\u7684\u65e5\u5fd7\u9002\u914d\u56fe\uff0c\u8fdb\u884c\u76f8\u5173\u7684\u5207\u6362\uff1b slf4j+log4j\u7684\u65b9\u5f0f\uff1b <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-web </artifactId> <exclusions> <exclusion> <artifactId> logback-classic </artifactId> <groupId> ch.qos.logback </groupId> </exclusion> <exclusion> <artifactId> log4j-over-slf4j </artifactId> <groupId> org.slf4j </groupId> </exclusion> </exclusions> </dependency> <dependency> <groupId> org.slf4j </groupId> <artifactId> slf4j-log4j12 </artifactId> </dependency> \u5207\u6362\u4e3alog4j2 <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-web </artifactId> <exclusions> <exclusion> <artifactId> spring-boot-starter-logging </artifactId> <groupId> org.springframework.boot </groupId> </exclusion> </exclusions> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-log4j2 </artifactId> </dependency>","title":"5\u3001\u5207\u6362\u65e5\u5fd7\u6846\u67b6"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#web","text":"","title":"\u56db\u3001Web\u5f00\u53d1"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#1_7","text":"\u4f7f\u7528SpringBoot\uff1b 1\uff09\u3001\u521b\u5efaSpringBoot\u5e94\u7528\uff0c\u9009\u4e2d\u6211\u4eec\u9700\u8981\u7684\u6a21\u5757\uff1b 2\uff09\u3001SpringBoot\u5df2\u7ecf\u9ed8\u8ba4\u5c06\u8fd9\u4e9b\u573a\u666f\u914d\u7f6e\u597d\u4e86\uff0c\u53ea\u9700\u8981\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u6307\u5b9a\u5c11\u91cf\u914d\u7f6e\u5c31\u53ef\u4ee5\u8fd0\u884c\u8d77\u6765 3\uff09\u3001\u81ea\u5df1\u7f16\u5199\u4e1a\u52a1\u4ee3\u7801\uff1b \u81ea\u52a8\u914d\u7f6e\u539f\u7406\uff1f \u8fd9\u4e2a\u573a\u666fSpringBoot\u5e2e\u6211\u4eec\u914d\u7f6e\u4e86\u4ec0\u4e48\uff1f\u80fd\u4e0d\u80fd\u4fee\u6539\uff1f\u80fd\u4fee\u6539\u54ea\u4e9b\u914d\u7f6e\uff1f\u80fd\u4e0d\u80fd\u6269\u5c55\uff1fxxx xxxxAutoConfiguration\uff1a\u5e2e\u6211\u4eec\u7ed9\u5bb9\u5668\u4e2d\u81ea\u52a8\u914d\u7f6e\u7ec4\u4ef6\uff1b xxxxProperties:\u914d\u7f6e\u7c7b\u6765\u5c01\u88c5\u914d\u7f6e\u6587\u4ef6\u7684\u5185\u5bb9\uff1b","title":"1\u3001\u7b80\u4ecb"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#2springboot","text":"@ConfigurationProperties ( prefix = \"spring.resources\" , ignoreUnknownFields = false ) public class ResourceProperties implements ResourceLoaderAware { //\u53ef\u4ee5\u8bbe\u7f6e\u548c\u9759\u6001\u8d44\u6e90\u6709\u5173\u7684\u53c2\u6570\uff0c\u7f13\u5b58\u65f6\u95f4\u7b49 WebMvcAuotConfiguration \uff1a @Override public void addResourceHandlers ( ResourceHandlerRegistry registry ) { if ( ! this . resourceProperties . isAddMappings ()) { logger . debug ( \"Default resource handling disabled\" ); return ; } Integer cachePeriod = this . resourceProperties . getCachePeriod (); if ( ! registry . hasMappingForPattern ( \"/webjars/**\" )) { customizeResourceHandlerRegistration ( registry . addResourceHandler ( \"/webjars/**\" ) . addResourceLocations ( \"classpath:/META-INF/resources/webjars/\" ) . setCachePeriod ( cachePeriod )); } String staticPathPattern = this . mvcProperties . getStaticPathPattern (); //\u9759\u6001\u8d44\u6e90\u6587\u4ef6\u5939\u6620\u5c04 if ( ! registry . hasMappingForPattern ( staticPathPattern )) { customizeResourceHandlerRegistration ( registry . addResourceHandler ( staticPathPattern ) . addResourceLocations ( this . resourceProperties . getStaticLocations ()) . setCachePeriod ( cachePeriod )); } } //\u914d\u7f6e\u6b22\u8fce\u9875\u6620\u5c04 @Bean public WelcomePageHandlerMapping welcomePageHandlerMapping ( ResourceProperties resourceProperties ) { return new WelcomePageHandlerMapping ( resourceProperties . getWelcomePage (), this . mvcProperties . getStaticPathPattern ()); } //\u914d\u7f6e\u559c\u6b22\u7684\u56fe\u6807 @Configuration @ConditionalOnProperty ( value = \"spring.mvc.favicon.enabled\" , matchIfMissing = true ) public static class FaviconConfiguration { private final ResourceProperties resourceProperties ; public FaviconConfiguration ( ResourceProperties resourceProperties ) { this . resourceProperties = resourceProperties ; } @Bean public SimpleUrlHandlerMapping faviconHandlerMapping () { SimpleUrlHandlerMapping mapping = new SimpleUrlHandlerMapping (); mapping . setOrder ( Ordered . HIGHEST_PRECEDENCE + 1 ); //\u6240\u6709 **/favicon.ico mapping . setUrlMap ( Collections . singletonMap ( \"**/favicon.ico\" , faviconRequestHandler ())); return mapping ; } @Bean public ResourceHttpRequestHandler faviconRequestHandler () { ResourceHttpRequestHandler requestHandler = new ResourceHttpRequestHandler (); requestHandler . setLocations ( this . resourceProperties . getFaviconLocations ()); return requestHandler ; } } 1\uff09\u3001\u6240\u6709 /webjars/** \uff0c\u90fd\u53bb classpath:/META-INF/resources/webjars/ \u627e\u8d44\u6e90\uff1b \u200b webjars\uff1a\u4ee5jar\u5305\u7684\u65b9\u5f0f\u5f15\u5165\u9759\u6001\u8d44\u6e90\uff1b http://www.webjars.org/ localhost:8080/webjars/jquery/3.3.1/jquery.js <!--\u5f15\u5165jquery-webjar--> \u5728\u8bbf\u95ee\u7684\u65f6\u5019\u53ea\u9700\u8981\u5199webjars\u4e0b\u9762\u8d44\u6e90\u7684\u540d\u79f0\u5373\u53ef <dependency> <groupId> org.webjars </groupId> <artifactId> jquery </artifactId> <version> 3.3.1 </version> </dependency> 2\uff09\u3001\"/**\" \u8bbf\u95ee\u5f53\u524d\u9879\u76ee\u7684\u4efb\u4f55\u8d44\u6e90\uff0c\u90fd\u53bb\uff08\u9759\u6001\u8d44\u6e90\u7684\u6587\u4ef6\u5939\uff09\u627e\u6620\u5c04 \"classpath:/META-INF/resources/\", \"classpath:/resources/\", \"classpath:/static/\", \"classpath:/public/\" \"/\"\uff1a\u5f53\u524d\u9879\u76ee\u7684\u6839\u8def\u5f84 localhost:8080/abc === \u53bb\u9759\u6001\u8d44\u6e90\u6587\u4ef6\u5939\u91cc\u9762\u627eabc 3\uff09\u3001\u6b22\u8fce\u9875\uff1b \u9759\u6001\u8d44\u6e90\u6587\u4ef6\u5939\u4e0b\u7684\u6240\u6709index.html\u9875\u9762\uff1b\u88ab\"/**\"\u6620\u5c04\uff1b \u200b localhost:8080/ \u627eindex\u9875\u9762 4\uff09\u3001\u6240\u6709\u7684 **/favicon.ico \u90fd\u662f\u5728\u9759\u6001\u8d44\u6e90\u6587\u4ef6\u4e0b\u627e\uff1b","title":"2\u3001SpringBoot\u5bf9\u9759\u6001\u8d44\u6e90\u7684\u6620\u5c04\u89c4\u5219\uff1b"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#3_3","text":"JSP\u3001Velocity\u3001Freemarker\u3001Thymeleaf SpringBoot\u63a8\u8350\u7684Thymeleaf\uff1b \u8bed\u6cd5\u66f4\u7b80\u5355\uff0c\u529f\u80fd\u66f4\u5f3a\u5927\uff1b","title":"3\u3001\u6a21\u677f\u5f15\u64ce"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#1thymeleaf","text":"<dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-thymeleaf </artifactId> 2.1.6 </dependency> \u5207\u6362thymeleaf\u7248\u672c <properties> <thymeleaf.version> 3.0.9.RELEASE </thymeleaf.version> <!-- \u5e03\u5c40\u529f\u80fd\u7684\u652f\u6301\u7a0b\u5e8f thymeleaf3\u4e3b\u7a0b\u5e8f layout2\u4ee5\u4e0a\u7248\u672c --> <!-- thymeleaf2 layout1--> <thymeleaf-layout-dialect.version> 2.2.2 </thymeleaf-layout-dialect.version> </properties>","title":"1\u3001\u5f15\u5165thymeleaf\uff1b"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#2thymeleaf","text":"@ConfigurationProperties ( prefix = \"spring.thymeleaf\" ) public class ThymeleafProperties { private static final Charset DEFAULT_ENCODING = Charset . forName ( \"UTF-8\" ); private static final MimeType DEFAULT_CONTENT_TYPE = MimeType . valueOf ( \"text/html\" ); public static final String DEFAULT_PREFIX = \"classpath:/templates/\" ; public static final String DEFAULT_SUFFIX = \".html\" ; // \u53ea\u8981\u6211\u4eec\u628aHTML\u9875\u9762\u653e\u5728classpath:/templates/\uff0cthymeleaf\u5c31\u80fd\u81ea\u52a8\u6e32\u67d3\uff1b \u4f7f\u7528\uff1a 1\u3001\u5bfc\u5165thymeleaf\u7684\u540d\u79f0\u7a7a\u95f4 <html lang= \"en\" xmlns:th= \"http://www.thymeleaf.org\" > 2\u3001\u4f7f\u7528thymeleaf\u8bed\u6cd5\uff1b <!DOCTYPE html> < html lang = \"en\" xmlns:th = \"http://www.thymeleaf.org\" > < head > < meta charset = \"UTF-8\" > < title > Title </ title > </ head > < body > < h1 > \u6210\u529f\uff01 </ h1 > <!--th:text \u5c06div\u91cc\u9762\u7684\u6587\u672c\u5185\u5bb9\u8bbe\u7f6e\u4e3a --> < div th:text = \"${hello}\" > \u8fd9\u662f\u663e\u793a\u6b22\u8fce\u4fe1\u606f </ div > </ body > </ html >","title":"2\u3001Thymeleaf\u4f7f\u7528"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#3_4","text":"1\uff09\u3001th:text\uff1b\u6539\u53d8\u5f53\u524d\u5143\u7d20\u91cc\u9762\u7684\u6587\u672c\u5185\u5bb9\uff1b \u200b th\uff1a\u4efb\u610fhtml\u5c5e\u6027\uff1b\u6765\u66ff\u6362\u539f\u751f\u5c5e\u6027\u7684\u503c 2\uff09\u3001\u8868\u8fbe\u5f0f\uff1f Simple expressions : \uff08\u8868\u8fbe\u5f0f\u8bed\u6cd5\uff09 Variable Expressions : ${...}\uff1a\u83b7\u53d6\u53d8\u91cf\u503c\uff1bOGNL\uff1b 1\uff09\u3001\u83b7\u53d6\u5bf9\u8c61\u7684\u5c5e\u6027\u3001\u8c03\u7528\u65b9\u6cd5 2\uff09\u3001\u4f7f\u7528\u5185\u7f6e\u7684\u57fa\u672c\u5bf9\u8c61\uff1a #ctx : the context object. #vars: the context variables. #locale : the context locale. #request : (only in Web Contexts) the HttpServletRequest object. #response : (only in Web Contexts) the HttpServletResponse object. #session : (only in Web Contexts) the HttpSession object. #servletContext : (only in Web Contexts) the ServletContext object. ${session.foo} 3\uff09\u3001\u5185\u7f6e\u7684\u4e00\u4e9b\u5de5\u5177\u5bf9\u8c61\uff1a #execInfo : information about the template being processed. #messages : methods for obtaining externalized messages inside variables expressions, in the same way as they would be obtained using #{\u2026} syntax. #uris : methods for escaping parts of URLs/URIs #conversions : methods for executing the configured conversion service (if any). #dates : methods for java.util.Date objects: formatting, component extraction, etc. #calendars : analogous to #dates , but for java.util.Calendar objects. #numbers : methods for formatting numeric objects. #strings : methods for String objects: contains, startsWith, prepending/appending, etc. #objects : methods for objects in general. #bools : methods for boolean evaluation. #arrays : methods for arrays. #lists : methods for lists. #sets : methods for sets. #maps : methods for maps. #aggregates : methods for creating aggregates on arrays or collections. #ids : methods for dealing with id attributes that might be repeated (for example, as a result of an iteration). Selection Variable Expressions : *{...}\uff1a\u9009\u62e9\u8868\u8fbe\u5f0f\uff1a\u548c${}\u5728\u529f\u80fd\u4e0a\u662f\u4e00\u6837\uff1b \u8865\u5145\uff1a\u914d\u5408 th : object=\"${session.user}\uff1a <div th : object=\"${session.user}\"> <p>Name : <span th:text=\"*{firstName}\">Sebastian</span>.</p> <p>Surname : <span th:text=\"*{lastName}\">Pepper</span>.</p> <p>Nationality : <span th:text=\"*{nationality}\">Saturn</span>.</p> </div> Message Expressions : #{...}\uff1a\u83b7\u53d6\u56fd\u9645\u5316\u5185\u5bb9 Link URL Expressions : @{...}\uff1a\u5b9a\u4e49URL\uff1b @{/order/process(execId = ${execId},execType='FAST')} Fragment Expressions : ~{...}\uff1a\u7247\u6bb5\u5f15\u7528\u8868\u8fbe\u5f0f <div th : insert=\"~{commons :: main}\">...</div> Literals\uff08\u5b57\u9762\u91cf\uff09 Text literals : 'one text' , 'Another one!' ,\u2026 Number literals : 0 , 34 , 3.0 , 12.3 ,\u2026 Boolean literals : true , false Null literal : null Literal tokens : one , sometext , main ,\u2026 Text operations : \uff08\u6587\u672c\u64cd\u4f5c\uff09 String concatenation : + Literal substitutions : |The name is ${name}| Arithmetic operations : \uff08\u6570\u5b66\u8fd0\u7b97\uff09 Binary operators : + , - , * , / , % Minus sign (unary operator) : - Boolean operations : \uff08\u5e03\u5c14\u8fd0\u7b97\uff09 Binary operators : and , or Boolean negation (unary operator) : ! , not Comparisons and equality : \uff08\u6bd4\u8f83\u8fd0\u7b97\uff09 Comparators : > , < , >= , <= ( gt , lt , ge , le ) Equality operators : == , != ( eq , ne ) Conditional operators : \u6761\u4ef6\u8fd0\u7b97\uff08\u4e09\u5143\u8fd0\u7b97\u7b26\uff09 If-then : (if) ? (then) If-then-else : (if) ? (then) : (else) Default : (value) ?: (defaultvalue) Special tokens : No-Operation : _","title":"3\u3001\u8bed\u6cd5\u89c4\u5219"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#4springmvc","text":"https://docs.spring.io/spring-boot/docs/1.5.10.RELEASE/reference/htmlsingle/#boot-features-developing-web-applications","title":"4\u3001SpringMVC\u81ea\u52a8\u914d\u7f6e"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#1-spring-mvc-auto-configuration","text":"Spring Boot \u81ea\u52a8\u914d\u7f6e\u597d\u4e86SpringMVC \u4ee5\u4e0b\u662fSpringBoot\u5bf9SpringMVC\u7684\u9ed8\u8ba4\u914d\u7f6e: \uff08WebMvcAutoConfiguration\uff09 Inclusion of ContentNegotiatingViewResolver and BeanNameViewResolver beans. \u81ea\u52a8\u914d\u7f6e\u4e86ViewResolver\uff08\u89c6\u56fe\u89e3\u6790\u5668\uff1a\u6839\u636e\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u5f97\u5230\u89c6\u56fe\u5bf9\u8c61\uff08View\uff09\uff0c\u89c6\u56fe\u5bf9\u8c61\u51b3\u5b9a\u5982\u4f55\u6e32\u67d3\uff08\u8f6c\u53d1\uff1f\u91cd\u5b9a\u5411\uff1f\uff09\uff09 ContentNegotiatingViewResolver\uff1a\u7ec4\u5408\u6240\u6709\u7684\u89c6\u56fe\u89e3\u6790\u5668\u7684\uff1b \u5982\u4f55\u5b9a\u5236\uff1a\u6211\u4eec\u53ef\u4ee5\u81ea\u5df1\u7ed9\u5bb9\u5668\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u89c6\u56fe\u89e3\u6790\u5668\uff1b\u81ea\u52a8\u7684\u5c06\u5176\u7ec4\u5408\u8fdb\u6765\uff1b Support for serving static resources, including support for WebJars (see below).\u9759\u6001\u8d44\u6e90\u6587\u4ef6\u5939\u8def\u5f84,webjars Static index.html support. \u9759\u6001\u9996\u9875\u8bbf\u95ee Custom Favicon support (see below). favicon.ico \u200b \u81ea\u52a8\u6ce8\u518c\u4e86 of Converter , GenericConverter , Formatter beans. Converter\uff1a\u8f6c\u6362\u5668\uff1b public String hello(User user)\uff1a\u7c7b\u578b\u8f6c\u6362\u4f7f\u7528Converter Formatter \u683c\u5f0f\u5316\u5668\uff1b 2017.12.17===Date\uff1b @Bean @ConditionalOnProperty ( prefix = \"spring.mvc\" , name = \"date-format\" ) //\u5728\u6587\u4ef6\u4e2d\u914d\u7f6e\u65e5\u671f\u683c\u5f0f\u5316\u7684\u89c4\u5219 public Formatter < Date > dateFormatter () { return new DateFormatter ( this . mvcProperties . getDateFormat ()); //\u65e5\u671f\u683c\u5f0f\u5316\u7ec4\u4ef6 } \u200b \u81ea\u5df1\u6dfb\u52a0\u7684\u683c\u5f0f\u5316\u5668\u8f6c\u6362\u5668\uff0c\u6211\u4eec\u53ea\u9700\u8981\u653e\u5728\u5bb9\u5668\u4e2d\u5373\u53ef Support for HttpMessageConverters (see below). HttpMessageConverter\uff1aSpringMVC\u7528\u6765\u8f6c\u6362Http\u8bf7\u6c42\u548c\u54cd\u5e94\u7684\uff1bUser---Json\uff1b HttpMessageConverters \u662f\u4ece\u5bb9\u5668\u4e2d\u786e\u5b9a\uff1b\u83b7\u53d6\u6240\u6709\u7684HttpMessageConverter\uff1b \u81ea\u5df1\u7ed9\u5bb9\u5668\u4e2d\u6dfb\u52a0HttpMessageConverter\uff0c\u53ea\u9700\u8981\u5c06\u81ea\u5df1\u7684\u7ec4\u4ef6\u6ce8\u518c\u5bb9\u5668\u4e2d\uff08@Bean,@Component\uff09 \u200b Automatic registration of MessageCodesResolver (see below).\u5b9a\u4e49\u9519\u8bef\u4ee3\u7801\u751f\u6210\u89c4\u5219 Automatic use of a ConfigurableWebBindingInitializer bean (see below). \u6211\u4eec\u53ef\u4ee5\u914d\u7f6e\u4e00\u4e2aConfigurableWebBindingInitializer\u6765\u66ff\u6362\u9ed8\u8ba4\u7684\uff1b\uff08\u6dfb\u52a0\u5230\u5bb9\u5668\uff09 \u521d\u59cb\u5316WebDataBinder\uff1b \u8bf7\u6c42\u6570\u636e=====JavaBean\uff1b org.springframework.boot.autoconfigure.web\uff1aweb\u7684\u6240\u6709\u81ea\u52a8\u573a\u666f\uff1b If you want to keep Spring Boot MVC features, and you just want to add additional MVC configuration (interceptors, formatters, view controllers etc.) you can add your own @Configuration class of type WebMvcConfigurerAdapter , but without @EnableWebMvc . If you wish to provide custom instances of RequestMappingHandlerMapping , RequestMappingHandlerAdapter or ExceptionHandlerExceptionResolver you can declare a WebMvcRegistrationsAdapter instance providing such components. If you want to take complete control of Spring MVC, you can add your own @Configuration annotated with @EnableWebMvc .","title":"1. Spring MVC auto-configuration"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#2springmvc","text":"<mvc:view-controller path= \"/hello\" view-name= \"success\" /> <mvc:interceptors> <mvc:interceptor> <mvc:mapping path= \"/hello\" /> <bean></bean> </mvc:interceptor> </mvc:interceptors> \u7f16\u5199\u4e00\u4e2a\u914d\u7f6e\u7c7b\uff08@Configuration\uff09\uff0c\u662fWebMvcConfigurerAdapter\u7c7b\u578b\uff1b\u4e0d\u80fd\u6807\u6ce8@EnableWebMvc ; \u65e2\u4fdd\u7559\u4e86\u6240\u6709\u7684\u81ea\u52a8\u914d\u7f6e\uff0c\u4e5f\u80fd\u7528\u6211\u4eec\u6269\u5c55\u7684\u914d\u7f6e\uff1b //\u4f7f\u7528WebMvcConfigurerAdapter\u53ef\u4ee5\u6765\u6269\u5c55SpringMVC\u7684\u529f\u80fd @Configuration public class MyMvcConfig extends WebMvcConfigurerAdapter { @Override public void addViewControllers ( ViewControllerRegistry registry ) { // super.addViewControllers(registry); //\u6d4f\u89c8\u5668\u53d1\u9001 /atguigu \u8bf7\u6c42\u6765\u5230 success registry . addViewController ( \"/atguigu\" ). setViewName ( \"success\" ); } } \u539f\u7406\uff1a \u200b 1\uff09\u3001WebMvcAutoConfiguration\u662fSpringMVC\u7684\u81ea\u52a8\u914d\u7f6e\u7c7b \u200b 2\uff09\u3001\u5728\u505a\u5176\u4ed6\u81ea\u52a8\u914d\u7f6e\u65f6\u4f1a\u5bfc\u5165\uff1b@Import( EnableWebMvcConfiguration .class) @Configuration public static class EnableWebMvcConfiguration extends DelegatingWebMvcConfiguration { private final WebMvcConfigurerComposite configurers = new WebMvcConfigurerComposite (); //\u4ece\u5bb9\u5668\u4e2d\u83b7\u53d6\u6240\u6709\u7684WebMvcConfigurer @Autowired ( required = false ) public void setConfigurers ( List < WebMvcConfigurer > configurers ) { if ( ! CollectionUtils . isEmpty ( configurers )) { this . configurers . addWebMvcConfigurers ( configurers ); //\u4e00\u4e2a\u53c2\u8003\u5b9e\u73b0\uff1b\u5c06\u6240\u6709\u7684WebMvcConfigurer\u76f8\u5173\u914d\u7f6e\u90fd\u6765\u4e00\u8d77\u8c03\u7528\uff1b @Override // public void addViewControllers(ViewControllerRegistry registry) { // for (WebMvcConfigurer delegate : this.delegates) { // delegate.addViewControllers(registry); // } } } } \u200b 3\uff09\u3001\u5bb9\u5668\u4e2d\u6240\u6709\u7684WebMvcConfigurer\u90fd\u4f1a\u4e00\u8d77\u8d77\u4f5c\u7528\uff1b \u200b 4\uff09\u3001\u6211\u4eec\u7684\u914d\u7f6e\u7c7b\u4e5f\u4f1a\u88ab\u8c03\u7528\uff1b \u200b \u6548\u679c\uff1aSpringMVC\u7684\u81ea\u52a8\u914d\u7f6e\u548c\u6211\u4eec\u7684\u6269\u5c55\u914d\u7f6e\u90fd\u4f1a\u8d77\u4f5c\u7528\uff1b","title":"2\u3001\u6269\u5c55SpringMVC"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#3springmvc","text":"SpringBoot\u5bf9SpringMVC\u7684\u81ea\u52a8\u914d\u7f6e\u4e0d\u9700\u8981\u4e86\uff0c\u6240\u6709\u90fd\u662f\u6211\u4eec\u81ea\u5df1\u914d\u7f6e\uff1b\u6240\u6709\u7684SpringMVC\u7684\u81ea\u52a8\u914d\u7f6e\u90fd\u5931\u6548\u4e86 \u6211\u4eec\u9700\u8981\u5728\u914d\u7f6e\u7c7b\u4e2d\u6dfb\u52a0@EnableWebMvc\u5373\u53ef\uff1b //\u4f7f\u7528WebMvcConfigurerAdapter\u53ef\u4ee5\u6765\u6269\u5c55SpringMVC\u7684\u529f\u80fd @EnableWebMvc @Configuration public class MyMvcConfig extends WebMvcConfigurerAdapter { @Override public void addViewControllers ( ViewControllerRegistry registry ) { // super.addViewControllers(registry); //\u6d4f\u89c8\u5668\u53d1\u9001 /atguigu \u8bf7\u6c42\u6765\u5230 success registry . addViewController ( \"/atguigu\" ). setViewName ( \"success\" ); } } \u539f\u7406\uff1a \u4e3a\u4ec0\u4e48@EnableWebMvc\u81ea\u52a8\u914d\u7f6e\u5c31\u5931\u6548\u4e86\uff1b 1\uff09@EnableWebMvc\u7684\u6838\u5fc3 @Import ( DelegatingWebMvcConfiguration . class ) public @interface EnableWebMvc { 2\uff09\u3001 @Configuration public class DelegatingWebMvcConfiguration extends WebMvcConfigurationSupport { 3\uff09\u3001 @Configuration @ConditionalOnWebApplication @ConditionalOnClass ({ Servlet . class , DispatcherServlet . class , WebMvcConfigurerAdapter . class }) //\u5bb9\u5668\u4e2d\u6ca1\u6709\u8fd9\u4e2a\u7ec4\u4ef6\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u81ea\u52a8\u914d\u7f6e\u7c7b\u624d\u751f\u6548 @ConditionalOnMissingBean ( WebMvcConfigurationSupport . class ) @AutoConfigureOrder ( Ordered . HIGHEST_PRECEDENCE + 10 ) @AutoConfigureAfter ({ DispatcherServletAutoConfiguration . class , ValidationAutoConfiguration . class }) public class WebMvcAutoConfiguration { 4\uff09\u3001@EnableWebMvc\u5c06WebMvcConfigurationSupport\u7ec4\u4ef6\u5bfc\u5165\u8fdb\u6765\uff1b 5\uff09\u3001\u5bfc\u5165\u7684WebMvcConfigurationSupport\u53ea\u662fSpringMVC\u6700\u57fa\u672c\u7684\u529f\u80fd\uff1b","title":"3\u3001\u5168\u9762\u63a5\u7ba1SpringMVC\uff1b"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#5springboot","text":"\u6a21\u5f0f\uff1a \u200b 1\uff09\u3001SpringBoot\u5728\u81ea\u52a8\u914d\u7f6e\u5f88\u591a\u7ec4\u4ef6\u7684\u65f6\u5019\uff0c\u5148\u770b\u5bb9\u5668\u4e2d\u6709\u6ca1\u6709\u7528\u6237\u81ea\u5df1\u914d\u7f6e\u7684\uff08@Bean\u3001@Component\uff09\u5982\u679c\u6709\u5c31\u7528\u7528\u6237\u914d\u7f6e\u7684\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u624d\u81ea\u52a8\u914d\u7f6e\uff1b\u5982\u679c\u6709\u4e9b\u7ec4\u4ef6\u53ef\u4ee5\u6709\u591a\u4e2a\uff08ViewResolver\uff09\u5c06\u7528\u6237\u914d\u7f6e\u7684\u548c\u81ea\u5df1\u9ed8\u8ba4\u7684\u7ec4\u5408\u8d77\u6765\uff1b \u200b 2\uff09\u3001\u5728SpringBoot\u4e2d\u4f1a\u6709\u975e\u5e38\u591a\u7684xxxConfigurer\u5e2e\u52a9\u6211\u4eec\u8fdb\u884c\u6269\u5c55\u914d\u7f6e \u200b 3\uff09\u3001\u5728SpringBoot\u4e2d\u4f1a\u6709\u5f88\u591a\u7684xxxCustomizer\u5e2e\u52a9\u6211\u4eec\u8fdb\u884c\u5b9a\u5236\u914d\u7f6e","title":"5\u3001\u5982\u4f55\u4fee\u6539SpringBoot\u7684\u9ed8\u8ba4\u914d\u7f6e"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#6restfulcrud","text":"","title":"6\u3001RestfulCRUD"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#1_8","text":"//\u4f7f\u7528WebMvcConfigurerAdapter\u53ef\u4ee5\u6765\u6269\u5c55SpringMVC\u7684\u529f\u80fd //@EnableWebMvc \u4e0d\u8981\u63a5\u7ba1SpringMVC @Configuration public class MyMvcConfig extends WebMvcConfigurerAdapter { @Override public void addViewControllers ( ViewControllerRegistry registry ) { // super.addViewControllers(registry); //\u6d4f\u89c8\u5668\u53d1\u9001 /atguigu \u8bf7\u6c42\u6765\u5230 success registry . addViewController ( \"/atguigu\" ). setViewName ( \"success\" ); } //\u6240\u6709\u7684WebMvcConfigurerAdapter\u7ec4\u4ef6\u90fd\u4f1a\u4e00\u8d77\u8d77\u4f5c\u7528 @Bean //\u5c06\u7ec4\u4ef6\u6ce8\u518c\u5728\u5bb9\u5668 public WebMvcConfigurerAdapter webMvcConfigurerAdapter (){ WebMvcConfigurerAdapter adapter = new WebMvcConfigurerAdapter () { @Override public void addViewControllers ( ViewControllerRegistry registry ) { registry . addViewController ( \"/\" ). setViewName ( \"login\" ); registry . addViewController ( \"/index.html\" ). setViewName ( \"login\" ); } }; return adapter ; } }","title":"1\uff09\u3001\u9ed8\u8ba4\u8bbf\u95ee\u9996\u9875"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#2_8","text":"1\uff09\u3001\u7f16\u5199\u56fd\u9645\u5316\u914d\u7f6e\u6587\u4ef6\uff1b 2\uff09\u3001\u4f7f\u7528ResourceBundleMessageSource\u7ba1\u7406\u56fd\u9645\u5316\u8d44\u6e90\u6587\u4ef6 3\uff09\u3001\u5728\u9875\u9762\u4f7f\u7528fmt:message\u53d6\u51fa\u56fd\u9645\u5316\u5185\u5bb9 \u6b65\u9aa4\uff1a 1\uff09\u3001\u7f16\u5199\u56fd\u9645\u5316\u914d\u7f6e\u6587\u4ef6\uff0c\u62bd\u53d6\u9875\u9762\u9700\u8981\u663e\u793a\u7684\u56fd\u9645\u5316\u6d88\u606f 2\uff09\u3001SpringBoot\u81ea\u52a8\u914d\u7f6e\u597d\u4e86\u7ba1\u7406\u56fd\u9645\u5316\u8d44\u6e90\u6587\u4ef6\u7684\u7ec4\u4ef6\uff1b @ConfigurationProperties ( prefix = \"spring.messages\" ) public class MessageSourceAutoConfiguration { /** * Comma-separated list of basenames (essentially a fully-qualified classpath * location), each following the ResourceBundle convention with relaxed support for * slash based locations. If it doesn't contain a package qualifier (such as * \"org.mypackage\"), it will be resolved from the classpath root. */ private String basename = \"messages\" ; //\u6211\u4eec\u7684\u914d\u7f6e\u6587\u4ef6\u53ef\u4ee5\u76f4\u63a5\u653e\u5728\u7c7b\u8def\u5f84\u4e0b\u53ebmessages.properties\uff1b @Bean public MessageSource messageSource () { ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource (); if ( StringUtils . hasText ( this . basename )) { //\u8bbe\u7f6e\u56fd\u9645\u5316\u8d44\u6e90\u6587\u4ef6\u7684\u57fa\u7840\u540d\uff08\u53bb\u6389\u8bed\u8a00\u56fd\u5bb6\u4ee3\u7801\u7684\uff09 messageSource . setBasenames ( StringUtils . commaDelimitedListToStringArray ( StringUtils . trimAllWhitespace ( this . basename ))); } if ( this . encoding != null ) { messageSource . setDefaultEncoding ( this . encoding . name ()); } messageSource . setFallbackToSystemLocale ( this . fallbackToSystemLocale ); messageSource . setCacheSeconds ( this . cacheSeconds ); messageSource . setAlwaysUseMessageFormat ( this . alwaysUseMessageFormat ); return messageSource ; } 3\uff09\u3001\u53bb\u9875\u9762\u83b7\u53d6\u56fd\u9645\u5316\u7684\u503c\uff1b <!DOCTYPE html> < html lang = \"en\" xmlns:th = \"http://www.thymeleaf.org\" > < head > < meta http-equiv = \"Content-Type\" content = \"text/html; charset=UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1, shrink-to-fit=no\" > < meta name = \"description\" content = \"\" > < meta name = \"author\" content = \"\" > < title > Signin Template for Bootstrap </ title > <!-- Bootstrap core CSS --> < link href = \"asserts/css/bootstrap.min.css\" th:href = \"@{/webjars/bootstrap/4.0.0/css/bootstrap.css}\" rel = \"stylesheet\" > <!-- Custom styles for this template --> < link href = \"asserts/css/signin.css\" th:href = \"@{/asserts/css/signin.css}\" rel = \"stylesheet\" > </ head > < body class = \"text-center\" > < form class = \"form-signin\" action = \"dashboard.html\" > < img class = \"mb-4\" th:src = \"@{/asserts/img/bootstrap-solid.svg}\" src = \"asserts/img/bootstrap-solid.svg\" alt = \"\" width = \"72\" height = \"72\" > < h1 class = \"h3 mb-3 font-weight-normal\" th:text = \"#{login.tip}\" > Please sign in </ h1 > < label class = \"sr-only\" th:text = \"#{login.username}\" > Username </ label > < input type = \"text\" class = \"form-control\" placeholder = \"Username\" th:placeholder = \"#{login.username}\" required = \"\" autofocus = \"\" > < label class = \"sr-only\" th:text = \"#{login.password}\" > Password </ label > < input type = \"password\" class = \"form-control\" placeholder = \"Password\" th:placeholder = \"#{login.password}\" required = \"\" > < div class = \"checkbox mb-3\" > < label > < input type = \"checkbox\" value = \"remember-me\" /> [[#{login.remember}]] </ label > </ div > < button class = \"btn btn-lg btn-primary btn-block\" type = \"submit\" th:text = \"#{login.btn}\" > Sign in </ button > < p class = \"mt-5 mb-3 text-muted\" > \u00a9 2017-2018 </ p > < a class = \"btn btn-sm\" > \u4e2d\u6587 </ a > < a class = \"btn btn-sm\" > English </ a > </ form > </ body > </ html > \u6548\u679c\uff1a\u6839\u636e\u6d4f\u89c8\u5668\u8bed\u8a00\u8bbe\u7f6e\u7684\u4fe1\u606f\u5207\u6362\u4e86\u56fd\u9645\u5316\uff1b \u539f\u7406\uff1a \u200b \u56fd\u9645\u5316Locale\uff08\u533a\u57df\u4fe1\u606f\u5bf9\u8c61\uff09\uff1bLocaleResolver\uff08\u83b7\u53d6\u533a\u57df\u4fe1\u606f\u5bf9\u8c61\uff09\uff1b @Bean @ConditionalOnMissingBean @ConditionalOnProperty ( prefix = \"spring.mvc\" , name = \"locale\" ) public LocaleResolver localeResolver () { if ( this . mvcProperties . getLocaleResolver () == WebMvcProperties . LocaleResolver . FIXED ) { return new FixedLocaleResolver ( this . mvcProperties . getLocale ()); } AcceptHeaderLocaleResolver localeResolver = new AcceptHeaderLocaleResolver (); localeResolver . setDefaultLocale ( this . mvcProperties . getLocale ()); return localeResolver ; } \u9ed8\u8ba4\u7684\u5c31\u662f\u6839\u636e\u8bf7\u6c42\u5934\u5e26\u6765\u7684\u533a\u57df\u4fe1\u606f\u83b7\u53d6Locale\u8fdb\u884c\u56fd\u9645\u5316 4\uff09\u3001\u70b9\u51fb\u94fe\u63a5\u5207\u6362\u56fd\u9645\u5316 /** * \u53ef\u4ee5\u5728\u8fde\u63a5\u4e0a\u643a\u5e26\u533a\u57df\u4fe1\u606f */ public class MyLocaleResolver implements LocaleResolver { @Override public Locale resolveLocale ( HttpServletRequest request ) { String l = request . getParameter ( \"l\" ); Locale locale = Locale . getDefault (); if ( ! StringUtils . isEmpty ( l )){ String [] split = l . split ( \"_\" ); locale = new Locale ( split [ 0 ] , split [ 1 ] ); } return locale ; } @Override public void setLocale ( HttpServletRequest request , HttpServletResponse response , Locale locale ) { } } @Bean public LocaleResolver localeResolver (){ return new MyLocaleResolver (); } }","title":"2\uff09\u3001\u56fd\u9645\u5316"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#3_5","text":"\u5f00\u53d1\u671f\u95f4\u6a21\u677f\u5f15\u64ce\u9875\u9762\u4fee\u6539\u4ee5\u540e\uff0c\u8981\u5b9e\u65f6\u751f\u6548 1\uff09\u3001\u7981\u7528\u6a21\u677f\u5f15\u64ce\u7684\u7f13\u5b58 # \u7981\u7528\u7f13\u5b58 spring.thymeleaf.cache=false 2\uff09\u3001\u9875\u9762\u4fee\u6539\u5b8c\u6210\u4ee5\u540ectrl+f9\uff1a\u91cd\u65b0\u7f16\u8bd1\uff1b \u767b\u9646\u9519\u8bef\u6d88\u606f\u7684\u663e\u793a < p style = \"color: red\" th:text = \"${msg}\" th:if = \"${not #strings.isEmpty(msg)}\" ></ p >","title":"3\uff09\u3001\u767b\u9646"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#4_2","text":"\u62e6\u622a\u5668 /** * \u767b\u9646\u68c0\u67e5\uff0c */ public class LoginHandlerInterceptor implements HandlerInterceptor { //\u76ee\u6807\u65b9\u6cd5\u6267\u884c\u4e4b\u524d @Override public boolean preHandle ( HttpServletRequest request , HttpServletResponse response , Object handler ) throws Exception { Object user = request . getSession (). getAttribute ( \"loginUser\" ); if ( user == null ){ //\u672a\u767b\u9646\uff0c\u8fd4\u56de\u767b\u9646\u9875\u9762 request . setAttribute ( \"msg\" , \"\u6ca1\u6709\u6743\u9650\u8bf7\u5148\u767b\u9646\" ); request . getRequestDispatcher ( \"/index.html\" ). forward ( request , response ); return false ; } else { //\u5df2\u767b\u9646\uff0c\u653e\u884c\u8bf7\u6c42 return true ; } } @Override public void postHandle ( HttpServletRequest request , HttpServletResponse response , Object handler , ModelAndView modelAndView ) throws Exception { } @Override public void afterCompletion ( HttpServletRequest request , HttpServletResponse response , Object handler , Exception ex ) throws Exception { } } \u6ce8\u518c\u62e6\u622a\u5668 //\u6240\u6709\u7684WebMvcConfigurerAdapter\u7ec4\u4ef6\u90fd\u4f1a\u4e00\u8d77\u8d77\u4f5c\u7528 @Bean //\u5c06\u7ec4\u4ef6\u6ce8\u518c\u5728\u5bb9\u5668 public WebMvcConfigurerAdapter webMvcConfigurerAdapter (){ WebMvcConfigurerAdapter adapter = new WebMvcConfigurerAdapter () { @Override public void addViewControllers ( ViewControllerRegistry registry ) { registry . addViewController ( \"/\" ). setViewName ( \"login\" ); registry . addViewController ( \"/index.html\" ). setViewName ( \"login\" ); registry . addViewController ( \"/main.html\" ). setViewName ( \"dashboard\" ); } //\u6ce8\u518c\u62e6\u622a\u5668 @Override public void addInterceptors ( InterceptorRegistry registry ) { //super.addInterceptors(registry); //\u9759\u6001\u8d44\u6e90\uff1b *.css , *.js //SpringBoot\u5df2\u7ecf\u505a\u597d\u4e86\u9759\u6001\u8d44\u6e90\u6620\u5c04 registry . addInterceptor ( new LoginHandlerInterceptor ()). addPathPatterns ( \"/**\" ) . excludePathPatterns ( \"/index.html\" , \"/\" , \"/user/login\" ); } }; return adapter ; }","title":"4\uff09\u3001\u62e6\u622a\u5668\u8fdb\u884c\u767b\u9646\u68c0\u67e5"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#5crud-","text":"\u5b9e\u9a8c\u8981\u6c42\uff1a 1\uff09\u3001RestfulCRUD\uff1aCRUD\u6ee1\u8db3Rest\u98ce\u683c\uff1b URI\uff1a /\u8d44\u6e90\u540d\u79f0/\u8d44\u6e90\u6807\u8bc6 HTTP\u8bf7\u6c42\u65b9\u5f0f\u533a\u5206\u5bf9\u8d44\u6e90CRUD\u64cd\u4f5c \u666e\u901aCRUD\uff08uri\u6765\u533a\u5206\u64cd\u4f5c\uff09 RestfulCRUD \u67e5\u8be2 getEmp emp---GET \u6dfb\u52a0 addEmp?xxx emp---POST \u4fee\u6539 updateEmp?id=xxx&xxx=xx emp/{id}---PUT \u5220\u9664 deleteEmp?id=1 emp/{id}---DELETE 2\uff09\u3001\u5b9e\u9a8c\u7684\u8bf7\u6c42\u67b6\u6784; \u5b9e\u9a8c\u529f\u80fd \u8bf7\u6c42URI \u8bf7\u6c42\u65b9\u5f0f \u67e5\u8be2\u6240\u6709\u5458\u5de5 emps GET \u67e5\u8be2\u67d0\u4e2a\u5458\u5de5(\u6765\u5230\u4fee\u6539\u9875\u9762) emp/1 GET \u6765\u5230\u6dfb\u52a0\u9875\u9762 emp GET \u6dfb\u52a0\u5458\u5de5 emp POST \u6765\u5230\u4fee\u6539\u9875\u9762\uff08\u67e5\u51fa\u5458\u5de5\u8fdb\u884c\u4fe1\u606f\u56de\u663e\uff09 emp/1 GET \u4fee\u6539\u5458\u5de5 emp PUT \u5220\u9664\u5458\u5de5 emp/1 DELETE 3\uff09\u3001\u5458\u5de5\u5217\u8868\uff1a","title":"5\uff09\u3001CRUD-\u5458\u5de5\u5217\u8868"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#thymeleaf","text":"1\u3001\u62bd\u53d6\u516c\u5171\u7247\u6bb5 < div th:fragment = \"copy\" > &copy; 2011 The Good Thymes Virtual Grocery </ div > 2\u3001\u5f15\u5165\u516c\u5171\u7247\u6bb5 < div th:insert = \"~{footer :: copy}\" ></ div > ~{templatename::selector}\uff1a\u6a21\u677f\u540d::\u9009\u62e9\u5668 ~{templatename::fragmentname}:\u6a21\u677f\u540d::\u7247\u6bb5\u540d 3\u3001\u9ed8\u8ba4\u6548\u679c\uff1a insert\u7684\u516c\u5171\u7247\u6bb5\u5728div\u6807\u7b7e\u4e2d \u5982\u679c\u4f7f\u7528th:insert\u7b49\u5c5e\u6027\u8fdb\u884c\u5f15\u5165\uff0c\u53ef\u4ee5\u4e0d\u7528\u5199~{}\uff1a \u884c\u5185\u5199\u6cd5\u53ef\u4ee5\u52a0\u4e0a\uff1a[[~{}]];[(~{})]\uff1b \u4e09\u79cd\u5f15\u5165\u516c\u5171\u7247\u6bb5\u7684th\u5c5e\u6027\uff1a th:insert \uff1a\u5c06\u516c\u5171\u7247\u6bb5\u6574\u4e2a\u63d2\u5165\u5230\u58f0\u660e\u5f15\u5165\u7684\u5143\u7d20\u4e2d th:replace \uff1a\u5c06\u58f0\u660e\u5f15\u5165\u7684\u5143\u7d20\u66ff\u6362\u4e3a\u516c\u5171\u7247\u6bb5 th:include \uff1a\u5c06\u88ab\u5f15\u5165\u7684\u7247\u6bb5\u7684\u5185\u5bb9\u5305\u542b\u8fdb\u8fd9\u4e2a\u6807\u7b7e\u4e2d < footer th:fragment = \"copy\" > &copy; 2011 The Good Thymes Virtual Grocery </ footer > \u5f15\u5165\u65b9\u5f0f < div th:insert = \"footer :: copy\" ></ div > < div th:replace = \"footer :: copy\" ></ div > < div th:include = \"footer :: copy\" ></ div > \u6548\u679c < div > < footer > &copy; 2011 The Good Thymes Virtual Grocery </ footer > </ div > < footer > &copy; 2011 The Good Thymes Virtual Grocery </ footer > < div > &copy; 2011 The Good Thymes Virtual Grocery </ div > \u5f15\u5165\u7247\u6bb5\u7684\u65f6\u5019\u4f20\u5165\u53c2\u6570\uff1a < nav class = \"col-md-2 d-none d-md-block bg-light sidebar\" id = \"sidebar\" > < div class = \"sidebar-sticky\" > < ul class = \"nav flex-column\" > < li class = \"nav-item\" > < a class = \"nav-link active\" th:class = \"${activeUri=='main.html'?'nav-link active':'nav-link'}\" href = \"#\" th:href = \"@{/main.html}\" > < svg xmlns = \"http://www.w3.org/2000/svg\" width = \"24\" height = \"24\" viewBox = \"0 0 24 24\" fill = \"none\" stroke = \"currentColor\" stroke-width = \"2\" stroke-linecap = \"round\" stroke-linejoin = \"round\" class = \"feather feather-home\" > < path d = \"M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z\" ></ path > < polyline points = \"9 22 9 12 15 12 15 22\" ></ polyline > </ svg > Dashboard < span class = \"sr-only\" > (current) </ span > </ a > </ li > <!--\u5f15\u5165\u4fa7\u8fb9\u680f;\u4f20\u5165\u53c2\u6570--> < div th:replace = \"commons/bar::#sidebar(activeUri='emps')\" ></ div >","title":"thymeleaf\u516c\u5171\u9875\u9762\u5143\u7d20\u62bd\u53d6"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#6crud-","text":"\u6dfb\u52a0\u9875\u9762 < form > < div class = \"form-group\" > < label > LastName </ label > < input type = \"text\" class = \"form-control\" placeholder = \"zhangsan\" > </ div > < div class = \"form-group\" > < label > Email </ label > < input type = \"email\" class = \"form-control\" placeholder = \"zhangsan@atguigu.com\" > </ div > < div class = \"form-group\" > < label > Gender </ label >< br /> < div class = \"form-check form-check-inline\" > < input class = \"form-check-input\" type = \"radio\" name = \"gender\" value = \"1\" > < label class = \"form-check-label\" > \u7537 </ label > </ div > < div class = \"form-check form-check-inline\" > < input class = \"form-check-input\" type = \"radio\" name = \"gender\" value = \"0\" > < label class = \"form-check-label\" > \u5973 </ label > </ div > </ div > < div class = \"form-group\" > < label > department </ label > < select class = \"form-control\" > < option > 1 </ option > < option > 2 </ option > < option > 3 </ option > < option > 4 </ option > < option > 5 </ option > </ select > </ div > < div class = \"form-group\" > < label > Birth </ label > < input type = \"text\" class = \"form-control\" placeholder = \"zhangsan\" > </ div > < button type = \"submit\" class = \"btn btn-primary\" > \u6dfb\u52a0 </ button > </ form > \u63d0\u4ea4\u7684\u6570\u636e\u683c\u5f0f\u4e0d\u5bf9\uff1a\u751f\u65e5\uff1a\u65e5\u671f\uff1b 2017-12-12\uff1b2017/12/12\uff1b2017.12.12\uff1b \u65e5\u671f\u7684\u683c\u5f0f\u5316\uff1bSpringMVC\u5c06\u9875\u9762\u63d0\u4ea4\u7684\u503c\u9700\u8981\u8f6c\u6362\u4e3a\u6307\u5b9a\u7684\u7c7b\u578b; 2017-12-12---Date\uff1b \u7c7b\u578b\u8f6c\u6362\uff0c\u683c\u5f0f\u5316; \u9ed8\u8ba4\u65e5\u671f\u662f\u6309\u7167/\u7684\u65b9\u5f0f\uff1b","title":"6\uff09\u3001CRUD-\u5458\u5de5\u6dfb\u52a0"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#7crud-","text":"\u4fee\u6539\u6dfb\u52a0\u4e8c\u5408\u4e00\u8868\u5355 <!--\u9700\u8981\u533a\u5206\u662f\u5458\u5de5\u4fee\u6539\u8fd8\u662f\u6dfb\u52a0\uff1b--> < form th:action = \"@{/emp}\" method = \"post\" > <!--\u53d1\u9001put\u8bf7\u6c42\u4fee\u6539\u5458\u5de5\u6570\u636e--> <!-- 1\u3001SpringMVC\u4e2d\u914d\u7f6eHiddenHttpMethodFilter;\uff08SpringBoot\u81ea\u52a8\u914d\u7f6e\u597d\u7684\uff09 2\u3001\u9875\u9762\u521b\u5efa\u4e00\u4e2apost\u8868\u5355 3\u3001\u521b\u5efa\u4e00\u4e2ainput\u9879\uff0cname=\"_method\";\u503c\u5c31\u662f\u6211\u4eec\u6307\u5b9a\u7684\u8bf7\u6c42\u65b9\u5f0f --> < input type = \"hidden\" name = \"_method\" value = \"put\" th:if = \"${emp!=null}\" /> < input type = \"hidden\" name = \"id\" th:if = \"${emp!=null}\" th:value = \"${emp.id}\" > < div class = \"form-group\" > < label > LastName </ label > < input name = \"lastName\" type = \"text\" class = \"form-control\" placeholder = \"zhangsan\" th:value = \"${emp!=null}?${emp.lastName}\" > </ div > < div class = \"form-group\" > < label > Email </ label > < input name = \"email\" type = \"email\" class = \"form-control\" placeholder = \"zhangsan@atguigu.com\" th:value = \"${emp!=null}?${emp.email}\" > </ div > < div class = \"form-group\" > < label > Gender </ label >< br /> < div class = \"form-check form-check-inline\" > < input class = \"form-check-input\" type = \"radio\" name = \"gender\" value = \"1\" th:checked = \"${emp!=null}?${emp.gender==1}\" > < label class = \"form-check-label\" > \u7537 </ label > </ div > < div class = \"form-check form-check-inline\" > < input class = \"form-check-input\" type = \"radio\" name = \"gender\" value = \"0\" th:checked = \"${emp!=null}?${emp.gender==0}\" > < label class = \"form-check-label\" > \u5973 </ label > </ div > </ div > < div class = \"form-group\" > < label > department </ label > <!--\u63d0\u4ea4\u7684\u662f\u90e8\u95e8\u7684id--> < select class = \"form-control\" name = \"department.id\" > < option th:selected = \"${emp!=null}?${dept.id == emp.department.id}\" th:value = \"${dept.id}\" th:each = \"dept:${depts}\" th:text = \"${dept.departmentName}\" > 1 </ option > </ select > </ div > < div class = \"form-group\" > < label > Birth </ label > < input name = \"birth\" type = \"text\" class = \"form-control\" placeholder = \"zhangsan\" th:value = \"${emp!=null}?${#dates.format(emp.birth, 'yyyy-MM-dd HH:mm')}\" > </ div > < button type = \"submit\" class = \"btn btn-primary\" th:text = \"${emp!=null}?'\u4fee\u6539':'\u6dfb\u52a0'\" > \u6dfb\u52a0 </ button > </ form >","title":"7\uff09\u3001CRUD-\u5458\u5de5\u4fee\u6539"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#8crud-","text":"< tr th:each = \"emp:${emps}\" > < td th:text = \"${emp.id}\" ></ td > < td > [[${emp.lastName}]] </ td > < td th:text = \"${emp.email}\" ></ td > < td th:text = \"${emp.gender}==0?'\u5973':'\u7537'\" ></ td > < td th:text = \"${emp.department.departmentName}\" ></ td > < td th:text = \"${#dates.format(emp.birth, 'yyyy-MM-dd HH:mm')}\" ></ td > < td > < a class = \"btn btn-sm btn-primary\" th:href = \"@{/emp/}+${emp.id}\" > \u7f16\u8f91 </ a > < button th:attr = \"del_uri=@{/emp/}+${emp.id}\" class = \"btn btn-sm btn-danger deleteBtn\" > \u5220\u9664 </ button > </ td > </ tr > < script > $ ( \".deleteBtn\" ). click ( function (){ //\u5220\u9664\u5f53\u524d\u5458\u5de5\u7684 $ ( \"#deleteEmpForm\" ). attr ( \"action\" , $ ( this ). attr ( \"del_uri\" )). submit (); return false ; }); </ script >","title":"8\uff09\u3001CRUD-\u5458\u5de5\u5220\u9664"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#7_1","text":"","title":"7\u3001\u9519\u8bef\u5904\u7406\u673a\u5236"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#1springboot","text":"\u9ed8\u8ba4\u6548\u679c\uff1a \u200b 1\uff09\u3001\u6d4f\u89c8\u5668\uff0c\u8fd4\u56de\u4e00\u4e2a\u9ed8\u8ba4\u7684\u9519\u8bef\u9875\u9762 \u6d4f\u89c8\u5668\u53d1\u9001\u8bf7\u6c42\u7684\u8bf7\u6c42\u5934\uff1a \u200b 2\uff09\u3001\u5982\u679c\u662f\u5176\u4ed6\u5ba2\u6237\u7aef\uff0c\u9ed8\u8ba4\u54cd\u5e94\u4e00\u4e2ajson\u6570\u636e \u200b \u539f\u7406\uff1a \u200b \u53ef\u4ee5\u53c2\u7167ErrorMvcAutoConfiguration\uff1b\u9519\u8bef\u5904\u7406\u7684\u81ea\u52a8\u914d\u7f6e\uff1b \u7ed9\u5bb9\u5668\u4e2d\u6dfb\u52a0\u4e86\u4ee5\u4e0b\u7ec4\u4ef6 \u200b 1\u3001DefaultErrorAttributes\uff1a \u5e2e\u6211\u4eec\u5728\u9875\u9762\u5171\u4eab\u4fe1\u606f \uff1b @Override public Map < String , Object > getErrorAttributes ( RequestAttributes requestAttributes , boolean includeStackTrace ) { Map < String , Object > errorAttributes = new LinkedHashMap < String , Object > (); errorAttributes . put ( \"timestamp\" , new Date ()); addStatus ( errorAttributes , requestAttributes ); addErrorDetails ( errorAttributes , requestAttributes , includeStackTrace ); addPath ( errorAttributes , requestAttributes ); return errorAttributes ; } \u200b 2\u3001BasicErrorController\uff1a\u5904\u7406\u9ed8\u8ba4/error\u8bf7\u6c42 @Controller @RequestMapping ( \"${server.error.path:${error.path:/error}}\" ) public class BasicErrorController extends AbstractErrorController { @RequestMapping ( produces = \"text/html\" ) //\u4ea7\u751fhtml\u7c7b\u578b\u7684\u6570\u636e\uff1b\u6d4f\u89c8\u5668\u53d1\u9001\u7684\u8bf7\u6c42\u6765\u5230\u8fd9\u4e2a\u65b9\u6cd5\u5904\u7406 public ModelAndView errorHtml ( HttpServletRequest request , HttpServletResponse response ) { HttpStatus status = getStatus ( request ); Map < String , Object > model = Collections . unmodifiableMap ( getErrorAttributes ( request , isIncludeStackTrace ( request , MediaType . TEXT_HTML ))); response . setStatus ( status . value ()); //\u53bb\u54ea\u4e2a\u9875\u9762\u4f5c\u4e3a\u9519\u8bef\u9875\u9762\uff1b\u5305\u542b\u9875\u9762\u5730\u5740\u548c\u9875\u9762\u5185\u5bb9 ModelAndView modelAndView = resolveErrorView ( request , response , status , model ); return ( modelAndView == null ? new ModelAndView ( \"error\" , model ) : modelAndView ); } @RequestMapping @ResponseBody //\u4ea7\u751fjson\u6570\u636e\uff0c\u5176\u4ed6\u5ba2\u6237\u7aef\u6765\u5230\u8fd9\u4e2a\u65b9\u6cd5\u5904\u7406\uff1b public ResponseEntity < Map < String , Object >> error ( HttpServletRequest request ) { Map < String , Object > body = getErrorAttributes ( request , isIncludeStackTrace ( request , MediaType . ALL )); HttpStatus status = getStatus ( request ); return new ResponseEntity < Map < String , Object >> ( body , status ); } \u200b 3\u3001ErrorPageCustomizer\uff1a @Value ( \"${error.path:/error}\" ) private String path = \"/error\" ; \u7cfb\u7edf\u51fa\u73b0\u9519\u8bef\u4ee5\u540e\u6765\u5230error\u8bf7\u6c42\u8fdb\u884c\u5904\u7406 \uff1b\uff08 web . xml\u6ce8\u518c\u7684\u9519\u8bef\u9875\u9762\u89c4\u5219 \uff09 \u200b 4\u3001DefaultErrorViewResolver\uff1a @Override public ModelAndView resolveErrorView ( HttpServletRequest request , HttpStatus status , Map < String , Object > model ) { ModelAndView modelAndView = resolve ( String . valueOf ( status ), model ); if ( modelAndView == null && SERIES_VIEWS . containsKey ( status . series ())) { modelAndView = resolve ( SERIES_VIEWS . get ( status . series ()), model ); } return modelAndView ; } private ModelAndView resolve ( String viewName , Map < String , Object > model ) { //\u9ed8\u8ba4SpringBoot\u53ef\u4ee5\u53bb\u627e\u5230\u4e00\u4e2a\u9875\u9762\uff1f error/404 String errorViewName = \"error/\" + viewName ; //\u6a21\u677f\u5f15\u64ce\u53ef\u4ee5\u89e3\u6790\u8fd9\u4e2a\u9875\u9762\u5730\u5740\u5c31\u7528\u6a21\u677f\u5f15\u64ce\u89e3\u6790 TemplateAvailabilityProvider provider = this . templateAvailabilityProviders . getProvider ( errorViewName , this . applicationContext ); if ( provider != null ) { //\u6a21\u677f\u5f15\u64ce\u53ef\u7528\u7684\u60c5\u51b5\u4e0b\u8fd4\u56de\u5230errorViewName\u6307\u5b9a\u7684\u89c6\u56fe\u5730\u5740 return new ModelAndView ( errorViewName , model ); } //\u6a21\u677f\u5f15\u64ce\u4e0d\u53ef\u7528\uff0c\u5c31\u5728\u9759\u6001\u8d44\u6e90\u6587\u4ef6\u5939\u4e0b\u627eerrorViewName\u5bf9\u5e94\u7684\u9875\u9762 error/404.html return resolveResource ( errorViewName , model ); } \u200b \u6b65\u9aa4\uff1a \u200b \u4e00\u4f46\u7cfb\u7edf\u51fa\u73b04xx\u6216\u80055xx\u4e4b\u7c7b\u7684\u9519\u8bef\uff1bErrorPageCustomizer\u5c31\u4f1a\u751f\u6548\uff08\u5b9a\u5236\u9519\u8bef\u7684\u54cd\u5e94\u89c4\u5219\uff09\uff1b\u5c31\u4f1a\u6765\u5230/error\u8bf7\u6c42\uff1b\u5c31\u4f1a\u88ab**BasicErrorController**\u5904\u7406\uff1b \u200b 1\uff09\u54cd\u5e94\u9875\u9762\uff1b\u53bb\u54ea\u4e2a\u9875\u9762\u662f\u7531**DefaultErrorViewResolver**\u89e3\u6790\u5f97\u5230\u7684\uff1b protected ModelAndView resolveErrorView ( HttpServletRequest request , HttpServletResponse response , HttpStatus status , Map < String , Object > model ) { //\u6240\u6709\u7684ErrorViewResolver\u5f97\u5230ModelAndView for ( ErrorViewResolver resolver : this . errorViewResolvers ) { ModelAndView modelAndView = resolver . resolveErrorView ( request , status , model ); if ( modelAndView != null ) { return modelAndView ; } } return null ; }","title":"1\uff09\u3001SpringBoot\u9ed8\u8ba4\u7684\u9519\u8bef\u5904\u7406\u673a\u5236"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#2_9","text":"","title":"2\uff09\u3001\u5982\u679c\u5b9a\u5236\u9519\u8bef\u54cd\u5e94\uff1a"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#1_9","text":"\u200b 1\uff09\u3001\u6709\u6a21\u677f\u5f15\u64ce\u7684\u60c5\u51b5\u4e0b\uff1berror/\u72b6\u6001\u7801; \u3010\u5c06\u9519\u8bef\u9875\u9762\u547d\u540d\u4e3a \u9519\u8bef\u72b6\u6001\u7801.html \u653e\u5728\u6a21\u677f\u5f15\u64ce\u6587\u4ef6\u5939\u91cc\u9762\u7684 error\u6587\u4ef6\u5939\u4e0b\u3011\uff0c\u53d1\u751f\u6b64\u72b6\u6001\u7801\u7684\u9519\u8bef\u5c31\u4f1a\u6765\u5230 \u5bf9\u5e94\u7684\u9875\u9762\uff1b \u200b \u6211\u4eec\u53ef\u4ee5\u4f7f\u75284xx\u548c5xx\u4f5c\u4e3a\u9519\u8bef\u9875\u9762\u7684\u6587\u4ef6\u540d\u6765\u5339\u914d\u8fd9\u79cd\u7c7b\u578b\u7684\u6240\u6709\u9519\u8bef\uff0c\u7cbe\u786e\u4f18\u5148\uff08\u4f18\u5148\u5bfb\u627e\u7cbe\u786e\u7684\u72b6\u6001\u7801.html\uff09\uff1b \u200b \u9875\u9762\u80fd\u83b7\u53d6\u7684\u4fe1\u606f\uff1b \u200b timestamp\uff1a\u65f6\u95f4\u6233 \u200b status\uff1a\u72b6\u6001\u7801 \u200b error\uff1a\u9519\u8bef\u63d0\u793a \u200b exception\uff1a\u5f02\u5e38\u5bf9\u8c61 \u200b message\uff1a\u5f02\u5e38\u6d88\u606f \u200b errors\uff1aJSR303\u6570\u636e\u6821\u9a8c\u7684\u9519\u8bef\u90fd\u5728\u8fd9\u91cc \u200b 2\uff09\u3001\u6ca1\u6709\u6a21\u677f\u5f15\u64ce\uff08\u6a21\u677f\u5f15\u64ce\u627e\u4e0d\u5230\u8fd9\u4e2a\u9519\u8bef\u9875\u9762\uff09\uff0c\u9759\u6001\u8d44\u6e90\u6587\u4ef6\u5939\u4e0b\u627e\uff1b \u200b 3\uff09\u3001\u4ee5\u4e0a\u90fd\u6ca1\u6709\u9519\u8bef\u9875\u9762\uff0c\u5c31\u662f\u9ed8\u8ba4\u6765\u5230SpringBoot\u9ed8\u8ba4\u7684\u9519\u8bef\u63d0\u793a\u9875\u9762\uff1b","title":"1\uff09\u3001\u5982\u4f55\u5b9a\u5236\u9519\u8bef\u7684\u9875\u9762\uff1b"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#2json","text":"\u200b 1\uff09\u3001\u81ea\u5b9a\u4e49\u5f02\u5e38\u5904\u7406&\u8fd4\u56de\u5b9a\u5236json\u6570\u636e\uff1b @ControllerAdvice public class MyExceptionHandler { @ResponseBody @ExceptionHandler ( UserNotExistException . class ) public Map < String , Object > handleException ( Exception e ){ Map < String , Object > map = new HashMap <> (); map . put ( \"code\" , \"user.notexist\" ); map . put ( \"message\" , e . getMessage ()); return map ; } } //\u6ca1\u6709\u81ea\u9002\u5e94\u6548\u679c... \u200b 2\uff09\u3001\u8f6c\u53d1\u5230/error\u8fdb\u884c\u81ea\u9002\u5e94\u54cd\u5e94\u6548\u679c\u5904\u7406 @ExceptionHandler ( UserNotExistException . class ) public String handleException ( Exception e , HttpServletRequest request ){ Map < String , Object > map = new HashMap <> (); //\u4f20\u5165\u6211\u4eec\u81ea\u5df1\u7684\u9519\u8bef\u72b6\u6001\u7801 4xx 5xx\uff0c\u5426\u5219\u5c31\u4e0d\u4f1a\u8fdb\u5165\u5b9a\u5236\u9519\u8bef\u9875\u9762\u7684\u89e3\u6790\u6d41\u7a0b /** * Integer statusCode = (Integer) request .getAttribute(\"javax.servlet.error.status_code\"); */ request . setAttribute ( \"javax.servlet.error.status_code\" , 500 ); map . put ( \"code\" , \"user.notexist\" ); map . put ( \"message\" , e . getMessage ()); //\u8f6c\u53d1\u5230/error return \"forward:/error\" ; }","title":"2\uff09\u3001\u5982\u4f55\u5b9a\u5236\u9519\u8bef\u7684json\u6570\u636e\uff1b"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#3_6","text":"\u51fa\u73b0\u9519\u8bef\u4ee5\u540e\uff0c\u4f1a\u6765\u5230/error\u8bf7\u6c42\uff0c\u4f1a\u88abBasicErrorController\u5904\u7406\uff0c\u54cd\u5e94\u51fa\u53bb\u53ef\u4ee5\u83b7\u53d6\u7684\u6570\u636e\u662f\u7531getErrorAttributes\u5f97\u5230\u7684\uff08\u662fAbstractErrorController\uff08ErrorController\uff09\u89c4\u5b9a\u7684\u65b9\u6cd5\uff09\uff1b \u200b 1\u3001\u5b8c\u5168\u6765\u7f16\u5199\u4e00\u4e2aErrorController\u7684\u5b9e\u73b0\u7c7b\u3010\u6216\u8005\u662f\u7f16\u5199AbstractErrorController\u7684\u5b50\u7c7b\u3011\uff0c\u653e\u5728\u5bb9\u5668\u4e2d\uff1b \u200b 2\u3001\u9875\u9762\u4e0a\u80fd\u7528\u7684\u6570\u636e\uff0c\u6216\u8005\u662fjson\u8fd4\u56de\u80fd\u7528\u7684\u6570\u636e\u90fd\u662f\u901a\u8fc7errorAttributes.getErrorAttributes\u5f97\u5230\uff1b \u200b \u5bb9\u5668\u4e2dDefaultErrorAttributes.getErrorAttributes()\uff1b\u9ed8\u8ba4\u8fdb\u884c\u6570\u636e\u5904\u7406\u7684\uff1b \u81ea\u5b9a\u4e49ErrorAttributes //\u7ed9\u5bb9\u5668\u4e2d\u52a0\u5165\u6211\u4eec\u81ea\u5df1\u5b9a\u4e49\u7684ErrorAttributes @Component public class MyErrorAttributes extends DefaultErrorAttributes { @Override public Map < String , Object > getErrorAttributes ( RequestAttributes requestAttributes , boolean includeStackTrace ) { Map < String , Object > map = super . getErrorAttributes ( requestAttributes , includeStackTrace ); map . put ( \"company\" , \"atguigu\" ); return map ; } } \u6700\u7ec8\u7684\u6548\u679c\uff1a\u54cd\u5e94\u662f\u81ea\u9002\u5e94\u7684\uff0c\u53ef\u4ee5\u901a\u8fc7\u5b9a\u5236ErrorAttributes\u6539\u53d8\u9700\u8981\u8fd4\u56de\u7684\u5185\u5bb9\uff0c","title":"3\uff09\u3001\u5c06\u6211\u4eec\u7684\u5b9a\u5236\u6570\u636e\u643a\u5e26\u51fa\u53bb\uff1b"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#8servlet","text":"SpringBoot\u9ed8\u8ba4\u4f7f\u7528Tomcat\u4f5c\u4e3a\u5d4c\u5165\u5f0f\u7684Servlet\u5bb9\u5668\uff1b \u95ee\u9898\uff1f","title":"8\u3001\u914d\u7f6e\u5d4c\u5165\u5f0fServlet\u5bb9\u5668"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#1servlet","text":"1\u3001\u4fee\u6539\u548cserver\u6709\u5173\u7684\u914d\u7f6e\uff08ServerProperties\u3010\u4e5f\u662fEmbeddedServletContainerCustomizer\u3011\uff09\uff1b server.port = 8081 server.context-path = /crud server.tomcat.uri-encoding = UTF-8 //\u901a\u7528\u7684Servlet\u5bb9\u5668\u8bbe\u7f6e server.xxx //Tomcat\u7684\u8bbe\u7f6e server.tomcat.xxx 2\u3001\u7f16\u5199\u4e00\u4e2a**EmbeddedServletContainerCustomizer**\uff1a\u5d4c\u5165\u5f0f\u7684Servlet\u5bb9\u5668\u7684\u5b9a\u5236\u5668\uff1b\u6765\u4fee\u6539Servlet\u5bb9\u5668\u7684\u914d\u7f6e @Bean //\u4e00\u5b9a\u8981\u5c06\u8fd9\u4e2a\u5b9a\u5236\u5668\u52a0\u5165\u5230\u5bb9\u5668\u4e2d public EmbeddedServletContainerCustomizer embeddedServletContainerCustomizer (){ return new EmbeddedServletContainerCustomizer () { //\u5b9a\u5236\u5d4c\u5165\u5f0f\u7684Servlet\u5bb9\u5668\u76f8\u5173\u7684\u89c4\u5219 @Override public void customize ( ConfigurableEmbeddedServletContainer container ) { container . setPort ( 8083 ); } }; }","title":"1\uff09\u3001\u5982\u4f55\u5b9a\u5236\u548c\u4fee\u6539Servlet\u5bb9\u5668\u7684\u76f8\u5173\u914d\u7f6e\uff1b"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#2servletservletfilterlistener","text":"\u7531\u4e8eSpringBoot\u9ed8\u8ba4\u662f\u4ee5jar\u5305\u7684\u65b9\u5f0f\u542f\u52a8\u5d4c\u5165\u5f0f\u7684Servlet\u5bb9\u5668\u6765\u542f\u52a8SpringBoot\u7684web\u5e94\u7528\uff0c\u6ca1\u6709web.xml\u6587\u4ef6\u3002 \u6ce8\u518c\u4e09\u5927\u7ec4\u4ef6\u7528\u4ee5\u4e0b\u65b9\u5f0f ServletRegistrationBean //\u6ce8\u518c\u4e09\u5927\u7ec4\u4ef6 @Bean public ServletRegistrationBean myServlet (){ ServletRegistrationBean registrationBean = new ServletRegistrationBean ( new MyServlet (), \"/myServlet\" ); return registrationBean ; } FilterRegistrationBean @Bean public FilterRegistrationBean myFilter (){ FilterRegistrationBean registrationBean = new FilterRegistrationBean (); registrationBean . setFilter ( new MyFilter ()); registrationBean . setUrlPatterns ( Arrays . asList ( \"/hello\" , \"/myServlet\" )); return registrationBean ; } ServletListenerRegistrationBean @Bean public ServletListenerRegistrationBean myListener (){ ServletListenerRegistrationBean < MyListener > registrationBean = new ServletListenerRegistrationBean <> ( new MyListener ()); return registrationBean ; } SpringBoot\u5e2e\u6211\u4eec\u81ea\u52a8SpringMVC\u7684\u65f6\u5019\uff0c\u81ea\u52a8\u7684\u6ce8\u518cSpringMVC\u7684\u524d\u7aef\u63a7\u5236\u5668\uff1bDIspatcherServlet\uff1b DispatcherServletAutoConfiguration\u4e2d\uff1a @Bean ( name = DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME ) @ConditionalOnBean ( value = DispatcherServlet . class , name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME ) public ServletRegistrationBean dispatcherServletRegistration ( DispatcherServlet dispatcherServlet ) { ServletRegistrationBean registration = new ServletRegistrationBean ( dispatcherServlet , this . serverProperties . getServletMapping ()); //\u9ed8\u8ba4\u62e6\u622a\uff1a / \u6240\u6709\u8bf7\u6c42\uff1b\u5305\u9759\u6001\u8d44\u6e90\uff0c\u4f46\u662f\u4e0d\u62e6\u622ajsp\u8bf7\u6c42\uff1b /*\u4f1a\u62e6\u622ajsp //\u53ef\u4ee5\u901a\u8fc7server.servletPath\u6765\u4fee\u6539SpringMVC\u524d\u7aef\u63a7\u5236\u5668\u9ed8\u8ba4\u62e6\u622a\u7684\u8bf7\u6c42\u8def\u5f84 registration . setName ( DEFAULT_DISPATCHER_SERVLET_BEAN_NAME ); registration . setLoadOnStartup ( this . webMvcProperties . getServlet (). getLoadOnStartup ()); if ( this . multipartConfig != null ) { registration . setMultipartConfig ( this . multipartConfig ); } return registration ; } 2\uff09\u3001SpringBoot\u80fd\u4e0d\u80fd\u652f\u6301\u5176\u4ed6\u7684Servlet\u5bb9\u5668\uff1b","title":"2\uff09\u3001\u6ce8\u518cServlet\u4e09\u5927\u7ec4\u4ef6\u3010Servlet\u3001Filter\u3001Listener\u3011"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#3servlet","text":"\u9ed8\u8ba4\u652f\u6301\uff1a Tomcat\uff08\u9ed8\u8ba4\u4f7f\u7528\uff09 <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-web </artifactId> \u5f15\u5165web\u6a21\u5757\u9ed8\u8ba4\u5c31\u662f\u4f7f\u7528\u5d4c\u5165\u5f0f\u7684Tomcat\u4f5c\u4e3aServlet\u5bb9\u5668\uff1b </dependency> Jetty <!-- \u5f15\u5165web\u6a21\u5757 --> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-web </artifactId> <exclusions> <exclusion> <artifactId> spring-boot-starter-tomcat </artifactId> <groupId> org.springframework.boot </groupId> </exclusion> </exclusions> </dependency> <!--\u5f15\u5165\u5176\u4ed6\u7684Servlet\u5bb9\u5668--> <dependency> <artifactId> spring-boot-starter-jetty </artifactId> <groupId> org.springframework.boot </groupId> </dependency> Undertow <!-- \u5f15\u5165web\u6a21\u5757 --> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-web </artifactId> <exclusions> <exclusion> <artifactId> spring-boot-starter-tomcat </artifactId> <groupId> org.springframework.boot </groupId> </exclusion> </exclusions> </dependency> <!--\u5f15\u5165\u5176\u4ed6\u7684Servlet\u5bb9\u5668--> <dependency> <artifactId> spring-boot-starter-undertow </artifactId> <groupId> org.springframework.boot </groupId> </dependency>","title":"3\uff09\u3001\u66ff\u6362\u4e3a\u5176\u4ed6\u5d4c\u5165\u5f0fServlet\u5bb9\u5668"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#4servlet","text":"EmbeddedServletContainerAutoConfiguration\uff1a\u5d4c\u5165\u5f0f\u7684Servlet\u5bb9\u5668\u81ea\u52a8\u914d\u7f6e\uff1f @AutoConfigureOrder ( Ordered . HIGHEST_PRECEDENCE ) @Configuration @ConditionalOnWebApplication @Import ( BeanPostProcessorsRegistrar . class ) //\u5bfc\u5165BeanPostProcessorsRegistrar\uff1aSpring\u6ce8\u89e3\u7248\uff1b\u7ed9\u5bb9\u5668\u4e2d\u5bfc\u5165\u4e00\u4e9b\u7ec4\u4ef6 //\u5bfc\u5165\u4e86EmbeddedServletContainerCustomizerBeanPostProcessor\uff1a //\u540e\u7f6e\u5904\u7406\u5668\uff1abean\u521d\u59cb\u5316\u524d\u540e\uff08\u521b\u5efa\u5b8c\u5bf9\u8c61\uff0c\u8fd8\u6ca1\u8d4b\u503c\u8d4b\u503c\uff09\u6267\u884c\u521d\u59cb\u5316\u5de5\u4f5c public class EmbeddedServletContainerAutoConfiguration { @Configuration @ConditionalOnClass ({ Servlet . class , Tomcat . class }) //\u5224\u65ad\u5f53\u524d\u662f\u5426\u5f15\u5165\u4e86Tomcat\u4f9d\u8d56\uff1b @ConditionalOnMissingBean ( value = EmbeddedServletContainerFactory . class , search = SearchStrategy . CURRENT ) //\u5224\u65ad\u5f53\u524d\u5bb9\u5668\u6ca1\u6709\u7528\u6237\u81ea\u5df1\u5b9a\u4e49EmbeddedServletContainerFactory\uff1a\u5d4c\u5165\u5f0f\u7684Servlet\u5bb9\u5668\u5de5\u5382\uff1b\u4f5c\u7528\uff1a\u521b\u5efa\u5d4c\u5165\u5f0f\u7684Servlet\u5bb9\u5668 public static class EmbeddedTomcat { @Bean public TomcatEmbeddedServletContainerFactory tomcatEmbeddedServletContainerFactory () { return new TomcatEmbeddedServletContainerFactory (); } } /** * Nested configuration if Jetty is being used. */ @Configuration @ConditionalOnClass ({ Servlet . class , Server . class , Loader . class , WebAppContext . class }) @ConditionalOnMissingBean ( value = EmbeddedServletContainerFactory . class , search = SearchStrategy . CURRENT ) public static class EmbeddedJetty { @Bean public JettyEmbeddedServletContainerFactory jettyEmbeddedServletContainerFactory () { return new JettyEmbeddedServletContainerFactory (); } } /** * Nested configuration if Undertow is being used. */ @Configuration @ConditionalOnClass ({ Servlet . class , Undertow . class , SslClientAuthMode . class }) @ConditionalOnMissingBean ( value = EmbeddedServletContainerFactory . class , search = SearchStrategy . CURRENT ) public static class EmbeddedUndertow { @Bean public UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory () { return new UndertowEmbeddedServletContainerFactory (); } } 1\uff09\u3001EmbeddedServletContainerFactory\uff08\u5d4c\u5165\u5f0fServlet\u5bb9\u5668\u5de5\u5382\uff09 public interface EmbeddedServletContainerFactory { //\u83b7\u53d6\u5d4c\u5165\u5f0f\u7684Servlet\u5bb9\u5668 EmbeddedServletContainer getEmbeddedServletContainer ( ServletContextInitializer ... initializers ); } 2\uff09\u3001EmbeddedServletContainer\uff1a\uff08\u5d4c\u5165\u5f0f\u7684Servlet\u5bb9\u5668\uff09 3\uff09\u3001\u4ee5**TomcatEmbeddedServletContainerFactory**\u4e3a\u4f8b @Override public EmbeddedServletContainer getEmbeddedServletContainer ( ServletContextInitializer ... initializers ) { //\u521b\u5efa\u4e00\u4e2aTomcat Tomcat tomcat = new Tomcat (); //\u914d\u7f6eTomcat\u7684\u57fa\u672c\u73af\u8282 File baseDir = ( this . baseDirectory != null ? this . baseDirectory : createTempDir ( \"tomcat\" )); tomcat . setBaseDir ( baseDir . getAbsolutePath ()); Connector connector = new Connector ( this . protocol ); tomcat . getService (). addConnector ( connector ); customizeConnector ( connector ); tomcat . setConnector ( connector ); tomcat . getHost (). setAutoDeploy ( false ); configureEngine ( tomcat . getEngine ()); for ( Connector additionalConnector : this . additionalTomcatConnectors ) { tomcat . getService (). addConnector ( additionalConnector ); } prepareContext ( tomcat . getHost (), initializers ); //\u5c06\u914d\u7f6e\u597d\u7684Tomcat\u4f20\u5165\u8fdb\u53bb\uff0c\u8fd4\u56de\u4e00\u4e2aEmbeddedServletContainer\uff1b\u5e76\u4e14\u542f\u52a8Tomcat\u670d\u52a1\u5668 return getTomcatEmbeddedServletContainer ( tomcat ); } 4\uff09\u3001\u6211\u4eec\u5bf9\u5d4c\u5165\u5f0f\u5bb9\u5668\u7684\u914d\u7f6e\u4fee\u6539\u662f\u600e\u4e48\u751f\u6548\uff1f ServerProperties\u3001EmbeddedServletContainerCustomizer EmbeddedServletContainerCustomizer \uff1a\u5b9a\u5236\u5668\u5e2e\u6211\u4eec\u4fee\u6539\u4e86Servlet\u5bb9\u5668\u7684\u914d\u7f6e\uff1f \u600e\u4e48\u4fee\u6539\u7684\u539f\u7406\uff1f 5\uff09\u3001\u5bb9\u5668\u4e2d\u5bfc\u5165\u4e86**EmbeddedServletContainerCustomizerBeanPostProcessor** //\u521d\u59cb\u5316\u4e4b\u524d @Override public Object postProcessBeforeInitialization ( Object bean , String beanName ) throws BeansException { //\u5982\u679c\u5f53\u524d\u521d\u59cb\u5316\u7684\u662f\u4e00\u4e2aConfigurableEmbeddedServletContainer\u7c7b\u578b\u7684\u7ec4\u4ef6 if ( bean instanceof ConfigurableEmbeddedServletContainer ) { // postProcessBeforeInitialization (( ConfigurableEmbeddedServletContainer ) bean ); } return bean ; } private void postProcessBeforeInitialization ( ConfigurableEmbeddedServletContainer bean ) { //\u83b7\u53d6\u6240\u6709\u7684\u5b9a\u5236\u5668\uff0c\u8c03\u7528\u6bcf\u4e00\u4e2a\u5b9a\u5236\u5668\u7684customize\u65b9\u6cd5\u6765\u7ed9Servlet\u5bb9\u5668\u8fdb\u884c\u5c5e\u6027\u8d4b\u503c\uff1b for ( EmbeddedServletContainerCustomizer customizer : getCustomizers ()) { customizer . customize ( bean ); } } private Collection < EmbeddedServletContainerCustomizer > getCustomizers () { if ( this . customizers == null ) { // Look up does not include the parent context this . customizers = new ArrayList < EmbeddedServletContainerCustomizer > ( this . beanFactory //\u4ece\u5bb9\u5668\u4e2d\u83b7\u53d6\u6240\u6709\u8fd9\u845b\u7c7b\u578b\u7684\u7ec4\u4ef6\uff1aEmbeddedServletContainerCustomizer //\u5b9a\u5236Servlet\u5bb9\u5668\uff0c\u7ed9\u5bb9\u5668\u4e2d\u53ef\u4ee5\u6dfb\u52a0\u4e00\u4e2aEmbeddedServletContainerCustomizer\u7c7b\u578b\u7684\u7ec4\u4ef6 . getBeansOfType ( EmbeddedServletContainerCustomizer . class , false , false ) . values ()); Collections . sort ( this . customizers , AnnotationAwareOrderComparator . INSTANCE ); this . customizers = Collections . unmodifiableList ( this . customizers ); } return this . customizers ; } ServerProperties\u4e5f\u662f\u5b9a\u5236\u5668 \u6b65\u9aa4\uff1a 1\uff09\u3001SpringBoot\u6839\u636e\u5bfc\u5165\u7684\u4f9d\u8d56\u60c5\u51b5\uff0c\u7ed9\u5bb9\u5668\u4e2d\u6dfb\u52a0\u76f8\u5e94\u7684EmbeddedServletContainerFactory\u3010TomcatEmbeddedServletContainerFactory\u3011 2\uff09\u3001\u5bb9\u5668\u4e2d\u67d0\u4e2a\u7ec4\u4ef6\u8981\u521b\u5efa\u5bf9\u8c61\u5c31\u4f1a\u60ca\u52a8\u540e\u7f6e\u5904\u7406\u5668\uff1bEmbeddedServletContainerCustomizerBeanPostProcessor\uff1b \u53ea\u8981\u662f\u5d4c\u5165\u5f0f\u7684Servlet\u5bb9\u5668\u5de5\u5382\uff0c\u540e\u7f6e\u5904\u7406\u5668\u5c31\u5de5\u4f5c\uff1b 3\uff09\u3001\u540e\u7f6e\u5904\u7406\u5668\uff0c\u4ece\u5bb9\u5668\u4e2d\u83b7\u53d6\u6240\u6709\u7684**EmbeddedServletContainerCustomizer**\uff0c\u8c03\u7528\u5b9a\u5236\u5668\u7684\u5b9a\u5236\u65b9\u6cd5","title":"4\uff09\u3001\u5d4c\u5165\u5f0fServlet\u5bb9\u5668\u81ea\u52a8\u914d\u7f6e\u539f\u7406\uff1b"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#5servlet","text":"\u4ec0\u4e48\u65f6\u5019\u521b\u5efa\u5d4c\u5165\u5f0f\u7684Servlet\u5bb9\u5668\u5de5\u5382\uff1f\u4ec0\u4e48\u65f6\u5019\u83b7\u53d6\u5d4c\u5165\u5f0f\u7684Servlet\u5bb9\u5668\u5e76\u542f\u52a8Tomcat\uff1b \u83b7\u53d6\u5d4c\u5165\u5f0f\u7684Servlet\u5bb9\u5668\u5de5\u5382\uff1a 1\uff09\u3001SpringBoot\u5e94\u7528\u542f\u52a8\u8fd0\u884crun\u65b9\u6cd5 2\uff09\u3001refreshContext(context);SpringBoot\u5237\u65b0IOC\u5bb9\u5668\u3010\u521b\u5efaIOC\u5bb9\u5668\u5bf9\u8c61\uff0c\u5e76\u521d\u59cb\u5316\u5bb9\u5668\uff0c\u521b\u5efa\u5bb9\u5668\u4e2d\u7684\u6bcf\u4e00\u4e2a\u7ec4\u4ef6\u3011\uff1b\u5982\u679c\u662fweb\u5e94\u7528\u521b\u5efa**AnnotationConfigEmbeddedWebApplicationContext**\uff0c\u5426\u5219\uff1a AnnotationConfigApplicationContext 3\uff09\u3001refresh(context); \u5237\u65b0\u521a\u624d\u521b\u5efa\u597d\u7684ioc\u5bb9\u5668\uff1b public void refresh () throws BeansException , IllegalStateException { synchronized ( this . startupShutdownMonitor ) { // Prepare this context for refreshing. prepareRefresh (); // Tell the subclass to refresh the internal bean factory. ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory (); // Prepare the bean factory for use in this context. prepareBeanFactory ( beanFactory ); try { // Allows post-processing of the bean factory in context subclasses. postProcessBeanFactory ( beanFactory ); // Invoke factory processors registered as beans in the context. invokeBeanFactoryPostProcessors ( beanFactory ); // Register bean processors that intercept bean creation. registerBeanPostProcessors ( beanFactory ); // Initialize message source for this context. initMessageSource (); // Initialize event multicaster for this context. initApplicationEventMulticaster (); // Initialize other special beans in specific context subclasses. onRefresh (); // Check for listener beans and register them. registerListeners (); // Instantiate all remaining (non-lazy-init) singletons. finishBeanFactoryInitialization ( beanFactory ); // Last step: publish corresponding event. finishRefresh (); } catch ( BeansException ex ) { if ( logger . isWarnEnabled ()) { logger . warn ( \"Exception encountered during context initialization - \" + \"cancelling refresh attempt: \" + ex ); } // Destroy already created singletons to avoid dangling resources. destroyBeans (); // Reset 'active' flag. cancelRefresh ( ex ); // Propagate exception to caller. throw ex ; } finally { // Reset common introspection caches in Spring's core, since we // might not ever need metadata for singleton beans anymore... resetCommonCaches (); } } } 4\uff09\u3001 onRefresh(); web\u7684ioc\u5bb9\u5668\u91cd\u5199\u4e86onRefresh\u65b9\u6cd5 5\uff09\u3001webioc\u5bb9\u5668\u4f1a\u521b\u5efa\u5d4c\u5165\u5f0f\u7684Servlet\u5bb9\u5668\uff1b createEmbeddedServletContainer (); 6\uff09\u3001\u83b7\u53d6\u5d4c\u5165\u5f0f\u7684Servlet\u5bb9\u5668\u5de5\u5382\uff1a EmbeddedServletContainerFactory containerFactory = getEmbeddedServletContainerFactory(); \u200b \u4eceioc\u5bb9\u5668\u4e2d\u83b7\u53d6EmbeddedServletContainerFactory \u7ec4\u4ef6\uff1b**TomcatEmbeddedServletContainerFactory**\u521b\u5efa\u5bf9\u8c61\uff0c\u540e\u7f6e\u5904\u7406\u5668\u4e00\u770b\u662f\u8fd9\u4e2a\u5bf9\u8c61\uff0c\u5c31\u83b7\u53d6\u6240\u6709\u7684\u5b9a\u5236\u5668\u6765\u5148\u5b9a\u5236Servlet\u5bb9\u5668\u7684\u76f8\u5173\u914d\u7f6e\uff1b 7\uff09\u3001 \u4f7f\u7528\u5bb9\u5668\u5de5\u5382\u83b7\u53d6\u5d4c\u5165\u5f0f\u7684Servlet\u5bb9\u5668 \uff1athis.embeddedServletContainer = containerFactory .getEmbeddedServletContainer(getSelfInitializer()); 8\uff09\u3001\u5d4c\u5165\u5f0f\u7684Servlet\u5bb9\u5668\u521b\u5efa\u5bf9\u8c61\u5e76\u542f\u52a8Servlet\u5bb9\u5668\uff1b \u5148\u542f\u52a8\u5d4c\u5165\u5f0f\u7684Servlet\u5bb9\u5668\uff0c\u518d\u5c06ioc\u5bb9\u5668\u4e2d\u5269\u4e0b\u6ca1\u6709\u521b\u5efa\u51fa\u7684\u5bf9\u8c61\u83b7\u53d6\u51fa\u6765\uff1b IOC\u5bb9\u5668\u542f\u52a8\u521b\u5efa\u5d4c\u5165\u5f0f\u7684Servlet\u5bb9\u5668","title":"5\uff09\u3001\u5d4c\u5165\u5f0fServlet\u5bb9\u5668\u542f\u52a8\u539f\u7406\uff1b"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#9servlet","text":"\u5d4c\u5165\u5f0fServlet\u5bb9\u5668\uff1a\u5e94\u7528\u6253\u6210\u53ef\u6267\u884c\u7684jar \u200b \u4f18\u70b9\uff1a\u7b80\u5355\u3001\u4fbf\u643a\uff1b \u200b \u7f3a\u70b9\uff1a\u9ed8\u8ba4\u4e0d\u652f\u6301JSP\u3001\u4f18\u5316\u5b9a\u5236\u6bd4\u8f83\u590d\u6742\uff08\u4f7f\u7528\u5b9a\u5236\u5668\u3010ServerProperties\u3001\u81ea\u5b9a\u4e49EmbeddedServletContainerCustomizer\u3011\uff0c\u81ea\u5df1\u7f16\u5199\u5d4c\u5165\u5f0fServlet\u5bb9\u5668\u7684\u521b\u5efa\u5de5\u5382\u3010EmbeddedServletContainerFactory\u3011\uff09\uff1b \u5916\u7f6e\u7684Servlet\u5bb9\u5668\uff1a\u5916\u9762\u5b89\u88c5Tomcat---\u5e94\u7528war\u5305\u7684\u65b9\u5f0f\u6253\u5305\uff1b","title":"9\u3001\u4f7f\u7528\u5916\u7f6e\u7684Servlet\u5bb9\u5668"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#_4","text":"1\uff09\u3001\u5fc5\u987b\u521b\u5efa\u4e00\u4e2awar\u9879\u76ee\uff1b\uff08\u5229\u7528idea\u521b\u5efa\u597d\u76ee\u5f55\u7ed3\u6784\uff09 2\uff09\u3001\u5c06\u5d4c\u5165\u5f0f\u7684Tomcat\u6307\u5b9a\u4e3aprovided\uff1b <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-tomcat </artifactId> <scope> provided </scope> </dependency> 3\uff09\u3001\u5fc5\u987b\u7f16\u5199\u4e00\u4e2a**SpringBootServletInitializer**\u7684\u5b50\u7c7b\uff0c\u5e76\u8c03\u7528configure\u65b9\u6cd5 public class ServletInitializer extends SpringBootServletInitializer { @Override protected SpringApplicationBuilder configure ( SpringApplicationBuilder application ) { //\u4f20\u5165SpringBoot\u5e94\u7528\u7684\u4e3b\u7a0b\u5e8f return application . sources ( SpringBoot04WebJspApplication . class ); } } 4\uff09\u3001\u542f\u52a8\u670d\u52a1\u5668\u5c31\u53ef\u4ee5\u4f7f\u7528\uff1b","title":"\u6b65\u9aa4"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#_5","text":"jar\u5305\uff1a\u6267\u884cSpringBoot\u4e3b\u7c7b\u7684main\u65b9\u6cd5\uff0c\u542f\u52a8ioc\u5bb9\u5668\uff0c\u521b\u5efa\u5d4c\u5165\u5f0f\u7684Servlet\u5bb9\u5668\uff1b war\u5305\uff1a\u542f\u52a8\u670d\u52a1\u5668\uff0c \u670d\u52a1\u5668\u542f\u52a8SpringBoot\u5e94\u7528 \u3010SpringBootServletInitializer\u3011\uff0c\u542f\u52a8ioc\u5bb9\u5668\uff1b servlet3.0\uff08Spring\u6ce8\u89e3\u7248\uff09\uff1a 8.2.4 Shared libraries / runtimes pluggability\uff1a \u89c4\u5219\uff1a \u200b 1\uff09\u3001\u670d\u52a1\u5668\u542f\u52a8\uff08web\u5e94\u7528\u542f\u52a8\uff09\u4f1a\u521b\u5efa\u5f53\u524dweb\u5e94\u7528\u91cc\u9762\u6bcf\u4e00\u4e2ajar\u5305\u91cc\u9762ServletContainerInitializer\u5b9e\u4f8b\uff1a \u200b 2\uff09\u3001ServletContainerInitializer\u7684\u5b9e\u73b0\u653e\u5728jar\u5305\u7684META-INF/services\u6587\u4ef6\u5939\u4e0b\uff0c\u6709\u4e00\u4e2a\u540d\u4e3ajavax.servlet.ServletContainerInitializer\u7684\u6587\u4ef6\uff0c\u5185\u5bb9\u5c31\u662fServletContainerInitializer\u7684\u5b9e\u73b0\u7c7b\u7684\u5168\u7c7b\u540d \u200b 3\uff09\u3001\u8fd8\u53ef\u4ee5\u4f7f\u7528@HandlesTypes\uff0c\u5728\u5e94\u7528\u542f\u52a8\u7684\u65f6\u5019\u52a0\u8f7d\u6211\u4eec\u611f\u5174\u8da3\u7684\u7c7b\uff1b \u6d41\u7a0b\uff1a 1\uff09\u3001\u542f\u52a8Tomcat 2\uff09\u3001org\\springframework\\spring-web\\4.3.14.RELEASE\\spring-web-4.3.14.RELEASE.jar!\\META-INF\\services\\javax.servlet.ServletContainerInitializer\uff1a Spring\u7684web\u6a21\u5757\u91cc\u9762\u6709\u8fd9\u4e2a\u6587\u4ef6\uff1a org.springframework.web.SpringServletContainerInitializer 3\uff09\u3001SpringServletContainerInitializer\u5c06@HandlesTypes(WebApplicationInitializer.class)\u6807\u6ce8\u7684\u6240\u6709\u8fd9\u4e2a\u7c7b\u578b\u7684\u7c7b\u90fd\u4f20\u5165\u5230onStartup\u65b9\u6cd5\u7684Set<Class<?>>\uff1b\u4e3a\u8fd9\u4e9bWebApplicationInitializer\u7c7b\u578b\u7684\u7c7b\u521b\u5efa\u5b9e\u4f8b\uff1b 4\uff09\u3001\u6bcf\u4e00\u4e2aWebApplicationInitializer\u90fd\u8c03\u7528\u81ea\u5df1\u7684onStartup\uff1b 5\uff09\u3001\u76f8\u5f53\u4e8e\u6211\u4eec\u7684SpringBootServletInitializer\u7684\u7c7b\u4f1a\u88ab\u521b\u5efa\u5bf9\u8c61\uff0c\u5e76\u6267\u884conStartup\u65b9\u6cd5 6\uff09\u3001SpringBootServletInitializer\u5b9e\u4f8b\u6267\u884conStartup\u7684\u65f6\u5019\u4f1acreateRootApplicationContext\uff1b\u521b\u5efa\u5bb9\u5668 protected WebApplicationContext createRootApplicationContext ( ServletContext servletContext ) { //1\u3001\u521b\u5efaSpringApplicationBuilder SpringApplicationBuilder builder = createSpringApplicationBuilder (); StandardServletEnvironment environment = new StandardServletEnvironment (); environment . initPropertySources ( servletContext , null ); builder . environment ( environment ); builder . main ( getClass ()); ApplicationContext parent = getExistingRootWebApplicationContext ( servletContext ); if ( parent != null ) { this . logger . info ( \"Root context already created (using as parent).\" ); servletContext . setAttribute ( WebApplicationContext . ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE , null ); builder . initializers ( new ParentContextApplicationContextInitializer ( parent )); } builder . initializers ( new ServletContextApplicationContextInitializer ( servletContext )); builder . contextClass ( AnnotationConfigEmbeddedWebApplicationContext . class ); //\u8c03\u7528configure\u65b9\u6cd5\uff0c\u5b50\u7c7b\u91cd\u5199\u4e86\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u5c06SpringBoot\u7684\u4e3b\u7a0b\u5e8f\u7c7b\u4f20\u5165\u4e86\u8fdb\u6765 builder = configure ( builder ); //\u4f7f\u7528builder\u521b\u5efa\u4e00\u4e2aSpring\u5e94\u7528 SpringApplication application = builder . build (); if ( application . getSources (). isEmpty () && AnnotationUtils . findAnnotation ( getClass (), Configuration . class ) != null ) { application . getSources (). add ( getClass ()); } Assert . state ( ! application . getSources (). isEmpty (), \"No SpringApplication sources have been defined. Either override the \" + \"configure method or add an @Configuration annotation\" ); // Ensure error pages are registered if ( this . registerErrorPageFilter ) { application . getSources (). add ( ErrorPageFilterConfiguration . class ); } //\u542f\u52a8Spring\u5e94\u7528 return run ( application ); } 7\uff09\u3001Spring\u7684\u5e94\u7528\u5c31\u542f\u52a8\u5e76\u4e14\u521b\u5efaIOC\u5bb9\u5668 public ConfigurableApplicationContext run ( String ... args ) { StopWatch stopWatch = new StopWatch (); stopWatch . start (); ConfigurableApplicationContext context = null ; FailureAnalyzers analyzers = null ; configureHeadlessProperty (); SpringApplicationRunListeners listeners = getRunListeners ( args ); listeners . starting (); try { ApplicationArguments applicationArguments = new DefaultApplicationArguments ( args ); ConfigurableEnvironment environment = prepareEnvironment ( listeners , applicationArguments ); Banner printedBanner = printBanner ( environment ); context = createApplicationContext (); analyzers = new FailureAnalyzers ( context ); prepareContext ( context , environment , listeners , applicationArguments , printedBanner ); //\u5237\u65b0IOC\u5bb9\u5668 refreshContext ( context ); afterRefresh ( context , applicationArguments ); listeners . finished ( context , null ); stopWatch . stop (); if ( this . logStartupInfo ) { new StartupInfoLogger ( this . mainApplicationClass ) . logStarted ( getApplicationLog (), stopWatch ); } return context ; } catch ( Throwable ex ) { handleRunFailure ( context , listeners , analyzers , ex ); throw new IllegalStateException ( ex ); } } \u542f\u52a8Servlet\u5bb9\u5668\uff0c\u518d\u542f\u52a8SpringBoot\u5e94\u7528","title":"\u539f\u7406"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#docker","text":"","title":"\u4e94\u3001Docker"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#1_10","text":"**Docker**\u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u5e94\u7528\u5bb9\u5668\u5f15\u64ce\uff1b\u662f\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u5bb9\u5668\u6280\u672f\uff1b Docker\u652f\u6301\u5c06\u8f6f\u4ef6\u7f16\u8bd1\u6210\u4e00\u4e2a\u955c\u50cf\uff1b\u7136\u540e\u5728\u955c\u50cf\u4e2d\u5404\u79cd\u8f6f\u4ef6\u505a\u597d\u914d\u7f6e\uff0c\u5c06\u955c\u50cf\u53d1\u5e03\u51fa\u53bb\uff0c\u5176\u4ed6\u4f7f\u7528\u8005\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u8fd9\u4e2a\u955c\u50cf\uff1b \u8fd0\u884c\u4e2d\u7684\u8fd9\u4e2a\u955c\u50cf\u79f0\u4e3a\u5bb9\u5668\uff0c\u5bb9\u5668\u542f\u52a8\u662f\u975e\u5e38\u5feb\u901f\u7684\u3002","title":"1\u3001\u7b80\u4ecb"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#2_10","text":"docker\u4e3b\u673a(Host)\uff1a\u5b89\u88c5\u4e86Docker\u7a0b\u5e8f\u7684\u673a\u5668\uff08Docker\u76f4\u63a5\u5b89\u88c5\u5728\u64cd\u4f5c\u7cfb\u7edf\u4e4b\u4e0a\uff09\uff1b docker\u5ba2\u6237\u7aef(Client)\uff1a\u8fde\u63a5docker\u4e3b\u673a\u8fdb\u884c\u64cd\u4f5c\uff1b docker\u4ed3\u5e93(Registry)\uff1a\u7528\u6765\u4fdd\u5b58\u5404\u79cd\u6253\u5305\u597d\u7684\u8f6f\u4ef6\u955c\u50cf\uff1b docker\u955c\u50cf(Images)\uff1a\u8f6f\u4ef6\u6253\u5305\u597d\u7684\u955c\u50cf\uff1b\u653e\u5728docker\u4ed3\u5e93\u4e2d\uff1b docker\u5bb9\u5668(Container)\uff1a\u955c\u50cf\u542f\u52a8\u540e\u7684\u5b9e\u4f8b\u79f0\u4e3a\u4e00\u4e2a\u5bb9\u5668\uff1b\u5bb9\u5668\u662f\u72ec\u7acb\u8fd0\u884c\u7684\u4e00\u4e2a\u6216\u4e00\u7ec4\u5e94\u7528 \u4f7f\u7528Docker\u7684\u6b65\u9aa4\uff1a 1\uff09\u3001\u5b89\u88c5Docker 2\uff09\u3001\u53bbDocker\u4ed3\u5e93\u627e\u5230\u8fd9\u4e2a\u8f6f\u4ef6\u5bf9\u5e94\u7684\u955c\u50cf\uff1b 3\uff09\u3001\u4f7f\u7528Docker\u8fd0\u884c\u8fd9\u4e2a\u955c\u50cf\uff0c\u8fd9\u4e2a\u955c\u50cf\u5c31\u4f1a\u751f\u6210\u4e00\u4e2aDocker\u5bb9\u5668\uff1b 4\uff09\u3001\u5bf9\u5bb9\u5668\u7684\u542f\u52a8\u505c\u6b62\u5c31\u662f\u5bf9\u8f6f\u4ef6\u7684\u542f\u52a8\u505c\u6b62\uff1b","title":"2\u3001\u6838\u5fc3\u6982\u5ff5"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#3docker","text":"","title":"3\u3001\u5b89\u88c5Docker"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#1linux","text":"\u200b 1\uff09\u3001VMWare\u3001VirtualBox\uff08\u5b89\u88c5\uff09\uff1b \u200b 2\uff09\u3001\u5bfc\u5165\u865a\u62df\u673a\u6587\u4ef6centos7-atguigu.ova\uff1b \u200b 3\uff09\u3001\u53cc\u51fb\u542f\u52a8linux\u865a\u62df\u673a;\u4f7f\u7528 root/ 123456\u767b\u9646 \u200b 4\uff09\u3001\u4f7f\u7528\u5ba2\u6237\u7aef\u8fde\u63a5linux\u670d\u52a1\u5668\u8fdb\u884c\u547d\u4ee4\u64cd\u4f5c\uff1b \u200b 5\uff09\u3001\u8bbe\u7f6e\u865a\u62df\u673a\u7f51\u7edc\uff1b \u200b \u6865\u63a5\u7f51\u7edc===\u9009\u597d\u7f51\u5361====\u63a5\u5165\u7f51\u7ebf\uff1b \u200b 6\uff09\u3001\u8bbe\u7f6e\u597d\u7f51\u7edc\u4ee5\u540e\u4f7f\u7528\u547d\u4ee4\u91cd\u542f\u865a\u62df\u673a\u7684\u7f51\u7edc service network restart \u200b 7\uff09\u3001\u67e5\u770blinux\u7684ip\u5730\u5740 ip addr \u200b 8\uff09\u3001\u4f7f\u7528\u5ba2\u6237\u7aef\u8fde\u63a5linux\uff1b","title":"1\uff09\u3001\u5b89\u88c5linux\u865a\u62df\u673a"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#2linuxdocker","text":"\u6b65\u9aa4\uff1a 1 \u3001\u68c0\u67e5\u5185\u6838\u7248\u672c\uff0c\u5fc5\u987b\u662f3.10\u53ca\u4ee5\u4e0a uname -r 2 \u3001\u5b89\u88c5docker yum install docker 3 \u3001\u8f93\u5165y\u786e\u8ba4\u5b89\u88c5 4 \u3001\u542f\u52a8docker [ root@localhost ~ ] # systemctl start docker [ root@localhost ~ ] # docker -v Docker version 1 .12.6, build 3e8e77d/1.12.6 5 \u3001\u5f00\u673a\u542f\u52a8docker [ root@localhost ~ ] # systemctl enable docker Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service. 6 \u3001\u505c\u6b62docker systemctl stop docker","title":"2\uff09\u3001\u5728linux\u865a\u62df\u673a\u4e0a\u5b89\u88c5docker"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#4docker","text":"","title":"4\u3001Docker\u5e38\u7528\u547d\u4ee4&amp;\u64cd\u4f5c"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#1_11","text":"\u64cd\u4f5c \u547d\u4ee4 \u8bf4\u660e \u68c0\u7d22 docker search \u5173\u952e\u5b57 eg\uff1adocker search redis \u6211\u4eec\u7ecf\u5e38\u53bbdocker hub\u4e0a\u68c0\u7d22\u955c\u50cf\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u5982\u955c\u50cf\u7684TAG\u3002 \u62c9\u53d6 docker pull \u955c\u50cf\u540d:tag :tag\u662f\u53ef\u9009\u7684\uff0ctag\u8868\u793a\u6807\u7b7e\uff0c\u591a\u4e3a\u8f6f\u4ef6\u7684\u7248\u672c\uff0c\u9ed8\u8ba4\u662flatest \u5217\u8868 docker images \u67e5\u770b\u6240\u6709\u672c\u5730\u955c\u50cf \u5220\u9664 docker rmi image-id \u5220\u9664\u6307\u5b9a\u7684\u672c\u5730\u955c\u50cf https://hub.docker.com/","title":"1\uff09\u3001\u955c\u50cf\u64cd\u4f5c"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#2_11","text":"\u8f6f\u4ef6\u955c\u50cf\uff08QQ\u5b89\u88c5\u7a0b\u5e8f\uff09----\u8fd0\u884c\u955c\u50cf----\u4ea7\u751f\u4e00\u4e2a\u5bb9\u5668\uff08\u6b63\u5728\u8fd0\u884c\u7684\u8f6f\u4ef6\uff0c\u8fd0\u884c\u7684QQ\uff09\uff1b \u6b65\u9aa4\uff1a 1 \u3001\u641c\u7d22\u955c\u50cf [ root@localhost ~ ] # docker search tomcat 2 \u3001\u62c9\u53d6\u955c\u50cf [ root@localhost ~ ] # docker pull tomcat 3 \u3001\u6839\u636e\u955c\u50cf\u542f\u52a8\u5bb9\u5668 docker run --name mytomcat -d tomcat:latest 4 \u3001docker ps \u67e5\u770b\u8fd0\u884c\u4e2d\u7684\u5bb9\u5668 5 \u3001 \u505c\u6b62\u8fd0\u884c\u4e2d\u7684\u5bb9\u5668 docker stop \u5bb9\u5668\u7684id 6 \u3001\u67e5\u770b\u6240\u6709\u7684\u5bb9\u5668 docker ps -a 7 \u3001\u542f\u52a8\u5bb9\u5668 docker start \u5bb9\u5668id 8 \u3001\u5220\u9664\u4e00\u4e2a\u5bb9\u5668 docker rm \u5bb9\u5668id 9 \u3001\u542f\u52a8\u4e00\u4e2a\u505a\u4e86\u7aef\u53e3\u6620\u5c04\u7684tomcat [ root@localhost ~ ] # docker run -d -p 8888:8080 tomcat -d\uff1a\u540e\u53f0\u8fd0\u884c -p: \u5c06\u4e3b\u673a\u7684\u7aef\u53e3\u6620\u5c04\u5230\u5bb9\u5668\u7684\u4e00\u4e2a\u7aef\u53e3 \u4e3b\u673a\u7aef\u53e3:\u5bb9\u5668\u5185\u90e8\u7684\u7aef\u53e3 10 \u3001\u4e3a\u4e86\u6f14\u793a\u7b80\u5355\u5173\u95ed\u4e86linux\u7684\u9632\u706b\u5899 service firewalld status \uff1b\u67e5\u770b\u9632\u706b\u5899\u72b6\u6001 service firewalld stop\uff1a\u5173\u95ed\u9632\u706b\u5899 11 \u3001\u67e5\u770b\u5bb9\u5668\u7684\u65e5\u5fd7 docker logs container-name/container-id \u66f4\u591a\u547d\u4ee4\u53c2\u770b https://docs.docker.com/engine/reference/commandline/docker/ \u53ef\u4ee5\u53c2\u8003\u6bcf\u4e00\u4e2a\u955c\u50cf\u7684\u6587\u6863","title":"2\uff09\u3001\u5bb9\u5668\u64cd\u4f5c"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#3mysql","text":"docker pull mysql \u9519\u8bef\u7684\u542f\u52a8 [ root@localhost ~ ] # docker run --name mysql01 -d mysql 42f09819908bb72dd99ae19e792e0a5d03c48638421fa64cce5f8ba0f40f5846 mysql\u9000\u51fa\u4e86 [ root@localhost ~ ] # docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 42f09819908b mysql \"docker-entrypoint.sh\" 34 seconds ago Exited ( 1 ) 33 seconds ago mysql01 538bde63e500 tomcat \"catalina.sh run\" About an hour ago Exited ( 143 ) About an hour ago compassionate_ goldstine c4f1ac60b3fc tomcat \"catalina.sh run\" About an hour ago Exited ( 143 ) About an hour ago lonely_fermi 81ec743a5271 tomcat \"catalina.sh run\" About an hour ago Exited ( 143 ) About an hour ago sick_ramanujan //\u9519\u8bef\u65e5\u5fd7 [ root@localhost ~ ] # docker logs 42f09819908b error: database is uninitialized and password option is not specified You need to specify one of MYSQL_ROOT_PASSWORD, MYSQL_ALLOW_EMPTY_PASSWORD and MYSQL_RANDOM_ROOT_PASSWORD\uff1b\u8fd9\u4e2a\u4e09\u4e2a\u53c2\u6570\u5fc5\u987b\u6307\u5b9a\u4e00\u4e2a \u6b63\u786e\u7684\u542f\u52a8 [ root@localhost ~ ] # docker run --name mysql01 -e MYSQL_ROOT_PASSWORD=123456 -d mysql b874c56bec49fb43024b3805ab51e9097da779f2f572c22c695305dedd684c5f [ root@localhost ~ ] # docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES b874c56bec49 mysql \"docker-entrypoint.sh\" 4 seconds ago Up 3 seconds 3306 /tcp mysql01 \u505a\u4e86\u7aef\u53e3\u6620\u5c04 [ root@localhost ~ ] # docker run -p 3306:3306 --name mysql02 -e MYSQL_ROOT_PASSWORD=123456 -d mysql ad10e4bc5c6a0f61cbad43898de71d366117d120e39db651844c0e73863b9434 [ root@localhost ~ ] # docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES ad10e4bc5c6a mysql \"docker-entrypoint.sh\" 4 seconds ago Up 2 seconds 0 .0.0.0:3306->3306/tcp mysql02 \u51e0\u4e2a\u5176\u4ed6\u7684\u9ad8\u7ea7\u64cd\u4f5c docker run --name mysql03 -v /conf/mysql:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag \u628a\u4e3b\u673a\u7684/conf/mysql\u6587\u4ef6\u5939\u6302\u8f7d\u5230 mysqldocker\u5bb9\u5668\u7684/etc/mysql/conf.d\u6587\u4ef6\u5939\u91cc\u9762 \u6539mysql\u7684\u914d\u7f6e\u6587\u4ef6\u5c31\u53ea\u9700\u8981\u628amysql\u914d\u7f6e\u6587\u4ef6\u653e\u5728\u81ea\u5b9a\u4e49\u7684\u6587\u4ef6\u5939\u4e0b\uff08/conf/mysql\uff09 docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci \u6307\u5b9amysql\u7684\u4e00\u4e9b\u914d\u7f6e\u53c2\u6570","title":"3\uff09\u3001\u5b89\u88c5MySQL\u793a\u4f8b"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#springboot","text":"","title":"\u516d\u3001SpringBoot\u4e0e\u6570\u636e\u8bbf\u95ee"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#1jdbc","text":"<dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-jdbc </artifactId> </dependency> <dependency> <groupId> mysql </groupId> <artifactId> mysql-connector-java </artifactId> <scope> runtime </scope> </dependency> spring : datasource : username : root password : 123456 url : jdbc:mysql://192.168.15.22:3306/jdbc driver-class-name : com.mysql.jdbc.Driver \u6548\u679c\uff1a \u200b \u9ed8\u8ba4\u662f\u7528org.apache.tomcat.jdbc.pool.DataSource\u4f5c\u4e3a\u6570\u636e\u6e90\uff1b \u200b \u6570\u636e\u6e90\u7684\u76f8\u5173\u914d\u7f6e\u90fd\u5728DataSourceProperties\u91cc\u9762\uff1b \u81ea\u52a8\u914d\u7f6e\u539f\u7406\uff1a org.springframework.boot.autoconfigure.jdbc\uff1a 1\u3001\u53c2\u8003DataSourceConfiguration\uff0c\u6839\u636e\u914d\u7f6e\u521b\u5efa\u6570\u636e\u6e90\uff0c\u9ed8\u8ba4\u4f7f\u7528Tomcat\u8fde\u63a5\u6c60\uff1b\u53ef\u4ee5\u4f7f\u7528spring.datasource.type\u6307\u5b9a\u81ea\u5b9a\u4e49\u7684\u6570\u636e\u6e90\u7c7b\u578b\uff1b 2\u3001SpringBoot\u9ed8\u8ba4\u53ef\u4ee5\u652f\u6301\uff1b org.apache.tomcat.jdbc.pool.DataSource\u3001HikariDataSource\u3001BasicDataSource\u3001 3\u3001\u81ea\u5b9a\u4e49\u6570\u636e\u6e90\u7c7b\u578b /** * Generic DataSource configuration. */ @ConditionalOnMissingBean ( DataSource . class ) @ConditionalOnProperty ( name = \"spring.datasource.type\" ) static class Generic { @Bean public DataSource dataSource ( DataSourceProperties properties ) { //\u4f7f\u7528DataSourceBuilder\u521b\u5efa\u6570\u636e\u6e90\uff0c\u5229\u7528\u53cd\u5c04\u521b\u5efa\u54cd\u5e94type\u7684\u6570\u636e\u6e90\uff0c\u5e76\u4e14\u7ed1\u5b9a\u76f8\u5173\u5c5e\u6027 return properties . initializeDataSourceBuilder (). build (); } } 4\u3001 DataSourceInitializer\uff1aApplicationListener \uff1b \u200b \u4f5c\u7528\uff1a \u200b 1\uff09\u3001runSchemaScripts();\u8fd0\u884c\u5efa\u8868\u8bed\u53e5\uff1b \u200b 2\uff09\u3001runDataScripts();\u8fd0\u884c\u63d2\u5165\u6570\u636e\u7684sql\u8bed\u53e5\uff1b \u9ed8\u8ba4\u53ea\u9700\u8981\u5c06\u6587\u4ef6\u547d\u540d\u4e3a\uff1a schema-*.sql\u3001data-*.sql \u9ed8\u8ba4\u89c4\u5219\uff1aschema.sql\uff0cschema-all.sql\uff1b \u53ef\u4ee5\u4f7f\u7528 schema : - classpath : department.sql \u6307\u5b9a\u4f4d\u7f6e 5\u3001\u64cd\u4f5c\u6570\u636e\u5e93\uff1a\u81ea\u52a8\u914d\u7f6e\u4e86JdbcTemplate\u64cd\u4f5c\u6570\u636e\u5e93","title":"1\u3001JDBC"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#2druid","text":"\u5bfc\u5165druid\u6570\u636e\u6e90 @Configuration public class DruidConfig { @ConfigurationProperties ( prefix = \"spring.datasource\" ) @Bean public DataSource druid (){ return new DruidDataSource (); } //\u914d\u7f6eDruid\u7684\u76d1\u63a7 //1\u3001\u914d\u7f6e\u4e00\u4e2a\u7ba1\u7406\u540e\u53f0\u7684Servlet @Bean public ServletRegistrationBean statViewServlet (){ ServletRegistrationBean bean = new ServletRegistrationBean ( new StatViewServlet (), \"/druid/*\" ); Map < String , String > initParams = new HashMap <> (); initParams . put ( \"loginUsername\" , \"admin\" ); initParams . put ( \"loginPassword\" , \"123456\" ); initParams . put ( \"allow\" , \"\" ); //\u9ed8\u8ba4\u5c31\u662f\u5141\u8bb8\u6240\u6709\u8bbf\u95ee initParams . put ( \"deny\" , \"192.168.15.21\" ); bean . setInitParameters ( initParams ); return bean ; } //2\u3001\u914d\u7f6e\u4e00\u4e2aweb\u76d1\u63a7\u7684filter @Bean public FilterRegistrationBean webStatFilter (){ FilterRegistrationBean bean = new FilterRegistrationBean (); bean . setFilter ( new WebStatFilter ()); Map < String , String > initParams = new HashMap <> (); initParams . put ( \"exclusions\" , \"*.js,*.css,/druid/*\" ); bean . setInitParameters ( initParams ); bean . setUrlPatterns ( Arrays . asList ( \"/*\" )); return bean ; } }","title":"2\u3001\u6574\u5408Druid\u6570\u636e\u6e90"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#3mybatis","text":"<dependency> <groupId> org.mybatis.spring.boot </groupId> <artifactId> mybatis-spring-boot-starter </artifactId> <version> 1.3.1 </version> </dependency> \u6b65\u9aa4\uff1a \u200b 1\uff09\u3001\u914d\u7f6e\u6570\u636e\u6e90\u76f8\u5173\u5c5e\u6027\uff08\u89c1\u4e0a\u4e00\u8282Druid\uff09 \u200b 2\uff09\u3001\u7ed9\u6570\u636e\u5e93\u5efa\u8868 \u200b 3\uff09\u3001\u521b\u5efaJavaBean","title":"3\u3001\u6574\u5408MyBatis"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#4_3","text":"//\u6307\u5b9a\u8fd9\u662f\u4e00\u4e2a\u64cd\u4f5c\u6570\u636e\u5e93\u7684mapper @Mapper public interface DepartmentMapper { @Select ( \"select * from department where id=#{id}\" ) public Department getDeptById ( Integer id ); @Delete ( \"delete from department where id=#{id}\" ) public int deleteDeptById ( Integer id ); @Options ( useGeneratedKeys = true , keyProperty = \"id\" ) @Insert ( \"insert into department(departmentName) values(#{departmentName})\" ) public int insertDept ( Department department ); @Update ( \"update department set departmentName=#{departmentName} where id=#{id}\" ) public int updateDept ( Department department ); } \u95ee\u9898\uff1a \u81ea\u5b9a\u4e49MyBatis\u7684\u914d\u7f6e\u89c4\u5219\uff1b\u7ed9\u5bb9\u5668\u4e2d\u6dfb\u52a0\u4e00\u4e2aConfigurationCustomizer\uff1b @org.springframework.context.annotation.Configuration public class MyBatisConfig { @Bean public ConfigurationCustomizer configurationCustomizer (){ return new ConfigurationCustomizer (){ @Override public void customize ( Configuration configuration ) { configuration . setMapUnderscoreToCamelCase ( true ); } }; } } \u4f7f\u7528MapperScan\u6279\u91cf\u626b\u63cf\u6240\u6709\u7684Mapper\u63a5\u53e3 \uff1b @MapperScan ( value = \"com.atguigu.springboot.mapper\" ) @SpringBootApplication public class SpringBoot06DataMybatisApplication { public static void main ( String [] args ) { SpringApplication . run ( SpringBoot06DataMybatisApplication . class , args ); } }","title":"4\uff09\u3001\u6ce8\u89e3\u7248"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#5_2","text":"mybatis : config-location : classpath:mybatis/mybatis-config.xml \u6307\u5b9a\u5168\u5c40\u914d\u7f6e\u6587\u4ef6\u7684\u4f4d\u7f6e mapper-locations : classpath:mybatis/mapper/*.xml \u6307\u5b9asql\u6620\u5c04\u6587\u4ef6\u7684\u4f4d\u7f6e \u66f4\u591a\u4f7f\u7528\u53c2\u7167 http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/","title":"5\uff09\u3001\u914d\u7f6e\u6587\u4ef6\u7248"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#4springdata-jpa","text":"","title":"4\u3001\u6574\u5408SpringData JPA"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#1springdata","text":"","title":"1\uff09\u3001SpringData\u7b80\u4ecb"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#2springdata-jpa","text":"JPA:ORM\uff08Object Relational Mapping\uff09\uff1b 1\uff09\u3001\u7f16\u5199\u4e00\u4e2a\u5b9e\u4f53\u7c7b\uff08bean\uff09\u548c\u6570\u636e\u8868\u8fdb\u884c\u6620\u5c04\uff0c\u5e76\u4e14\u914d\u7f6e\u597d\u6620\u5c04\u5173\u7cfb\uff1b //\u4f7f\u7528JPA\u6ce8\u89e3\u914d\u7f6e\u6620\u5c04\u5173\u7cfb @Entity //\u544a\u8bc9JPA\u8fd9\u662f\u4e00\u4e2a\u5b9e\u4f53\u7c7b\uff08\u548c\u6570\u636e\u8868\u6620\u5c04\u7684\u7c7b\uff09 @Table ( name = \"tbl_user\" ) //@Table\u6765\u6307\u5b9a\u548c\u54ea\u4e2a\u6570\u636e\u8868\u5bf9\u5e94;\u5982\u679c\u7701\u7565\u9ed8\u8ba4\u8868\u540d\u5c31\u662fuser\uff1b public class User { @Id //\u8fd9\u662f\u4e00\u4e2a\u4e3b\u952e @GeneratedValue ( strategy = GenerationType . IDENTITY ) //\u81ea\u589e\u4e3b\u952e private Integer id ; @Column ( name = \"last_name\" , length = 50 ) //\u8fd9\u662f\u548c\u6570\u636e\u8868\u5bf9\u5e94\u7684\u4e00\u4e2a\u5217 private String lastName ; @Column //\u7701\u7565\u9ed8\u8ba4\u5217\u540d\u5c31\u662f\u5c5e\u6027\u540d private String email ; 2\uff09\u3001\u7f16\u5199\u4e00\u4e2aDao\u63a5\u53e3\u6765\u64cd\u4f5c\u5b9e\u4f53\u7c7b\u5bf9\u5e94\u7684\u6570\u636e\u8868\uff08Repository\uff09 //\u7ee7\u627fJpaRepository\u6765\u5b8c\u6210\u5bf9\u6570\u636e\u5e93\u7684\u64cd\u4f5c public interface UserRepository extends JpaRepository < User , Integer > { } 3\uff09\u3001\u57fa\u672c\u7684\u914d\u7f6eJpaProperties spring : jpa : hibernate : # \u66f4\u65b0\u6216\u8005\u521b\u5efa\u6570\u636e\u8868\u7ed3\u6784 ddl-auto : update # \u63a7\u5236\u53f0\u663e\u793aSQL show-sql : true","title":"2\uff09\u3001\u6574\u5408SpringData JPA"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#_6","text":"\u51e0\u4e2a\u91cd\u8981\u7684\u4e8b\u4ef6\u56de\u8c03\u673a\u5236 \u914d\u7f6e\u5728META-INF/spring.factories ApplicationContextInitializer SpringApplicationRunListener \u53ea\u9700\u8981\u653e\u5728ioc\u5bb9\u5668\u4e2d ApplicationRunner CommandLineRunner \u542f\u52a8\u6d41\u7a0b\uff1a","title":"\u4e03\u3001\u542f\u52a8\u914d\u7f6e\u539f\u7406"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#1springapplication","text":"initialize ( sources ); private void initialize ( Object [] sources ) { //\u4fdd\u5b58\u4e3b\u914d\u7f6e\u7c7b if ( sources != null && sources . length > 0 ) { this . sources . addAll ( Arrays . asList ( sources )); } //\u5224\u65ad\u5f53\u524d\u662f\u5426\u4e00\u4e2aweb\u5e94\u7528 this . webEnvironment = deduceWebEnvironment (); //\u4ece\u7c7b\u8def\u5f84\u4e0b\u627e\u5230META-INF/spring.factories\u914d\u7f6e\u7684\u6240\u6709ApplicationContextInitializer\uff1b\u7136\u540e\u4fdd\u5b58\u8d77\u6765 setInitializers (( Collection ) getSpringFactoriesInstances ( ApplicationContextInitializer . class )); //\u4ece\u7c7b\u8def\u5f84\u4e0b\u627e\u5230ETA-INF/spring.factories\u914d\u7f6e\u7684\u6240\u6709ApplicationListener setListeners (( Collection ) getSpringFactoriesInstances ( ApplicationListener . class )); //\u4ece\u591a\u4e2a\u914d\u7f6e\u7c7b\u4e2d\u627e\u5230\u6709main\u65b9\u6cd5\u7684\u4e3b\u914d\u7f6e\u7c7b this . mainApplicationClass = deduceMainApplicationClass (); }","title":"1\u3001\u521b\u5efaSpringApplication\u5bf9\u8c61"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#2run","text":"public ConfigurableApplicationContext run ( String ... args ) { StopWatch stopWatch = new StopWatch (); stopWatch . start (); ConfigurableApplicationContext context = null ; FailureAnalyzers analyzers = null ; configureHeadlessProperty (); //\u83b7\u53d6SpringApplicationRunListeners\uff1b\u4ece\u7c7b\u8def\u5f84\u4e0bMETA-INF/spring.factories SpringApplicationRunListeners listeners = getRunListeners ( args ); //\u56de\u8c03\u6240\u6709\u7684\u83b7\u53d6SpringApplicationRunListener.starting()\u65b9\u6cd5 listeners . starting (); try { //\u5c01\u88c5\u547d\u4ee4\u884c\u53c2\u6570 ApplicationArguments applicationArguments = new DefaultApplicationArguments ( args ); //\u51c6\u5907\u73af\u5883 ConfigurableEnvironment environment = prepareEnvironment ( listeners , applicationArguments ); //\u521b\u5efa\u73af\u5883\u5b8c\u6210\u540e\u56de\u8c03SpringApplicationRunListener.environmentPrepared()\uff1b\u8868\u793a\u73af\u5883\u51c6\u5907\u5b8c\u6210 Banner printedBanner = printBanner ( environment ); //\u521b\u5efaApplicationContext\uff1b\u51b3\u5b9a\u521b\u5efaweb\u7684ioc\u8fd8\u662f\u666e\u901a\u7684ioc context = createApplicationContext (); analyzers = new FailureAnalyzers ( context ); //\u51c6\u5907\u4e0a\u4e0b\u6587\u73af\u5883;\u5c06environment\u4fdd\u5b58\u5230ioc\u4e2d\uff1b\u800c\u4e14applyInitializers()\uff1b //applyInitializers()\uff1a\u56de\u8c03\u4e4b\u524d\u4fdd\u5b58\u7684\u6240\u6709\u7684ApplicationContextInitializer\u7684initialize\u65b9\u6cd5 //\u56de\u8c03\u6240\u6709\u7684SpringApplicationRunListener\u7684contextPrepared()\uff1b // prepareContext ( context , environment , listeners , applicationArguments , printedBanner ); //prepareContext\u8fd0\u884c\u5b8c\u6210\u4ee5\u540e\u56de\u8c03\u6240\u6709\u7684SpringApplicationRunListener\u7684contextLoaded\uff08\uff09\uff1b //s\u5237\u65b0\u5bb9\u5668\uff1bioc\u5bb9\u5668\u521d\u59cb\u5316\uff08\u5982\u679c\u662fweb\u5e94\u7528\u8fd8\u4f1a\u521b\u5efa\u5d4c\u5165\u5f0f\u7684Tomcat\uff09\uff1bSpring\u6ce8\u89e3\u7248 //\u626b\u63cf\uff0c\u521b\u5efa\uff0c\u52a0\u8f7d\u6240\u6709\u7ec4\u4ef6\u7684\u5730\u65b9\uff1b\uff08\u914d\u7f6e\u7c7b\uff0c\u7ec4\u4ef6\uff0c\u81ea\u52a8\u914d\u7f6e\uff09 refreshContext ( context ); //\u4eceioc\u5bb9\u5668\u4e2d\u83b7\u53d6\u6240\u6709\u7684ApplicationRunner\u548cCommandLineRunner\u8fdb\u884c\u56de\u8c03 //ApplicationRunner\u5148\u56de\u8c03\uff0cCommandLineRunner\u518d\u56de\u8c03 afterRefresh ( context , applicationArguments ); //\u6240\u6709\u7684SpringApplicationRunListener\u56de\u8c03finished\u65b9\u6cd5 listeners . finished ( context , null ); stopWatch . stop (); if ( this . logStartupInfo ) { new StartupInfoLogger ( this . mainApplicationClass ) . logStarted ( getApplicationLog (), stopWatch ); } //\u6574\u4e2aSpringBoot\u5e94\u7528\u542f\u52a8\u5b8c\u6210\u4ee5\u540e\u8fd4\u56de\u542f\u52a8\u7684ioc\u5bb9\u5668\uff1b return context ; } catch ( Throwable ex ) { handleRunFailure ( context , listeners , analyzers , ex ); throw new IllegalStateException ( ex ); } }","title":"2\u3001\u8fd0\u884crun\u65b9\u6cd5"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#3_7","text":"\u914d\u7f6e\u5728META-INF/spring.factories ApplicationContextInitializer public class HelloApplicationContextInitializer implements ApplicationContextInitializer < ConfigurableApplicationContext > { @Override public void initialize ( ConfigurableApplicationContext applicationContext ) { System . out . println ( \"ApplicationContextInitializer...initialize...\" + applicationContext ); } } SpringApplicationRunListener public class HelloSpringApplicationRunListener implements SpringApplicationRunListener { //\u5fc5\u987b\u6709\u7684\u6784\u9020\u5668 public HelloSpringApplicationRunListener ( SpringApplication application , String [] args ){ } @Override public void starting () { System . out . println ( \"SpringApplicationRunListener...starting...\" ); } @Override public void environmentPrepared ( ConfigurableEnvironment environment ) { Object o = environment . getSystemProperties (). get ( \"os.name\" ); System . out . println ( \"SpringApplicationRunListener...environmentPrepared..\" + o ); } @Override public void contextPrepared ( ConfigurableApplicationContext context ) { System . out . println ( \"SpringApplicationRunListener...contextPrepared...\" ); } @Override public void contextLoaded ( ConfigurableApplicationContext context ) { System . out . println ( \"SpringApplicationRunListener...contextLoaded...\" ); } @Override public void finished ( ConfigurableApplicationContext context , Throwable exception ) { System . out . println ( \"SpringApplicationRunListener...finished...\" ); } } \u914d\u7f6e\uff08META-INF/spring.factories\uff09 org.springframework.context.ApplicationContextInitializer = \\ com.atguigu.springboot.listener.HelloApplicationContextInitializer org.springframework.boot.SpringApplicationRunListener = \\ com.atguigu.springboot.listener.HelloSpringApplicationRunListener \u53ea\u9700\u8981\u653e\u5728ioc\u5bb9\u5668\u4e2d ApplicationRunner @Component public class HelloApplicationRunner implements ApplicationRunner { @Override public void run ( ApplicationArguments args ) throws Exception { System . out . println ( \"ApplicationRunner...run....\" ); } } CommandLineRunner @Component public class HelloCommandLineRunner implements CommandLineRunner { @Override public void run ( String ... args ) throws Exception { System . out . println ( \"CommandLineRunner...run...\" + Arrays . asList ( args )); } }","title":"3\u3001\u4e8b\u4ef6\u76d1\u542c\u673a\u5236"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#starter","text":"starter\uff1a \u200b 1\u3001\u8fd9\u4e2a\u573a\u666f\u9700\u8981\u4f7f\u7528\u5230\u7684\u4f9d\u8d56\u662f\u4ec0\u4e48\uff1f \u200b 2\u3001\u5982\u4f55\u7f16\u5199\u81ea\u52a8\u914d\u7f6e @Configuration //\u6307\u5b9a\u8fd9\u4e2a\u7c7b\u662f\u4e00\u4e2a\u914d\u7f6e\u7c7b @ConditionalOnXXX //\u5728\u6307\u5b9a\u6761\u4ef6\u6210\u7acb\u7684\u60c5\u51b5\u4e0b\u81ea\u52a8\u914d\u7f6e\u7c7b\u751f\u6548 @AutoConfigureAfter //\u6307\u5b9a\u81ea\u52a8\u914d\u7f6e\u7c7b\u7684\u987a\u5e8f @Bean //\u7ed9\u5bb9\u5668\u4e2d\u6dfb\u52a0\u7ec4\u4ef6 @ConfigurationPropertie\u7ed3\u5408\u76f8\u5173xxxProperties\u7c7b\u6765\u7ed1\u5b9a\u76f8\u5173\u7684\u914d\u7f6e @EnableConfigurationProperties //\u8ba9xxxProperties\u751f\u6548\u52a0\u5165\u5230\u5bb9\u5668\u4e2d \u81ea\u52a8\u914d\u7f6e\u7c7b\u8981\u80fd\u52a0\u8f7d \u5c06\u9700\u8981\u542f\u52a8\u5c31\u52a0\u8f7d\u7684\u81ea\u52a8\u914d\u7f6e\u7c7b \uff0c \u914d\u7f6e\u5728META - INF / spring . factories org . springframework . boot . autoconfigure . EnableAutoConfiguration = \\ org . springframework . boot . autoconfigure . admin . SpringApplicationAdminJmxAutoConfiguration , \\ org . springframework . boot . autoconfigure . aop . AopAutoConfiguration , \\ \u200b 3\u3001\u6a21\u5f0f\uff1a \u542f\u52a8\u5668\u53ea\u7528\u6765\u505a\u4f9d\u8d56\u5bfc\u5165\uff1b \u4e13\u95e8\u6765\u5199\u4e00\u4e2a\u81ea\u52a8\u914d\u7f6e\u6a21\u5757\uff1b \u542f\u52a8\u5668\u4f9d\u8d56\u81ea\u52a8\u914d\u7f6e\uff1b\u522b\u4eba\u53ea\u9700\u8981\u5f15\u5165\u542f\u52a8\u5668\uff08starter\uff09 mybatis-spring-boot-starter\uff1b\u81ea\u5b9a\u4e49\u542f\u52a8\u5668\u540d-spring-boot-starter \u6b65\u9aa4\uff1a 1\uff09\u3001\u542f\u52a8\u5668\u6a21\u5757 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <groupId> com.atguigu.starter </groupId> <artifactId> atguigu-spring-boot-starter </artifactId> <version> 1.0-SNAPSHOT </version> <!--\u542f\u52a8\u5668--> <dependencies> <!--\u5f15\u5165\u81ea\u52a8\u914d\u7f6e\u6a21\u5757--> <dependency> <groupId> com.atguigu.starter </groupId> <artifactId> atguigu-spring-boot-starter-autoconfigurer </artifactId> <version> 0.0.1-SNAPSHOT </version> </dependency> </dependencies> </project> 2\uff09\u3001\u81ea\u52a8\u914d\u7f6e\u6a21\u5757 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <groupId> com.atguigu.starter </groupId> <artifactId> atguigu-spring-boot-starter-autoconfigurer </artifactId> <version> 0.0.1-SNAPSHOT </version> <packaging> jar </packaging> <name> atguigu-spring-boot-starter-autoconfigurer </name> <description> Demo project for Spring Boot </description> <parent> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-parent </artifactId> <version> 1.5.10.RELEASE </version> <relativePath/> <!-- lookup parent from repository --> </parent> <properties> <project.build.sourceEncoding> UTF-8 </project.build.sourceEncoding> <project.reporting.outputEncoding> UTF-8 </project.reporting.outputEncoding> <java.version> 1.8 </java.version> </properties> <dependencies> <!--\u5f15\u5165spring-boot-starter\uff1b\u6240\u6709starter\u7684\u57fa\u672c\u914d\u7f6e--> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter </artifactId> </dependency> </dependencies> </project> package com.atguigu.starter ; import org.springframework.boot.context.properties.ConfigurationProperties ; @ConfigurationProperties ( prefix = \"atguigu.hello\" ) public class HelloProperties { private String prefix ; private String suffix ; public String getPrefix () { return prefix ; } public void setPrefix ( String prefix ) { this . prefix = prefix ; } public String getSuffix () { return suffix ; } public void setSuffix ( String suffix ) { this . suffix = suffix ; } } package com.atguigu.starter ; public class HelloService { HelloProperties helloProperties ; public HelloProperties getHelloProperties () { return helloProperties ; } public void setHelloProperties ( HelloProperties helloProperties ) { this . helloProperties = helloProperties ; } public String sayHellAtguigu ( String name ){ return helloProperties . getPrefix () + \"-\" + name + helloProperties . getSuffix (); } } package com.atguigu.starter ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication ; import org.springframework.boot.context.properties.EnableConfigurationProperties ; import org.springframework.context.annotation.Bean ; import org.springframework.context.annotation.Configuration ; @Configuration @ConditionalOnWebApplication //web\u5e94\u7528\u624d\u751f\u6548 @EnableConfigurationProperties ( HelloProperties . class ) public class HelloServiceAutoConfiguration { @Autowired HelloProperties helloProperties ; @Bean public HelloService helloService (){ HelloService service = new HelloService (); service . setHelloProperties ( helloProperties ); return service ; } }","title":"\u516b\u3001\u81ea\u5b9a\u4e49starter"},{"location":"SpringBoot/SpringBoot%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/#springboot_1","text":"https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples","title":"\u66f4\u591aSpringBoot\u6574\u5408\u793a\u4f8b"},{"location":"SpringBoot/springboot-%E9%AB%98%E7%BA%A7/","text":"\u4e00\u3001Spring Boot\u4e0e\u7f13\u5b58 \u00b6 1. JSR-107 \u00b6 \u4e86\u89e3 2. spring \u7f13\u5b58\u62bd\u8c61 \u00b6 \u51e0\u4e2a\u91cd\u8981\u7684\u6982\u5ff5&\u7f13\u5b58\u6ce8\u89e3 \u00b6 \u6982\u5ff5&\u6ce8\u89e3 \u89e3\u91ca Cache \u7f13\u5b58\u63a5\u53e3, \u5b9a\u4e49\u7f13\u5b58\u64cd\u4f5c. \u5b9e\u73b0\u6709: RedisCache\u3001EhCacheCache\u3001ConcurrentMapCache\u7b49 CacheManager \u7f13\u5b58\u7ba1\u7406\u5668, \u7ba1\u7406\u5404\u79cd\u7f13\u5b58(Cache)\u7ec4\u4ef6 @Cacheable \u4e3b\u8981\u9488\u5bf9\u65b9\u6cd5\u914d\u7f6e, \u80fd\u591f\u6839\u636e\u65b9\u6cd5\u7684\u8bf7\u6c42\u53c2\u6570\u5bf9\u5176\u7ed3\u679c\u8fdb\u884c\u7f13\u5b58<\u6dfb\u52a0\u7f13\u5b58> @CacheEvict \u6e05\u7a7a\u7f13\u5b58 @CachePut \u4fdd\u8bc1\u65b9\u6cd5\u88ab\u8c03\u7528, \u53c8\u5e0c\u671b\u7ed3\u679c\u88ab\u7f13\u5b58<\u66f4\u65b0\u7f13\u5b58> @EnableCaching \u5f00\u542f\u57fa\u4e8e\u6ce8\u89e3\u7684\u7f13\u5b58 keyGenerator \u7f13\u5b58\u6570\u636e\u65f6key\u751f\u6210\u7b56\u7565 serialize \u7f13\u5b58\u6570\u636e\u662fvalue\u5e8f\u5217\u5316\u7b56\u7565 @Cacheable/@CachePut/@CacheEvict \u4e3b\u8981\u7684\u53c2\u6570 \u00b6 \u53c2\u6570 \u89e3\u91ca \u4f8b\u5b50 value \u7f13\u5b58\u7684\u540d\u79f0\uff0c\u5728spring \u914d\u7f6e\u6587\u4ef6\u4e2d\u5b9a\u4e49\uff0c\u5fc5\u987b\u6307\u5b9a\u81f3\u5c11\u4e00\u4e2a \u4f8b\u5982\uff1a @Cacheable(value=\u201dmycache\u201d) \u6216\u8005@Cacheable(value={\u201dcache1\u201d,\u201dcache2\u201d} key \u7f13\u5b58\u7684key\uff0c\u53ef\u4ee5\u4e3a\u7a7a\uff0c\u5982\u679c\u6307\u5b9a\u8981\u6309\u7167SpEL \u8868\u8fbe\u5f0f\u7f16\u5199\uff0c\u5982\u679c\u4e0d\u6307\u5b9a\uff0c\u5219\u7f3a\u7701\u6309\u7167\u65b9\u6cd5\u7684\u6240\u6709\u53c2\u6570\u8fdb\u884c\u7ec4\u5408 \u4f8b\u5982\uff1a @Cacheable(value=\u201dtestcache\u201d, key=\u201d#userName\u201d) condition \u7f13\u5b58\u7684\u6761\u4ef6\uff0c\u53ef\u4ee5\u4e3a\u7a7a\uff0c\u4f7f\u7528SpEL \u7f16\u5199\uff0c\u8fd4\u56detrue \u6216\u8005false\uff0c\u53ea\u6709\u4e3atrue \u624d\u8fdb\u884c\u7f13\u5b58/\u6e05\u9664\u7f13\u5b58\uff0c\u5728\u8c03\u7528\u65b9\u6cd5\u4e4b\u524d\u4e4b\u540e\u90fd\u80fd\u5224\u65ad \u4f8b\u5982\uff1a @Cacheable(value=\u201dtestcache\u201d, condition=\u201d#userName.length()>2\u201d) allEntries (@CacheEvict ) \u662f\u5426\u6e05\u7a7a\u6240\u6709\u7f13\u5b58\u5185\u5bb9\uff0c\u7f3a\u7701\u4e3afalse\uff0c\u5982\u679c\u6307\u5b9a\u4e3atrue\uff0c\u5219\u65b9\u6cd5\u8c03\u7528\u540e\u5c06\u7acb\u5373\u6e05\u7a7a\u6240\u6709\u7f13\u5b58 \u4f8b\u5982\uff1a @CachEvict(value=\u201dtestcache\u201d, allEntries=true) beforeInvocation (@CacheEvict) \u662f\u5426\u5728\u65b9\u6cd5\u6267\u884c\u524d\u5c31\u6e05\u7a7a\uff0c\u7f3a\u7701\u4e3afalse\uff0c\u5982\u679c\u6307\u5b9a\u4e3atrue\uff0c\u5219\u5728\u65b9\u6cd5\u8fd8\u6ca1\u6709\u6267\u884c\u7684\u65f6\u5019\u5c31\u6e05\u7a7a\u7f13\u5b58\uff0c\u7f3a\u7701\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u65b9\u6cd5\u6267\u884c\u629b\u51fa\u5f02\u5e38\uff0c\u5219\u4e0d\u4f1a\u6e05\u7a7a\u7f13\u5b58 \u4f8b\u5982\uff1a @CachEvict(value=\u201dtestcache\u201d\uff0cbeforeInvocation=true) unless (@CachePut) (@Cacheable) \u7528\u4e8e\u5426\u51b3\u7f13\u5b58\u7684\uff0c\u4e0d\u50cfcondition\uff0c\u8be5\u8868\u8fbe\u5f0f\u53ea\u5728\u65b9\u6cd5\u6267\u884c\u4e4b\u540e\u5224\u65ad\uff0c\u6b64\u65f6\u53ef\u4ee5\u62ff\u5230\u8fd4\u56de\u503cresult\u8fdb\u884c\u5224\u65ad\u3002\u6761\u4ef6\u4e3atrue\u4e0d\u4f1a\u7f13\u5b58\uff0cfasle\u624d\u7f13\u5b58 \u4f8b\u5982\uff1a@Cacheable(value=\u201dtestcache\u201d, unless=\u201d#result == null\u201d)","title":"springboot-\u9ad8\u7ea7"},{"location":"SpringBoot/springboot-%E9%AB%98%E7%BA%A7/#spring-boot","text":"","title":"\u4e00\u3001Spring Boot\u4e0e\u7f13\u5b58"},{"location":"SpringBoot/springboot-%E9%AB%98%E7%BA%A7/#1-jsr-107","text":"\u4e86\u89e3","title":"1. JSR-107"},{"location":"SpringBoot/springboot-%E9%AB%98%E7%BA%A7/#2-spring","text":"","title":"2. spring \u7f13\u5b58\u62bd\u8c61"},{"location":"SpringBoot/springboot-%E9%AB%98%E7%BA%A7/#_1","text":"\u6982\u5ff5&\u6ce8\u89e3 \u89e3\u91ca Cache \u7f13\u5b58\u63a5\u53e3, \u5b9a\u4e49\u7f13\u5b58\u64cd\u4f5c. \u5b9e\u73b0\u6709: RedisCache\u3001EhCacheCache\u3001ConcurrentMapCache\u7b49 CacheManager \u7f13\u5b58\u7ba1\u7406\u5668, \u7ba1\u7406\u5404\u79cd\u7f13\u5b58(Cache)\u7ec4\u4ef6 @Cacheable \u4e3b\u8981\u9488\u5bf9\u65b9\u6cd5\u914d\u7f6e, \u80fd\u591f\u6839\u636e\u65b9\u6cd5\u7684\u8bf7\u6c42\u53c2\u6570\u5bf9\u5176\u7ed3\u679c\u8fdb\u884c\u7f13\u5b58<\u6dfb\u52a0\u7f13\u5b58> @CacheEvict \u6e05\u7a7a\u7f13\u5b58 @CachePut \u4fdd\u8bc1\u65b9\u6cd5\u88ab\u8c03\u7528, \u53c8\u5e0c\u671b\u7ed3\u679c\u88ab\u7f13\u5b58<\u66f4\u65b0\u7f13\u5b58> @EnableCaching \u5f00\u542f\u57fa\u4e8e\u6ce8\u89e3\u7684\u7f13\u5b58 keyGenerator \u7f13\u5b58\u6570\u636e\u65f6key\u751f\u6210\u7b56\u7565 serialize \u7f13\u5b58\u6570\u636e\u662fvalue\u5e8f\u5217\u5316\u7b56\u7565","title":"\u51e0\u4e2a\u91cd\u8981\u7684\u6982\u5ff5&amp;\u7f13\u5b58\u6ce8\u89e3"},{"location":"SpringBoot/springboot-%E9%AB%98%E7%BA%A7/#cacheablecacheputcacheevict","text":"\u53c2\u6570 \u89e3\u91ca \u4f8b\u5b50 value \u7f13\u5b58\u7684\u540d\u79f0\uff0c\u5728spring \u914d\u7f6e\u6587\u4ef6\u4e2d\u5b9a\u4e49\uff0c\u5fc5\u987b\u6307\u5b9a\u81f3\u5c11\u4e00\u4e2a \u4f8b\u5982\uff1a @Cacheable(value=\u201dmycache\u201d) \u6216\u8005@Cacheable(value={\u201dcache1\u201d,\u201dcache2\u201d} key \u7f13\u5b58\u7684key\uff0c\u53ef\u4ee5\u4e3a\u7a7a\uff0c\u5982\u679c\u6307\u5b9a\u8981\u6309\u7167SpEL \u8868\u8fbe\u5f0f\u7f16\u5199\uff0c\u5982\u679c\u4e0d\u6307\u5b9a\uff0c\u5219\u7f3a\u7701\u6309\u7167\u65b9\u6cd5\u7684\u6240\u6709\u53c2\u6570\u8fdb\u884c\u7ec4\u5408 \u4f8b\u5982\uff1a @Cacheable(value=\u201dtestcache\u201d, key=\u201d#userName\u201d) condition \u7f13\u5b58\u7684\u6761\u4ef6\uff0c\u53ef\u4ee5\u4e3a\u7a7a\uff0c\u4f7f\u7528SpEL \u7f16\u5199\uff0c\u8fd4\u56detrue \u6216\u8005false\uff0c\u53ea\u6709\u4e3atrue \u624d\u8fdb\u884c\u7f13\u5b58/\u6e05\u9664\u7f13\u5b58\uff0c\u5728\u8c03\u7528\u65b9\u6cd5\u4e4b\u524d\u4e4b\u540e\u90fd\u80fd\u5224\u65ad \u4f8b\u5982\uff1a @Cacheable(value=\u201dtestcache\u201d, condition=\u201d#userName.length()>2\u201d) allEntries (@CacheEvict ) \u662f\u5426\u6e05\u7a7a\u6240\u6709\u7f13\u5b58\u5185\u5bb9\uff0c\u7f3a\u7701\u4e3afalse\uff0c\u5982\u679c\u6307\u5b9a\u4e3atrue\uff0c\u5219\u65b9\u6cd5\u8c03\u7528\u540e\u5c06\u7acb\u5373\u6e05\u7a7a\u6240\u6709\u7f13\u5b58 \u4f8b\u5982\uff1a @CachEvict(value=\u201dtestcache\u201d, allEntries=true) beforeInvocation (@CacheEvict) \u662f\u5426\u5728\u65b9\u6cd5\u6267\u884c\u524d\u5c31\u6e05\u7a7a\uff0c\u7f3a\u7701\u4e3afalse\uff0c\u5982\u679c\u6307\u5b9a\u4e3atrue\uff0c\u5219\u5728\u65b9\u6cd5\u8fd8\u6ca1\u6709\u6267\u884c\u7684\u65f6\u5019\u5c31\u6e05\u7a7a\u7f13\u5b58\uff0c\u7f3a\u7701\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u65b9\u6cd5\u6267\u884c\u629b\u51fa\u5f02\u5e38\uff0c\u5219\u4e0d\u4f1a\u6e05\u7a7a\u7f13\u5b58 \u4f8b\u5982\uff1a @CachEvict(value=\u201dtestcache\u201d\uff0cbeforeInvocation=true) unless (@CachePut) (@Cacheable) \u7528\u4e8e\u5426\u51b3\u7f13\u5b58\u7684\uff0c\u4e0d\u50cfcondition\uff0c\u8be5\u8868\u8fbe\u5f0f\u53ea\u5728\u65b9\u6cd5\u6267\u884c\u4e4b\u540e\u5224\u65ad\uff0c\u6b64\u65f6\u53ef\u4ee5\u62ff\u5230\u8fd4\u56de\u503cresult\u8fdb\u884c\u5224\u65ad\u3002\u6761\u4ef6\u4e3atrue\u4e0d\u4f1a\u7f13\u5b58\uff0cfasle\u624d\u7f13\u5b58 \u4f8b\u5982\uff1a@Cacheable(value=\u201dtestcache\u201d, unless=\u201d#result == null\u201d)","title":"@Cacheable/@CachePut/@CacheEvict \u4e3b\u8981\u7684\u53c2\u6570"},{"location":"spring/1%E3%80%81Spring%20IOC%20%E4%B8%AD%E7%9A%84%E6%B3%A8%E8%A7%A3/","text":"Spring IOC \u6ce8\u89e3 spring\u4e2d\u7684\u6ce8\u89e3 1\u3001\u7528\u4e8e\u521b\u5efa\u5bf9\u8c61 2\u3001\u7528\u4e8e\u6ce8\u5165\u6570\u636e 3\u3001\u7528\u4e8e\u6539\u53d8\u4f5c\u7528\u8303\u56f4 4\u3001\u548c\u751f\u547d\u5468\u671f\u76f8\u5173 (\u4e86\u89e3) spring \u4e2d\u7684\u65b0\u6ce8\u89e3(\u914d\u7f6e) spring\u6574\u5408junit Spring IOC \u6ce8\u89e3 \u00b6 Spring\u4e09\u5927\u6838\u5fc3\u601d\u60f3 \u63a7\u5236\u53cd\u8f6c(IOC) \u4f9d\u8d56\u6ce8\u5165 1. \u5c5e\u6027\u6ce8\u5165 2. \u6784\u9020\u65b9\u6cd5\u6ce8\u5165 3. \u5de5\u5382\u65b9\u6cd5\u6ce8\u5165 4. \u6ce8\u89e3\u6ce8\u5165 \u9762\u5411\u5207\u9762\u7f16\u7a0b(AOP) spring\u4e2d\u7684\u6ce8\u89e3 \u00b6 \u5982\u679c\u7528\u6ce8\u89e3\u9700\u8981\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u8bbe\u7f6e <beans xmlns= \"http://www.springframework.org/schema/beans\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xmlns:context= \"http://www.springframework.org/schema/context\" xsi:schemaLocation= \"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\" > <!--\u544a\u77e5spring\u5728\u521b\u5efa\u5bb9\u5668\u65f6\u8981\u626b\u63cf\u7684\u5305\uff0c\u914d\u7f6e\u6240\u9700\u8981\u7684\u6807\u7b7e\u4e0d\u662f\u5728beans\u7684\u7ea6\u675f\u4e2d\uff0c\u800c\u662f\u4e00\u4e2a\u540d\u79f0\u4e3a context\u540d\u79f0\u7a7a\u95f4\u548c\u7ea6\u675f\u4e2d--> <context:component-scan base-package= \"com.itheima\" /> </beans> 1\u3001\u7528\u4e8e\u521b\u5efa\u5bf9\u8c61 \u00b6 \u5176\u4f5c\u7528\u548c\u5728xml\u914d\u7f6e\u6587\u4ef6\u4e2d\u7f16\u5199\u4e00\u4e2a <bean> \u6807\u7b7e\u7684\u5b9e\u73b0\u7684\u529f\u80fd\u4e00\u6837 @Component \uff1a \u4f5c\u7528\uff1a\u7528\u4e8e\u628a\u5f53\u524d\u5bf9\u8c61\u5b58\u5165spring\u5bb9\u5668\u4e2d \u5c5e\u6027\uff1a \u200b value \uff1a\u7528\u6765\u6307\u5b9abean\u7684id\u3002\u4e0d\u5199\u65f6\uff0c\u9ed8\u8ba4\u503c\u4e3a\u5f53\u524d\u7c7b\u540d\uff0c\u4e14\u9996\u5b57\u6bcd\u6539\u5c0f\u5199 \u4e0b\u9762\u4e09\u4e2a\u6ce8\u89e3\u7684\u4f5c\u7528\u548c\u5c5e\u6027\u548cComponent\u4e00\u6837 @Controller : \u4e00\u822c\u7528\u4e8e\u8868\u73b0\u5c42 @Service : \u4e00\u822c\u7528\u4e8e\u670d\u52a1\u5c42 @Repository \uff1a \u4e00\u822c\u7528\u4e8e\u6301\u4e45\u5c42 2\u3001\u7528\u4e8e\u6ce8\u5165\u6570\u636e \u00b6 \u5176\u4f5c\u7528\u548c\u5728xml\u914d\u7f6e\u6587\u4ef6\u4e2d\u7f16\u5199\u4e00\u4e2a <property> \u6807\u7b7e\u7684\u5b9e\u73b0\u7684\u529f\u80fd\u4e00\u6837 @Autowired \uff1a \u4f5c\u7528\uff1a\u81ea\u52a8\u6309\u7167\u7c7b\u578b\u6ce8\u5165\u3002\u53ea\u8981\u5bb9\u5668\u4e2d\u6709\u552f\u4e00\u4e00\u4e2abean\u5bf9\u8c61\u7c7b\u578b\u548c\u8981\u6ce8\u5165\u7684\u53d8\u91cf\u7c7b\u578b\u5339\u914d \u200b \u5982\u679cIOC\u6709\u591a\u4e2a\u7c7b\u578b\u5339\u914d\u65f6\uff1a\u4f1a\u6839\u636e\u53d8\u91cf\u540d\u5339\u914dIOC\u5bb9\u5668\u4e2d\u7684key\u503c \u51fa\u73b0\u4f4d\u7f6e\uff1a \u200b \u53ef\u4ee5\u662f\u6210\u5458\uff0c\u4e5f\u53ef\u4ee5\u662f\u65b9\u6cd5\u4e0a \u7ec6\u8282\uff1a \u200b set\u65b9\u6cd5\u529e\u7684\u4e0d\u662f\u5fc5\u987b\u7684 @Qualifier \uff1a \u4f5c\u7528\uff1a\u5728\u6309\u7167\u7c7b\u4e2d\u6ce8\u5165\u7684\u57fa\u7840\u4e4b\u4e0a\u518d\u6309\u7167\u540d\u79f0\u6ce8\u5165\u3002\u5b83\u5728\u7ed9\u7c7b\u6210\u5458\u6ce8\u5165\u65f6\u4e0d\u80fd\u5355\u72ec\u4f7f\u7528\u3002\u4f46\u662f\u5728\u7ed9\u65b9\u6cd5\u53c2\u6570\u6ce8\u5165\u65f6\u53ef\u4ee5 \u5c5e\u6027\uff1a \u200b value\uff1a\u7528\u4e8e\u6307\u5b9a\u6ce8\u5165bean\u7684id\u3002 @Resource \uff1a \u4f5c\u7528\uff1a\u76f4\u63a5\u6309\u7167bean\u7684id\u6ce8\u5165\u3002\u5b83\u53ef\u4ee5\u72ec\u7acb\u4f7f\u7528 \u5c5e\u6027\uff1a \u200b name\uff1a\u7528\u4e8e\u6307\u5b9abean\u7684id\u3002 \u4ee5\u4e0a\u4e09\u4e2a\u6ce8\u5165\u90fd\u53ea\u80fd\u6ce8\u5165\u5176\u4ed6bean\u7c7b\u578b\u7684\u6570\u636e\uff0c\u800c\u57fa\u672c\u7c7b\u578b\u548cString\u7c7b\u578b\u65e0\u6cd5\u4f7f\u7528\u4e0a\u8ff0\u6ce8\u89e3\u5b9e\u73b0\u3002 \u53e6\u5916\uff0c\u96c6\u5408\u7c7b\u578b\u7684\u6ce8\u5165\u53ea\u80fd\u901a\u8fc7XML\u6765\u5b9e\u73b0\u3002 @Value \u4f5c\u7528\uff1a\u7528\u4e8e\u6ce8\u5165\u57fa\u672c\u7c7b\u578b\u548cString\u7c7b\u578b\u7684\u6570\u636e \u5c5e\u6027\uff1a \u200b value\uff1a\u7528\u4e8e\u6307\u5b9a\u6570\u636e\u7684\u503c\u3002\u5b83\u53ef\u4ee5\u4f7f\u7528spring\u4e2dSpEL(\u4e5f\u5c31\u662fspring\u7684el\u8868\u8fbe\u5f0f\uff09 \u200b SpEL\u7684\u5199\u6cd5\uff1a ${\u8868\u8fbe\u5f0f} 3\u3001\u7528\u4e8e\u6539\u53d8\u4f5c\u7528\u8303\u56f4 \u00b6 \u4ed6\u4eec\u7684\u4f5c\u7528\u5c31\u548c\u5728bean\u6807\u7b7e\u4e2d\u4f7f\u7528scope\u5c5e\u6027\u5b9e\u73b0\u7684\u529f\u80fd\u662f\u4e00\u6837\u7684 @Scope \u4f5c\u7528\uff1a\u7528\u4e8e\u6307\u5b9abean\u7684\u4f5c\u7528\u8303\u56f4 \u5c5e\u6027\uff1a \u200b value\uff1a\u6307\u5b9a\u8303\u56f4\u7684\u53d6\u503c\u3002\u5e38\u7528\u53d6\u503c\uff1a singleton prototype 4\u3001\u548c\u751f\u547d\u5468\u671f\u76f8\u5173 (\u4e86\u89e3) \u00b6 \u4ed6\u4eec\u7684\u4f5c\u7528\u5c31\u548c\u5728bean\u6807\u7b7e\u4e2d\u4f7f\u7528 init-method \u548c destroy-methode \u7684\u4f5c\u7528\u662f\u4e00\u6837\u7684 @PreDestroy \u4f5c\u7528\uff1a\u7528\u4e8e\u6307\u5b9a\u9500\u6bc1\u65b9\u6cd5 - @PostConstruct \u4f5c\u7528\uff1a\u7528\u4e8e\u6307\u5b9a\u521d\u59cb\u5316\u65b9\u6cd5 spring \u4e2d\u7684\u65b0\u6ce8\u89e3(\u914d\u7f6e) \u00b6 @Configuration \u4f5c\u7528\uff1a\u6307\u5b9a\u5f53\u524d\u7c7b\u4e3a\u4e00\u4e2a\u914d\u7f6e\u7c7b \u7ec6\u8282\uff1a\u5f53\u914d\u7f6e\u7c7b\u4f5c\u4e3aAnnotationConfigApplicationContext\u5bf9\u8c61\u521b\u5efa\u7684\u53c2\u6570\u65f6\uff0c\u8be5\u6ce8\u89e3\u53ef\u4ee5\u4e0d\u5199\u3002 @ComponentScan \u4f5c\u7528\uff1a\u7528\u4e8e\u901a\u8fc7\u6ce8\u89e3\u6307\u5b9aspring\u5728\u521b\u5efa\u5bb9\u5668\u65f6\u8981\u626b\u63cf\u7684\u5305 value\uff1a \u200b \u5b83\u548cbasePackages\u7684\u4f5c\u7528\u662f\u4e00\u6837\u7684\uff0c\u90fd\u662f\u7528\u4e8e\u6307\u5b9a\u521b\u5efa\u5bb9\u5668\u65f6\u8981\u626b\u63cf\u7684\u5305\u3002\u6211\u4eec\u4f7f\u7528\u6b64\u6ce8\u89e3\u5c31\u7b49\u540c\u4e8e\u5728xml\u4e2d\u914d\u7f6e\u4e86: <context:component-scan base-package=\"com.itheima\"></context:component-scan> @Bean \u4f5c\u7528\uff1a\u7528\u4e8e\u628a\u5f53\u524d\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u4f5c\u4e3abean\u5bf9\u8c61\u5b58\u5165spring\u7684ioc\u5bb9\u5668\u4e2d \u5c5e\u6027: \u200b name:\u7528\u4e8e\u6307\u5b9abean\u7684id\u3002\u5f53\u4e0d\u5199\u65f6\uff0c\u9ed8\u8ba4\u503c\u662f\u5f53\u524d\u65b9\u6cd5\u7684\u540d\u79f0 \u7ec6\u8282\uff1a \u5f53\u6211\u4eec\u4f7f\u7528\u6ce8\u89e3\u914d\u7f6e\u65b9\u6cd5\u65f6\uff0c\u5982\u679c\u65b9\u6cd5\u6709\u53c2\u6570\uff0cspring\u6846\u67b6\u4f1a\u53bb\u5bb9\u5668\u4e2d\u67e5\u627e\u6709\u6ca1\u6709\u53ef\u7528\u7684bean\u5bf9\u8c61\u3002 \u67e5\u627e\u7684\u65b9\u5f0f\u548cAutowired\u6ce8\u89e3\u7684\u4f5c\u7528\u662f\u4e00\u6837\u7684 @Import \u4f5c\u7528\uff1a\u7528\u4e8e\u5bfc\u5165\u5176\u4ed6\u7684\u914d\u7f6e\u7c7b \u5c5e\u6027\uff1a \u200b value\uff1a\u7528\u4e8e\u6307\u5b9a\u5176\u4ed6\u914d\u7f6e\u7c7b\u7684\u5b57\u8282\u7801\u3002 \u200b \u5f53\u6211\u4eec\u4f7f\u7528 Import \u7684\u6ce8\u89e3\u4e4b\u540e\uff0c\u6709 Import \u6ce8\u89e3\u7684\u7c7b\u5c31\u7236\u914d\u7f6e\u7c7b\uff0c\u800c\u5bfc\u5165\u7684\u90fd\u662f\u5b50\u914d\u7f6e\u7c7b @PropertySource \u4f5c\u7528\uff1a\u7528\u4e8e\u6307\u5b9aproperties\u6587\u4ef6\u7684\u4f4d\u7f6e \u5c5e\u6027\uff1a \u200b value\uff1a\u6307\u5b9a\u6587\u4ef6\u7684\u540d\u79f0\u548c\u8def\u5f84\u3002 \u200b \u5173\u952e\u5b57\uff1a classpath \uff0c\u8868\u793a\u7c7b\u8def\u5f84\u4e0b spring\u6574\u5408junit \u00b6 /** * \u4f7f\u7528Junit\u5355\u5143\u6d4b\u8bd5\uff1a\u6d4b\u8bd5\u6211\u4eec\u7684\u914d\u7f6e * Spring\u6574\u5408junit\u7684\u914d\u7f6e * 1\u3001\u5bfc\u5165spring\u6574\u5408junit\u7684jar(\u5750\u6807) * 2\u3001\u4f7f\u7528Junit\u63d0\u4f9b\u7684\u4e00\u4e2a\u6ce8\u89e3\u628a\u539f\u6709\u7684main\u65b9\u6cd5\u66ff\u6362\u4e86\uff0c\u66ff\u6362\u6210spring\u63d0\u4f9b\u7684 * @Runwith * 3\u3001\u544a\u77e5spring\u7684\u8fd0\u884c\u5668\uff0cspring\u548cioc\u521b\u5efa\u662f\u57fa\u4e8exml\u8fd8\u662f\u6ce8\u89e3\u7684\uff0c\u5e76\u4e14\u8bf4\u660e\u4f4d\u7f6e * @ContextConfiguration * locations\uff1a\u6307\u5b9axml\u6587\u4ef6\u7684\u4f4d\u7f6e\uff0c\u52a0\u4e0aclasspath\u5173\u952e\u5b57\uff0c\u8868\u793a\u5728\u7c7b\u8def\u5f84\u4e0b * classes\uff1a\u6307\u5b9a\u6ce8\u89e3\u7c7b\u6240\u5728\u5730\u4f4d\u7f6e * * \u5f53\u6211\u4eec\u4f7f\u7528spring 5.x\u7248\u672c\u7684\u65f6\u5019\uff0c\u8981\u6c42junit\u7684jar\u5fc5\u987b\u662f4.12\u53ca\u4ee5\u4e0a */ <dependency> <groupId> org.springframework </groupId> <artifactId> spring-test </artifactId> <version> 5.2.2.RELEASE </version> </dependency>","title":"Spring IOC \u4e2d\u7684\u6ce8\u89e3"},{"location":"spring/1%E3%80%81Spring%20IOC%20%E4%B8%AD%E7%9A%84%E6%B3%A8%E8%A7%A3/#spring-ioc","text":"Spring\u4e09\u5927\u6838\u5fc3\u601d\u60f3 \u63a7\u5236\u53cd\u8f6c(IOC) \u4f9d\u8d56\u6ce8\u5165 1. \u5c5e\u6027\u6ce8\u5165 2. \u6784\u9020\u65b9\u6cd5\u6ce8\u5165 3. \u5de5\u5382\u65b9\u6cd5\u6ce8\u5165 4. \u6ce8\u89e3\u6ce8\u5165 \u9762\u5411\u5207\u9762\u7f16\u7a0b(AOP)","title":"Spring IOC \u6ce8\u89e3"},{"location":"spring/1%E3%80%81Spring%20IOC%20%E4%B8%AD%E7%9A%84%E6%B3%A8%E8%A7%A3/#spring","text":"\u5982\u679c\u7528\u6ce8\u89e3\u9700\u8981\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u8bbe\u7f6e <beans xmlns= \"http://www.springframework.org/schema/beans\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xmlns:context= \"http://www.springframework.org/schema/context\" xsi:schemaLocation= \"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\" > <!--\u544a\u77e5spring\u5728\u521b\u5efa\u5bb9\u5668\u65f6\u8981\u626b\u63cf\u7684\u5305\uff0c\u914d\u7f6e\u6240\u9700\u8981\u7684\u6807\u7b7e\u4e0d\u662f\u5728beans\u7684\u7ea6\u675f\u4e2d\uff0c\u800c\u662f\u4e00\u4e2a\u540d\u79f0\u4e3a context\u540d\u79f0\u7a7a\u95f4\u548c\u7ea6\u675f\u4e2d--> <context:component-scan base-package= \"com.itheima\" /> </beans>","title":"spring\u4e2d\u7684\u6ce8\u89e3"},{"location":"spring/1%E3%80%81Spring%20IOC%20%E4%B8%AD%E7%9A%84%E6%B3%A8%E8%A7%A3/#1","text":"\u5176\u4f5c\u7528\u548c\u5728xml\u914d\u7f6e\u6587\u4ef6\u4e2d\u7f16\u5199\u4e00\u4e2a <bean> \u6807\u7b7e\u7684\u5b9e\u73b0\u7684\u529f\u80fd\u4e00\u6837 @Component \uff1a \u4f5c\u7528\uff1a\u7528\u4e8e\u628a\u5f53\u524d\u5bf9\u8c61\u5b58\u5165spring\u5bb9\u5668\u4e2d \u5c5e\u6027\uff1a \u200b value \uff1a\u7528\u6765\u6307\u5b9abean\u7684id\u3002\u4e0d\u5199\u65f6\uff0c\u9ed8\u8ba4\u503c\u4e3a\u5f53\u524d\u7c7b\u540d\uff0c\u4e14\u9996\u5b57\u6bcd\u6539\u5c0f\u5199 \u4e0b\u9762\u4e09\u4e2a\u6ce8\u89e3\u7684\u4f5c\u7528\u548c\u5c5e\u6027\u548cComponent\u4e00\u6837 @Controller : \u4e00\u822c\u7528\u4e8e\u8868\u73b0\u5c42 @Service : \u4e00\u822c\u7528\u4e8e\u670d\u52a1\u5c42 @Repository \uff1a \u4e00\u822c\u7528\u4e8e\u6301\u4e45\u5c42","title":"1\u3001\u7528\u4e8e\u521b\u5efa\u5bf9\u8c61"},{"location":"spring/1%E3%80%81Spring%20IOC%20%E4%B8%AD%E7%9A%84%E6%B3%A8%E8%A7%A3/#2","text":"\u5176\u4f5c\u7528\u548c\u5728xml\u914d\u7f6e\u6587\u4ef6\u4e2d\u7f16\u5199\u4e00\u4e2a <property> \u6807\u7b7e\u7684\u5b9e\u73b0\u7684\u529f\u80fd\u4e00\u6837 @Autowired \uff1a \u4f5c\u7528\uff1a\u81ea\u52a8\u6309\u7167\u7c7b\u578b\u6ce8\u5165\u3002\u53ea\u8981\u5bb9\u5668\u4e2d\u6709\u552f\u4e00\u4e00\u4e2abean\u5bf9\u8c61\u7c7b\u578b\u548c\u8981\u6ce8\u5165\u7684\u53d8\u91cf\u7c7b\u578b\u5339\u914d \u200b \u5982\u679cIOC\u6709\u591a\u4e2a\u7c7b\u578b\u5339\u914d\u65f6\uff1a\u4f1a\u6839\u636e\u53d8\u91cf\u540d\u5339\u914dIOC\u5bb9\u5668\u4e2d\u7684key\u503c \u51fa\u73b0\u4f4d\u7f6e\uff1a \u200b \u53ef\u4ee5\u662f\u6210\u5458\uff0c\u4e5f\u53ef\u4ee5\u662f\u65b9\u6cd5\u4e0a \u7ec6\u8282\uff1a \u200b set\u65b9\u6cd5\u529e\u7684\u4e0d\u662f\u5fc5\u987b\u7684 @Qualifier \uff1a \u4f5c\u7528\uff1a\u5728\u6309\u7167\u7c7b\u4e2d\u6ce8\u5165\u7684\u57fa\u7840\u4e4b\u4e0a\u518d\u6309\u7167\u540d\u79f0\u6ce8\u5165\u3002\u5b83\u5728\u7ed9\u7c7b\u6210\u5458\u6ce8\u5165\u65f6\u4e0d\u80fd\u5355\u72ec\u4f7f\u7528\u3002\u4f46\u662f\u5728\u7ed9\u65b9\u6cd5\u53c2\u6570\u6ce8\u5165\u65f6\u53ef\u4ee5 \u5c5e\u6027\uff1a \u200b value\uff1a\u7528\u4e8e\u6307\u5b9a\u6ce8\u5165bean\u7684id\u3002 @Resource \uff1a \u4f5c\u7528\uff1a\u76f4\u63a5\u6309\u7167bean\u7684id\u6ce8\u5165\u3002\u5b83\u53ef\u4ee5\u72ec\u7acb\u4f7f\u7528 \u5c5e\u6027\uff1a \u200b name\uff1a\u7528\u4e8e\u6307\u5b9abean\u7684id\u3002 \u4ee5\u4e0a\u4e09\u4e2a\u6ce8\u5165\u90fd\u53ea\u80fd\u6ce8\u5165\u5176\u4ed6bean\u7c7b\u578b\u7684\u6570\u636e\uff0c\u800c\u57fa\u672c\u7c7b\u578b\u548cString\u7c7b\u578b\u65e0\u6cd5\u4f7f\u7528\u4e0a\u8ff0\u6ce8\u89e3\u5b9e\u73b0\u3002 \u53e6\u5916\uff0c\u96c6\u5408\u7c7b\u578b\u7684\u6ce8\u5165\u53ea\u80fd\u901a\u8fc7XML\u6765\u5b9e\u73b0\u3002 @Value \u4f5c\u7528\uff1a\u7528\u4e8e\u6ce8\u5165\u57fa\u672c\u7c7b\u578b\u548cString\u7c7b\u578b\u7684\u6570\u636e \u5c5e\u6027\uff1a \u200b value\uff1a\u7528\u4e8e\u6307\u5b9a\u6570\u636e\u7684\u503c\u3002\u5b83\u53ef\u4ee5\u4f7f\u7528spring\u4e2dSpEL(\u4e5f\u5c31\u662fspring\u7684el\u8868\u8fbe\u5f0f\uff09 \u200b SpEL\u7684\u5199\u6cd5\uff1a ${\u8868\u8fbe\u5f0f}","title":"2\u3001\u7528\u4e8e\u6ce8\u5165\u6570\u636e"},{"location":"spring/1%E3%80%81Spring%20IOC%20%E4%B8%AD%E7%9A%84%E6%B3%A8%E8%A7%A3/#3","text":"\u4ed6\u4eec\u7684\u4f5c\u7528\u5c31\u548c\u5728bean\u6807\u7b7e\u4e2d\u4f7f\u7528scope\u5c5e\u6027\u5b9e\u73b0\u7684\u529f\u80fd\u662f\u4e00\u6837\u7684 @Scope \u4f5c\u7528\uff1a\u7528\u4e8e\u6307\u5b9abean\u7684\u4f5c\u7528\u8303\u56f4 \u5c5e\u6027\uff1a \u200b value\uff1a\u6307\u5b9a\u8303\u56f4\u7684\u53d6\u503c\u3002\u5e38\u7528\u53d6\u503c\uff1a singleton prototype","title":"3\u3001\u7528\u4e8e\u6539\u53d8\u4f5c\u7528\u8303\u56f4"},{"location":"spring/1%E3%80%81Spring%20IOC%20%E4%B8%AD%E7%9A%84%E6%B3%A8%E8%A7%A3/#4","text":"\u4ed6\u4eec\u7684\u4f5c\u7528\u5c31\u548c\u5728bean\u6807\u7b7e\u4e2d\u4f7f\u7528 init-method \u548c destroy-methode \u7684\u4f5c\u7528\u662f\u4e00\u6837\u7684 @PreDestroy \u4f5c\u7528\uff1a\u7528\u4e8e\u6307\u5b9a\u9500\u6bc1\u65b9\u6cd5 - @PostConstruct \u4f5c\u7528\uff1a\u7528\u4e8e\u6307\u5b9a\u521d\u59cb\u5316\u65b9\u6cd5","title":"4\u3001\u548c\u751f\u547d\u5468\u671f\u76f8\u5173 (\u4e86\u89e3)"},{"location":"spring/1%E3%80%81Spring%20IOC%20%E4%B8%AD%E7%9A%84%E6%B3%A8%E8%A7%A3/#spring_1","text":"@Configuration \u4f5c\u7528\uff1a\u6307\u5b9a\u5f53\u524d\u7c7b\u4e3a\u4e00\u4e2a\u914d\u7f6e\u7c7b \u7ec6\u8282\uff1a\u5f53\u914d\u7f6e\u7c7b\u4f5c\u4e3aAnnotationConfigApplicationContext\u5bf9\u8c61\u521b\u5efa\u7684\u53c2\u6570\u65f6\uff0c\u8be5\u6ce8\u89e3\u53ef\u4ee5\u4e0d\u5199\u3002 @ComponentScan \u4f5c\u7528\uff1a\u7528\u4e8e\u901a\u8fc7\u6ce8\u89e3\u6307\u5b9aspring\u5728\u521b\u5efa\u5bb9\u5668\u65f6\u8981\u626b\u63cf\u7684\u5305 value\uff1a \u200b \u5b83\u548cbasePackages\u7684\u4f5c\u7528\u662f\u4e00\u6837\u7684\uff0c\u90fd\u662f\u7528\u4e8e\u6307\u5b9a\u521b\u5efa\u5bb9\u5668\u65f6\u8981\u626b\u63cf\u7684\u5305\u3002\u6211\u4eec\u4f7f\u7528\u6b64\u6ce8\u89e3\u5c31\u7b49\u540c\u4e8e\u5728xml\u4e2d\u914d\u7f6e\u4e86: <context:component-scan base-package=\"com.itheima\"></context:component-scan> @Bean \u4f5c\u7528\uff1a\u7528\u4e8e\u628a\u5f53\u524d\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u4f5c\u4e3abean\u5bf9\u8c61\u5b58\u5165spring\u7684ioc\u5bb9\u5668\u4e2d \u5c5e\u6027: \u200b name:\u7528\u4e8e\u6307\u5b9abean\u7684id\u3002\u5f53\u4e0d\u5199\u65f6\uff0c\u9ed8\u8ba4\u503c\u662f\u5f53\u524d\u65b9\u6cd5\u7684\u540d\u79f0 \u7ec6\u8282\uff1a \u5f53\u6211\u4eec\u4f7f\u7528\u6ce8\u89e3\u914d\u7f6e\u65b9\u6cd5\u65f6\uff0c\u5982\u679c\u65b9\u6cd5\u6709\u53c2\u6570\uff0cspring\u6846\u67b6\u4f1a\u53bb\u5bb9\u5668\u4e2d\u67e5\u627e\u6709\u6ca1\u6709\u53ef\u7528\u7684bean\u5bf9\u8c61\u3002 \u67e5\u627e\u7684\u65b9\u5f0f\u548cAutowired\u6ce8\u89e3\u7684\u4f5c\u7528\u662f\u4e00\u6837\u7684 @Import \u4f5c\u7528\uff1a\u7528\u4e8e\u5bfc\u5165\u5176\u4ed6\u7684\u914d\u7f6e\u7c7b \u5c5e\u6027\uff1a \u200b value\uff1a\u7528\u4e8e\u6307\u5b9a\u5176\u4ed6\u914d\u7f6e\u7c7b\u7684\u5b57\u8282\u7801\u3002 \u200b \u5f53\u6211\u4eec\u4f7f\u7528 Import \u7684\u6ce8\u89e3\u4e4b\u540e\uff0c\u6709 Import \u6ce8\u89e3\u7684\u7c7b\u5c31\u7236\u914d\u7f6e\u7c7b\uff0c\u800c\u5bfc\u5165\u7684\u90fd\u662f\u5b50\u914d\u7f6e\u7c7b @PropertySource \u4f5c\u7528\uff1a\u7528\u4e8e\u6307\u5b9aproperties\u6587\u4ef6\u7684\u4f4d\u7f6e \u5c5e\u6027\uff1a \u200b value\uff1a\u6307\u5b9a\u6587\u4ef6\u7684\u540d\u79f0\u548c\u8def\u5f84\u3002 \u200b \u5173\u952e\u5b57\uff1a classpath \uff0c\u8868\u793a\u7c7b\u8def\u5f84\u4e0b","title":"spring \u4e2d\u7684\u65b0\u6ce8\u89e3(\u914d\u7f6e)"},{"location":"spring/1%E3%80%81Spring%20IOC%20%E4%B8%AD%E7%9A%84%E6%B3%A8%E8%A7%A3/#springjunit","text":"/** * \u4f7f\u7528Junit\u5355\u5143\u6d4b\u8bd5\uff1a\u6d4b\u8bd5\u6211\u4eec\u7684\u914d\u7f6e * Spring\u6574\u5408junit\u7684\u914d\u7f6e * 1\u3001\u5bfc\u5165spring\u6574\u5408junit\u7684jar(\u5750\u6807) * 2\u3001\u4f7f\u7528Junit\u63d0\u4f9b\u7684\u4e00\u4e2a\u6ce8\u89e3\u628a\u539f\u6709\u7684main\u65b9\u6cd5\u66ff\u6362\u4e86\uff0c\u66ff\u6362\u6210spring\u63d0\u4f9b\u7684 * @Runwith * 3\u3001\u544a\u77e5spring\u7684\u8fd0\u884c\u5668\uff0cspring\u548cioc\u521b\u5efa\u662f\u57fa\u4e8exml\u8fd8\u662f\u6ce8\u89e3\u7684\uff0c\u5e76\u4e14\u8bf4\u660e\u4f4d\u7f6e * @ContextConfiguration * locations\uff1a\u6307\u5b9axml\u6587\u4ef6\u7684\u4f4d\u7f6e\uff0c\u52a0\u4e0aclasspath\u5173\u952e\u5b57\uff0c\u8868\u793a\u5728\u7c7b\u8def\u5f84\u4e0b * classes\uff1a\u6307\u5b9a\u6ce8\u89e3\u7c7b\u6240\u5728\u5730\u4f4d\u7f6e * * \u5f53\u6211\u4eec\u4f7f\u7528spring 5.x\u7248\u672c\u7684\u65f6\u5019\uff0c\u8981\u6c42junit\u7684jar\u5fc5\u987b\u662f4.12\u53ca\u4ee5\u4e0a */ <dependency> <groupId> org.springframework </groupId> <artifactId> spring-test </artifactId> <version> 5.2.2.RELEASE </version> </dependency>","title":"spring\u6574\u5408junit"},{"location":"spring/2%E3%80%81Spring%E4%B8%AD%E7%9A%84%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/","text":"\u52a8\u6001\u4ee3\u7406 \u00b6 \u7279\u70b9\uff1a\u5b57\u8282\u7801\u968f\u7528\u968f\u521b\u5efa\uff0c\u968f\u7528\u968f\u52a0\u8f7d \u4f5c\u7528\uff1a\u4e0d\u4fee\u6539\u6e90\u7801\u7684\u57fa\u7840\u4e0a\u5bf9\u65b9\u6cd5\u589e\u5f3a \u5206\u7c7b\uff1a \u57fa\u4e8e\u63a5\u53e3\u7684\u52a8\u6001\u4ee3\u7406 \u57fa\u4e8e\u5b50\u7c7b\u7684\u52a8\u6001\u4ee3\u7406 \u57fa\u4e8e\u63a5\u53e3\u7684\u52a8\u6001\u4ee3\u7406 \u00b6 \u6d89\u53ca\u7684\u7c7b\uff1aProxy \u63d0\u4f9b\u8005\uff1aJDK\u5b98\u65b9 \u5982\u4f55\u521b\u5efa\u4ee3\u7406\u5bf9\u8c61\uff1a \u200b \u4f7f\u7528Proxy\u7c7b\u4e2d\u7684 newProxyInstance() \u65b9\u6cd5 \u521b\u5efa\u4ee3\u7406\u5bf9\u8c61\u7684\u8981\u6c42\uff1a \u88ab\u4ee3\u7406\u7c7b\u6700\u5c11\u5b9e\u73b0\u4e00\u4e2a\u63a5\u53e3\uff0c\u5982\u679c\u6ca1\u6709\u5219\u4e0d\u80fd\u4f7f\u7528 newProxyInstance() \u65b9\u6cd5\u7684\u53c2\u6570\uff1a ClassLoader \uff1a\u7c7b\u52a0\u8f7d\u5668 \u200b \u5b83\u662f\u7528\u4e8e\u52a0\u8f7d\u4ee3\u7406\u5bf9\u8c61\u5b57\u8282\u7801\u7684\u3002\u548c\u88ab\u4ee3\u7406\u5bf9\u8c61\u4f7f\u7528\u76f8\u540c\u7684\u7c7b\u52a0\u8f7d\u5668\u3002\u56fa\u5b9a\u5199\u6cd5\u3002 Class[] \uff1a\u5b57\u8282\u7801\u6570\u7ec4 \u200b \u5b83\u662f\u7528\u4e8e\u8ba9\u4ee3\u7406\u5bf9\u8c61\u548c\u88ab\u4ee3\u7406\u5bf9\u8c61\u6709\u76f8\u540c\u65b9\u6cd5\u3002\u56fa\u5b9a\u5199\u6cd5\u3002 InvocationHandler \uff1a\u7528\u4e8e\u63d0\u4f9b\u589e\u5f3a\u7684\u4ee3\u7801 IProducer proxyProducer = ( IProducer ) Proxy . newProxyInstance ( producer . getClass (). getClassLoader (), producer . getClass (). getInterfaces (), new InvocationHandler () { /** * \u4f5c\u7528\uff1a\u6267\u884c\u88ab\u4ee3\u7406\u5bf9\u8c61\u7684\u4efb\u4f55\u63a5\u53e3\u65b9\u6cd5\u90fd\u4f1a\u7ecf\u8fc7\u8be5\u65b9\u6cd5 * \u65b9\u6cd5\u53c2\u6570\u7684\u542b\u4e49 * @param proxy \u4ee3\u7406\u5bf9\u8c61\u7684\u5f15\u7528 * @param method \u5f53\u524d\u6267\u884c\u7684\u65b9\u6cd5 * @param args \u5f53\u524d\u6267\u884c\u65b9\u6cd5\u6240\u9700\u7684\u53c2\u6570 * @return \u548c\u88ab\u4ee3\u7406\u5bf9\u8c61\u65b9\u6cd5\u6709\u76f8\u540c\u7684\u8fd4\u56de\u503c * @throws Throwable */ @Override public Object invoke ( Object proxy , Method method , Object [] args ) throws Throwable { //\u63d0\u4f9b\u589e\u5f3a\u7684\u4ee3\u7801 Object returnValue = null ; //1.\u83b7\u53d6\u65b9\u6cd5\u6267\u884c\u7684\u53c2\u6570 Float money = ( Float ) args [ 0 ] ; //2.\u5224\u65ad\u5f53\u524d\u65b9\u6cd5\u662f\u4e0d\u662f\u9500\u552e if ( \"saleProduct\" . equals ( method . getName ())) { returnValue = method . invoke ( producer , money * 0.8f ); } return returnValue ; } }); \u57fa\u4e8e\u5b50\u7c7b\u7684\u52a8\u6001\u4ee3\u7406 \u00b6 \u6d89\u53ca\u7684\u7c7b\uff1aEnhancer \u63d0\u4f9b\u8005\uff1a\u7b2c\u4e09\u65b9cglib\u5e93 \u5982\u4f55\u521b\u5efa\u4ee3\u7406\u5bf9\u8c61\uff1a \u200b \u4f7f\u7528Enhancer\u7c7b\u4e2d\u7684 create() \u65b9\u6cd5 \u521b\u5efa\u4ee3\u7406\u5bf9\u8c61\u7684\u8981\u6c42\uff1a \u88ab\u4ee3\u7406\u7c7b\u4e0d\u80fd\u662f\u6700\u7ec8\u7c7b create() \u65b9\u6cd5\u7684\u53c2\u6570\uff1a Class\uff1a\u5b57\u8282\u7801 \u200b \u5b83\u662f\u7528\u4e8e\u6307\u5b9a\u88ab\u4ee3\u7406\u5bf9\u8c61\u7684\u5b57\u8282\u7801\u3002 Callback\uff1a\u7528\u4e8e\u63d0\u4f9b\u589e\u5f3a\u7684\u4ee3\u7801 \u5b83\u662f\u8ba9\u6211\u4eec\u5199\u5982\u4f55\u4ee3\u7406\u3002\u6211\u4eec\u4e00\u822c\u90fd\u662f\u4e9b\u4e00\u4e2a\u8be5\u63a5\u53e3\u7684\u5b9e\u73b0\u7c7b\uff0c\u901a\u5e38\u60c5\u51b5\u4e0b\u90fd\u662f\u533f\u540d\u5185\u90e8\u7c7b\uff0c\u4f46\u4e0d\u662f\u5fc5\u987b\u7684\u3002 \u6b64\u63a5\u53e3\u7684\u5b9e\u73b0\u7c7b\u90fd\u662f\u8c01\u7528\u8c01\u5199\u3002 Producer cglibProducer = ( Producer ) Enhancer . create ( producer . getClass (), new MethodInterceptor () { /** * \u6267\u884c\u5317\u5730\u963f\u91cc\u5bf9\u8c61\u7684\u4efb\u4f55\u65b9\u6cd5\u90fd\u4f1a\u7ecf\u8fc7\u8be5\u65b9\u6cd5 * @param proxy * @param method * @param args * \u4ee5\u4e0a\u4e09\u4e2a\u53c2\u6570\u548c\u57fa\u4e8e\u63a5\u53e3\u7684\u52a8\u6001\u4ee3\u7406\u4e2dinvoke\u65b9\u6cd5\u7684\u53c2\u6570\u662f\u4e00\u6837\u7684 * @param methodProxy \uff1a\u5f53\u524d\u6267\u884c\u65b9\u6cd5\u7684\u4ee3\u7406\u5bf9\u8c61 * @return * @throws Throwable */ @Override public Object intercept ( Object proxy , Method method , Object [] args , MethodProxy methodProxy ) throws Throwable { //\u63d0\u4f9b\u589e\u5f3a\u7684\u4ee3\u7801 Object returnValue = null ; //1.\u83b7\u53d6\u65b9\u6cd5\u6267\u884c\u7684\u53c2\u6570 Float money = ( Float ) args [ 0 ] ; //2.\u5224\u65ad\u5f53\u524d\u65b9\u6cd5\u662f\u4e0d\u662f\u9500\u552e if ( \"saleProduct\" . equals ( method . getName ())) { returnValue = method . invoke ( producer , money * 0.8f ); } return returnValue ; } }); cglibProducer . saleProduct ( 12000 f );","title":"Spring\u4e2d\u7684\u52a8\u6001\u4ee3\u7406"},{"location":"spring/2%E3%80%81Spring%E4%B8%AD%E7%9A%84%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/#_1","text":"\u7279\u70b9\uff1a\u5b57\u8282\u7801\u968f\u7528\u968f\u521b\u5efa\uff0c\u968f\u7528\u968f\u52a0\u8f7d \u4f5c\u7528\uff1a\u4e0d\u4fee\u6539\u6e90\u7801\u7684\u57fa\u7840\u4e0a\u5bf9\u65b9\u6cd5\u589e\u5f3a \u5206\u7c7b\uff1a \u57fa\u4e8e\u63a5\u53e3\u7684\u52a8\u6001\u4ee3\u7406 \u57fa\u4e8e\u5b50\u7c7b\u7684\u52a8\u6001\u4ee3\u7406","title":"\u52a8\u6001\u4ee3\u7406"},{"location":"spring/2%E3%80%81Spring%E4%B8%AD%E7%9A%84%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/#_2","text":"\u6d89\u53ca\u7684\u7c7b\uff1aProxy \u63d0\u4f9b\u8005\uff1aJDK\u5b98\u65b9 \u5982\u4f55\u521b\u5efa\u4ee3\u7406\u5bf9\u8c61\uff1a \u200b \u4f7f\u7528Proxy\u7c7b\u4e2d\u7684 newProxyInstance() \u65b9\u6cd5 \u521b\u5efa\u4ee3\u7406\u5bf9\u8c61\u7684\u8981\u6c42\uff1a \u88ab\u4ee3\u7406\u7c7b\u6700\u5c11\u5b9e\u73b0\u4e00\u4e2a\u63a5\u53e3\uff0c\u5982\u679c\u6ca1\u6709\u5219\u4e0d\u80fd\u4f7f\u7528 newProxyInstance() \u65b9\u6cd5\u7684\u53c2\u6570\uff1a ClassLoader \uff1a\u7c7b\u52a0\u8f7d\u5668 \u200b \u5b83\u662f\u7528\u4e8e\u52a0\u8f7d\u4ee3\u7406\u5bf9\u8c61\u5b57\u8282\u7801\u7684\u3002\u548c\u88ab\u4ee3\u7406\u5bf9\u8c61\u4f7f\u7528\u76f8\u540c\u7684\u7c7b\u52a0\u8f7d\u5668\u3002\u56fa\u5b9a\u5199\u6cd5\u3002 Class[] \uff1a\u5b57\u8282\u7801\u6570\u7ec4 \u200b \u5b83\u662f\u7528\u4e8e\u8ba9\u4ee3\u7406\u5bf9\u8c61\u548c\u88ab\u4ee3\u7406\u5bf9\u8c61\u6709\u76f8\u540c\u65b9\u6cd5\u3002\u56fa\u5b9a\u5199\u6cd5\u3002 InvocationHandler \uff1a\u7528\u4e8e\u63d0\u4f9b\u589e\u5f3a\u7684\u4ee3\u7801 IProducer proxyProducer = ( IProducer ) Proxy . newProxyInstance ( producer . getClass (). getClassLoader (), producer . getClass (). getInterfaces (), new InvocationHandler () { /** * \u4f5c\u7528\uff1a\u6267\u884c\u88ab\u4ee3\u7406\u5bf9\u8c61\u7684\u4efb\u4f55\u63a5\u53e3\u65b9\u6cd5\u90fd\u4f1a\u7ecf\u8fc7\u8be5\u65b9\u6cd5 * \u65b9\u6cd5\u53c2\u6570\u7684\u542b\u4e49 * @param proxy \u4ee3\u7406\u5bf9\u8c61\u7684\u5f15\u7528 * @param method \u5f53\u524d\u6267\u884c\u7684\u65b9\u6cd5 * @param args \u5f53\u524d\u6267\u884c\u65b9\u6cd5\u6240\u9700\u7684\u53c2\u6570 * @return \u548c\u88ab\u4ee3\u7406\u5bf9\u8c61\u65b9\u6cd5\u6709\u76f8\u540c\u7684\u8fd4\u56de\u503c * @throws Throwable */ @Override public Object invoke ( Object proxy , Method method , Object [] args ) throws Throwable { //\u63d0\u4f9b\u589e\u5f3a\u7684\u4ee3\u7801 Object returnValue = null ; //1.\u83b7\u53d6\u65b9\u6cd5\u6267\u884c\u7684\u53c2\u6570 Float money = ( Float ) args [ 0 ] ; //2.\u5224\u65ad\u5f53\u524d\u65b9\u6cd5\u662f\u4e0d\u662f\u9500\u552e if ( \"saleProduct\" . equals ( method . getName ())) { returnValue = method . invoke ( producer , money * 0.8f ); } return returnValue ; } });","title":"\u57fa\u4e8e\u63a5\u53e3\u7684\u52a8\u6001\u4ee3\u7406"},{"location":"spring/2%E3%80%81Spring%E4%B8%AD%E7%9A%84%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/#_3","text":"\u6d89\u53ca\u7684\u7c7b\uff1aEnhancer \u63d0\u4f9b\u8005\uff1a\u7b2c\u4e09\u65b9cglib\u5e93 \u5982\u4f55\u521b\u5efa\u4ee3\u7406\u5bf9\u8c61\uff1a \u200b \u4f7f\u7528Enhancer\u7c7b\u4e2d\u7684 create() \u65b9\u6cd5 \u521b\u5efa\u4ee3\u7406\u5bf9\u8c61\u7684\u8981\u6c42\uff1a \u88ab\u4ee3\u7406\u7c7b\u4e0d\u80fd\u662f\u6700\u7ec8\u7c7b create() \u65b9\u6cd5\u7684\u53c2\u6570\uff1a Class\uff1a\u5b57\u8282\u7801 \u200b \u5b83\u662f\u7528\u4e8e\u6307\u5b9a\u88ab\u4ee3\u7406\u5bf9\u8c61\u7684\u5b57\u8282\u7801\u3002 Callback\uff1a\u7528\u4e8e\u63d0\u4f9b\u589e\u5f3a\u7684\u4ee3\u7801 \u5b83\u662f\u8ba9\u6211\u4eec\u5199\u5982\u4f55\u4ee3\u7406\u3002\u6211\u4eec\u4e00\u822c\u90fd\u662f\u4e9b\u4e00\u4e2a\u8be5\u63a5\u53e3\u7684\u5b9e\u73b0\u7c7b\uff0c\u901a\u5e38\u60c5\u51b5\u4e0b\u90fd\u662f\u533f\u540d\u5185\u90e8\u7c7b\uff0c\u4f46\u4e0d\u662f\u5fc5\u987b\u7684\u3002 \u6b64\u63a5\u53e3\u7684\u5b9e\u73b0\u7c7b\u90fd\u662f\u8c01\u7528\u8c01\u5199\u3002 Producer cglibProducer = ( Producer ) Enhancer . create ( producer . getClass (), new MethodInterceptor () { /** * \u6267\u884c\u5317\u5730\u963f\u91cc\u5bf9\u8c61\u7684\u4efb\u4f55\u65b9\u6cd5\u90fd\u4f1a\u7ecf\u8fc7\u8be5\u65b9\u6cd5 * @param proxy * @param method * @param args * \u4ee5\u4e0a\u4e09\u4e2a\u53c2\u6570\u548c\u57fa\u4e8e\u63a5\u53e3\u7684\u52a8\u6001\u4ee3\u7406\u4e2dinvoke\u65b9\u6cd5\u7684\u53c2\u6570\u662f\u4e00\u6837\u7684 * @param methodProxy \uff1a\u5f53\u524d\u6267\u884c\u65b9\u6cd5\u7684\u4ee3\u7406\u5bf9\u8c61 * @return * @throws Throwable */ @Override public Object intercept ( Object proxy , Method method , Object [] args , MethodProxy methodProxy ) throws Throwable { //\u63d0\u4f9b\u589e\u5f3a\u7684\u4ee3\u7801 Object returnValue = null ; //1.\u83b7\u53d6\u65b9\u6cd5\u6267\u884c\u7684\u53c2\u6570 Float money = ( Float ) args [ 0 ] ; //2.\u5224\u65ad\u5f53\u524d\u65b9\u6cd5\u662f\u4e0d\u662f\u9500\u552e if ( \"saleProduct\" . equals ( method . getName ())) { returnValue = method . invoke ( producer , money * 0.8f ); } return returnValue ; } }); cglibProducer . saleProduct ( 12000 f );","title":"\u57fa\u4e8e\u5b50\u7c7b\u7684\u52a8\u6001\u4ee3\u7406"},{"location":"spring/3%E3%80%81Spring%20AOP/","text":"Spring AOP \u00b6 XML \u00b6 1\u3001\u6982\u5ff5 \u00b6 1.1 AOP \uff08\u9762\u5411\u5207\u9762\u7f16\u7a0b\uff09 \u00b6 \u200b \u5728\u8f6f\u4ef6\u4e1a\uff0c**AOP**\u4e3a Aspect Oriented Programming \u7684\u7f29\u5199\uff0c\u610f\u4e3a\uff1a \u9762\u5411\u5207\u9762\u7f16\u7a0b \uff0c\u901a\u8fc7 \u9884\u7f16\u8bd1 \u65b9\u5f0f\u548c\u8fd0\u884c\u671f\u52a8\u6001\u4ee3\u7406\u5b9e\u73b0\u7a0b\u5e8f\u529f\u80fd\u7684\u7edf\u4e00\u7ef4\u62a4\u7684\u4e00\u79cd\u6280\u672f\u3002AOP\u662f OOP \u7684\u5ef6\u7eed\uff0c\u662f\u8f6f\u4ef6\u5f00\u53d1\u4e2d\u7684\u4e00\u4e2a\u70ed\u70b9\uff0c\u4e5f\u662f Spring \u6846\u67b6\u4e2d\u7684\u4e00\u4e2a\u91cd\u8981\u5185\u5bb9\uff0c\u662f \u51fd\u6570\u5f0f\u7f16\u7a0b \u7684\u4e00\u79cd\u884d\u751f\u8303\u578b\u3002\u5229\u7528AOP\u53ef\u4ee5\u5bf9\u4e1a\u52a1\u903b\u8f91\u7684\u5404\u4e2a\u90e8\u5206\u8fdb\u884c\u9694\u79bb\uff0c\u4ece\u800c\u4f7f\u5f97\u4e1a\u52a1\u903b\u8f91\u5404\u90e8\u5206\u4e4b\u95f4\u7684 \u8026\u5408\u5ea6 \u964d\u4f4e\uff0c\u63d0\u9ad8\u7a0b\u5e8f\u7684\u53ef\u91cd\u7528\u6027\uff0c\u540c\u65f6\u63d0\u9ad8\u4e86\u5f00\u53d1\u7684\u6548\u7387\u3002 1.2 AOP \u7684\u4f5c\u7528\u53ca\u4f18\u52bf \u00b6 \u4f5c\u7528\uff1a \u200b \u5728\u7a0b\u5e8f\u8fd0\u884c\u671f\u95f4\uff0c\u4e0d\u4fee\u6539\u6e90\u7801\u5bf9\u5df2\u6709\u65b9\u6cd5\u8fdb\u884c\u589e\u5f3a\u3002 \u4f18\u52bf\uff1a \u200b \u51cf\u5c11\u91cd\u590d\u4ee3\u7801 \u200b \u63d0\u9ad8\u5f00\u53d1\u6548\u7387 \u200b \u7ef4\u62a4\u65b9\u4fbf 1.3 AOP \u7684\u5b9e\u73b0\u65b9\u5f0f \u4f7f\u7528\u52a8\u6001\u4ee3\u7406\u6280\u672f 2\u3001spring AOP \u914d\u7f6e \u00b6 \u628a\u901a\u77e5bean\u4ea4\u7ed9spring\u7ba1\u7406 \u4f7f\u7528 aop:config \u6807\u7b7e\u8868\u660e\u5f00\u59cbAOP\u7684\u914d\u7f6e \u4f7f\u7528 aop:aspect \u6807\u7b7e\u914d\u7f6e\u5207\u9762 id \uff1a\u7ed9\u5207\u9762\u63d0\u4f9b\u4e00\u4e2a\u552f\u4e00\u6807\u8bc6\u3002 ref \uff1a\u5f15\u7528\u914d\u7f6e\u597d\u7684\u901a\u77e5\u7c7b bean \u7684 id\u3002 \u5728 aop:aspect \u5185\u90e8\u4f7f\u7528\u5bf9\u5e94\u6807\u7b7e\u6765\u914d\u7f6e\u901a\u77e5\u7c7b\u578b aop:before \u7528\u4e8e\u914d\u7f6e\u524d\u7f6e\u901a\u77e5\u3002\u6307\u5b9a\u589e\u5f3a\u7684\u65b9\u6cd5\u5728\u5207\u5165\u70b9\u65b9\u6cd5\u4e4b\u524d\u6267\u884c method : \u7528\u4e8e\u6307\u5b9a\u901a\u77e5\u7c7b\u4e2d\u7684\u589e\u5f3a\u65b9\u6cd5\u540d\u79f0 pointcut : \u7528\u4e8e\u6307\u5b9a\u5207\u5165\u70b9\u8868\u8fbe\u5f0f aop:after-returning \u7528\u4e8e\u914d\u7f6e\u540e\u7f6e\u901a\u77e5 aop:after-throwing \u7528\u4e8e\u914d\u7f6e\u5f02\u5e38\u901a\u77e5 aop:after \u7528\u4e8e\u914d\u7f6e\u6700\u7ec8\u901a\u77e5 \u7528 aop:pointcut \u914d\u7f6e\u5207\u5165\u70b9\u8868\u8fbe\u5f0f \u5207\u5165\u70b9\u8868\u8fbe\u5f0f\u5199\u6cd5 \u5173\u952e\u5b57\uff1a execution(\u8868\u8fbe\u5f0f) \u8868\u8fbe\u5f0f\uff1a \u8bbf\u95ee\u4fee\u9970\u7b26 \u8fd4\u56de\u503c \u5305\u540d.\u5305\u540d.\u5305\u540d...\u7c7b\u540d.\u65b9\u6cd5\u540d(\u53c2\u6570\u5217\u8868) \u8868\u8fbe\u5f0f\u5199\u6cd5\uff1a \u6807\u51c6\u5199\u6cd5 public void com.szz.service.impl.AccountService.saveAccount() \u8bbf\u95ee\u4fee\u9970\u7b26\u53ef\u4ee5\u7701\u7565 void com.szz.service.impl.AccountService.saveAccount() \u8fd4\u56de\u503c\u53ef\u4ee5\u4f7f\u7528\u901a\u914d\u7b26\uff0c\u8868\u793a\u8fd4\u56de\u4efb\u610f\u503c \u200b * com.szz.service.impl.AccountService.saveAccount() \u5305\u540d\u53ef\u4ee5\u4f7f\u7528\u901a\u914d\u7b26\uff0c\u8868\u793a\u4efb\u610f\u5305\u3002\u4f46\u662f\u6709\u51e0\u7ea7\u5305\uff0c\u5c31\u9700\u8981\u5199\u51e0\u4e2a *. * *.*.*.*.AccountService.saveAccount() \u5305\u540d\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a .. \u8868\u793a\u5f53\u524d\u5305\u53ca\u5176\u5b50\u5305 * *..AccountService.saveAccount() \u7c7b\u540d\u548c\u65b9\u6cd5\u540d\u90fd\u53ef\u4ee5\u4f7f\u7528 * \u6765\u5b9e\u73b0\u901a\u914d * *..*.*() \u53c2\u6570\u5217\u8868\uff1a \u53ef\u4ee5\u76f4\u63a5\u5199\u6570\u636e\u7c7b\u578b\uff1a \u57fa\u672c\u7c7b\u578b\u76f4\u63a5\u5199\u540d\u79f0 int \u5f15\u7528\u7c7b\u578b\u5199\u5305\u540d.\u7c7b\u540d\u7684\u65b9\u5f0f java.lang.String \u53ef\u4ee5\u4f7f\u7528\u901a\u914d\u7b26 * \u8868\u793a\u4efb\u610f\u7c7b\u578b\uff0c\u4f46\u662f\u5fc5\u987b\u6709\u53c2\u6570 \u53ef\u4ee5\u4f7f\u7528 .. \u8868\u793a\u6709\u65e0\u53c2\u6570\u5747\u53ef\uff0c\u6709\u53c2\u6570\u53ef\u4ee5\u662f\u4efb\u610f\u7c7b\u578b \u5168\u901a\u914d\u5199\u6cd5\uff1a \u200b * *..*.*(..) \u5b9e\u9645\u5f00\u53d1\u4e2d\u5207\u5165\u70b9\u8868\u8fbe\u5f0f\u7684\u901a\u5e38\u5199\u6cd5\uff1a \u5207\u5230\u4e1a\u52a1\u5c42\u5b9e\u73b0\u7c7b\u4e0b\u7684\u6240\u6709\u65b9\u6cd5 \u200b * com.szz.service.impl.*.*(..) <!--\u914d\u7f6eLogger\u7c7b--> <bean id= \"logger\" class= \"com.szz.utils.Logger\" > </bean> <!--\u914d\u7f6eAOP--> <aop:config> <!--\u914d\u7f6e\u5207\u9762--> <aop:aspect id= \"logAdvice\" ref= \"logger\" > <!--\u914d\u7f6e\u901a\u77e5\uff0c\u5efa\u7acb\u901a\u77e5\u65b9\u6cd5\u548c\u5207\u5165\u70b9\u65b9\u6cd5\u7684\u5173\u8054--> <aop:before method= \"printLog\" pointcut= \"execution(public void com.szz.service.impl.AccountService.saveAccount())\" /> </aop:aspect> </aop:config> 3\u3001\u73af\u7ed5\u901a\u77e5 \u00b6 \u914d\u7f6e\u65b9\u5f0f: <aop:config> <aop:pointcut expression= \"execution(* com.szz.service.impl.*.*(..))\" id= \"pt1\" /> <aop:aspect id= \"txAdvice\" ref= \"txManager\" > <!-- \u914d\u7f6e\u73af\u7ed5\u901a\u77e5 --> <aop:around method= \"transactionAround\" pointcut-ref= \"pt1\" /> </aop:aspect> </aop:config> aop:around\uff1a \u4f5c\u7528\uff1a \u200b \u7528\u4e8e\u914d\u7f6e\u73af\u7ed5\u901a\u77e5 \u5c5e\u6027\uff1a \u200b method \uff1a\u6307\u5b9a\u901a\u77e5\u4e2d\u65b9\u6cd5\u7684\u540d\u79f0\u3002 \u200b pointct \uff1a\u5b9a\u4e49\u5207\u5165\u70b9\u8868\u8fbe\u5f0f \u200b pointcut-ref \uff1a\u6307\u5b9a\u5207\u5165\u70b9\u8868\u8fbe\u5f0f\u7684\u5f15\u7528 \u8bf4\u660e\uff1a \u200b \u5b83\u662f spring \u6846\u67b6\u4e3a\u6211\u4eec\u63d0\u4f9b\u7684\u4e00\u79cd\u53ef\u4ee5\u5728\u4ee3\u7801\u4e2d\u624b\u52a8\u63a7\u5236\u589e\u5f3a\u4ee3\u7801\u4ec0\u4e48\u65f6\u5019\u6267\u884c\u7684\u65b9\u5f0f\u3002 \u6ce8\u610f\uff1a \u200b \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u73af\u7ed5\u901a\u77e5\u90fd\u662f\u72ec\u7acb\u4f7f\u7528\u7684 \u6ce8\u89e3 \u00b6","title":"Spring AOP"},{"location":"spring/3%E3%80%81Spring%20AOP/#spring-aop","text":"","title":"Spring AOP"},{"location":"spring/3%E3%80%81Spring%20AOP/#xml","text":"","title":"XML"},{"location":"spring/3%E3%80%81Spring%20AOP/#1","text":"","title":"1\u3001\u6982\u5ff5"},{"location":"spring/3%E3%80%81Spring%20AOP/#11-aop","text":"\u200b \u5728\u8f6f\u4ef6\u4e1a\uff0c**AOP**\u4e3a Aspect Oriented Programming \u7684\u7f29\u5199\uff0c\u610f\u4e3a\uff1a \u9762\u5411\u5207\u9762\u7f16\u7a0b \uff0c\u901a\u8fc7 \u9884\u7f16\u8bd1 \u65b9\u5f0f\u548c\u8fd0\u884c\u671f\u52a8\u6001\u4ee3\u7406\u5b9e\u73b0\u7a0b\u5e8f\u529f\u80fd\u7684\u7edf\u4e00\u7ef4\u62a4\u7684\u4e00\u79cd\u6280\u672f\u3002AOP\u662f OOP \u7684\u5ef6\u7eed\uff0c\u662f\u8f6f\u4ef6\u5f00\u53d1\u4e2d\u7684\u4e00\u4e2a\u70ed\u70b9\uff0c\u4e5f\u662f Spring \u6846\u67b6\u4e2d\u7684\u4e00\u4e2a\u91cd\u8981\u5185\u5bb9\uff0c\u662f \u51fd\u6570\u5f0f\u7f16\u7a0b \u7684\u4e00\u79cd\u884d\u751f\u8303\u578b\u3002\u5229\u7528AOP\u53ef\u4ee5\u5bf9\u4e1a\u52a1\u903b\u8f91\u7684\u5404\u4e2a\u90e8\u5206\u8fdb\u884c\u9694\u79bb\uff0c\u4ece\u800c\u4f7f\u5f97\u4e1a\u52a1\u903b\u8f91\u5404\u90e8\u5206\u4e4b\u95f4\u7684 \u8026\u5408\u5ea6 \u964d\u4f4e\uff0c\u63d0\u9ad8\u7a0b\u5e8f\u7684\u53ef\u91cd\u7528\u6027\uff0c\u540c\u65f6\u63d0\u9ad8\u4e86\u5f00\u53d1\u7684\u6548\u7387\u3002","title":"1.1 AOP \uff08\u9762\u5411\u5207\u9762\u7f16\u7a0b\uff09"},{"location":"spring/3%E3%80%81Spring%20AOP/#12-aop","text":"\u4f5c\u7528\uff1a \u200b \u5728\u7a0b\u5e8f\u8fd0\u884c\u671f\u95f4\uff0c\u4e0d\u4fee\u6539\u6e90\u7801\u5bf9\u5df2\u6709\u65b9\u6cd5\u8fdb\u884c\u589e\u5f3a\u3002 \u4f18\u52bf\uff1a \u200b \u51cf\u5c11\u91cd\u590d\u4ee3\u7801 \u200b \u63d0\u9ad8\u5f00\u53d1\u6548\u7387 \u200b \u7ef4\u62a4\u65b9\u4fbf 1.3 AOP \u7684\u5b9e\u73b0\u65b9\u5f0f \u4f7f\u7528\u52a8\u6001\u4ee3\u7406\u6280\u672f","title":"1.2 AOP \u7684\u4f5c\u7528\u53ca\u4f18\u52bf"},{"location":"spring/3%E3%80%81Spring%20AOP/#2spring-aop","text":"\u628a\u901a\u77e5bean\u4ea4\u7ed9spring\u7ba1\u7406 \u4f7f\u7528 aop:config \u6807\u7b7e\u8868\u660e\u5f00\u59cbAOP\u7684\u914d\u7f6e \u4f7f\u7528 aop:aspect \u6807\u7b7e\u914d\u7f6e\u5207\u9762 id \uff1a\u7ed9\u5207\u9762\u63d0\u4f9b\u4e00\u4e2a\u552f\u4e00\u6807\u8bc6\u3002 ref \uff1a\u5f15\u7528\u914d\u7f6e\u597d\u7684\u901a\u77e5\u7c7b bean \u7684 id\u3002 \u5728 aop:aspect \u5185\u90e8\u4f7f\u7528\u5bf9\u5e94\u6807\u7b7e\u6765\u914d\u7f6e\u901a\u77e5\u7c7b\u578b aop:before \u7528\u4e8e\u914d\u7f6e\u524d\u7f6e\u901a\u77e5\u3002\u6307\u5b9a\u589e\u5f3a\u7684\u65b9\u6cd5\u5728\u5207\u5165\u70b9\u65b9\u6cd5\u4e4b\u524d\u6267\u884c method : \u7528\u4e8e\u6307\u5b9a\u901a\u77e5\u7c7b\u4e2d\u7684\u589e\u5f3a\u65b9\u6cd5\u540d\u79f0 pointcut : \u7528\u4e8e\u6307\u5b9a\u5207\u5165\u70b9\u8868\u8fbe\u5f0f aop:after-returning \u7528\u4e8e\u914d\u7f6e\u540e\u7f6e\u901a\u77e5 aop:after-throwing \u7528\u4e8e\u914d\u7f6e\u5f02\u5e38\u901a\u77e5 aop:after \u7528\u4e8e\u914d\u7f6e\u6700\u7ec8\u901a\u77e5 \u7528 aop:pointcut \u914d\u7f6e\u5207\u5165\u70b9\u8868\u8fbe\u5f0f \u5207\u5165\u70b9\u8868\u8fbe\u5f0f\u5199\u6cd5 \u5173\u952e\u5b57\uff1a execution(\u8868\u8fbe\u5f0f) \u8868\u8fbe\u5f0f\uff1a \u8bbf\u95ee\u4fee\u9970\u7b26 \u8fd4\u56de\u503c \u5305\u540d.\u5305\u540d.\u5305\u540d...\u7c7b\u540d.\u65b9\u6cd5\u540d(\u53c2\u6570\u5217\u8868) \u8868\u8fbe\u5f0f\u5199\u6cd5\uff1a \u6807\u51c6\u5199\u6cd5 public void com.szz.service.impl.AccountService.saveAccount() \u8bbf\u95ee\u4fee\u9970\u7b26\u53ef\u4ee5\u7701\u7565 void com.szz.service.impl.AccountService.saveAccount() \u8fd4\u56de\u503c\u53ef\u4ee5\u4f7f\u7528\u901a\u914d\u7b26\uff0c\u8868\u793a\u8fd4\u56de\u4efb\u610f\u503c \u200b * com.szz.service.impl.AccountService.saveAccount() \u5305\u540d\u53ef\u4ee5\u4f7f\u7528\u901a\u914d\u7b26\uff0c\u8868\u793a\u4efb\u610f\u5305\u3002\u4f46\u662f\u6709\u51e0\u7ea7\u5305\uff0c\u5c31\u9700\u8981\u5199\u51e0\u4e2a *. * *.*.*.*.AccountService.saveAccount() \u5305\u540d\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a .. \u8868\u793a\u5f53\u524d\u5305\u53ca\u5176\u5b50\u5305 * *..AccountService.saveAccount() \u7c7b\u540d\u548c\u65b9\u6cd5\u540d\u90fd\u53ef\u4ee5\u4f7f\u7528 * \u6765\u5b9e\u73b0\u901a\u914d * *..*.*() \u53c2\u6570\u5217\u8868\uff1a \u53ef\u4ee5\u76f4\u63a5\u5199\u6570\u636e\u7c7b\u578b\uff1a \u57fa\u672c\u7c7b\u578b\u76f4\u63a5\u5199\u540d\u79f0 int \u5f15\u7528\u7c7b\u578b\u5199\u5305\u540d.\u7c7b\u540d\u7684\u65b9\u5f0f java.lang.String \u53ef\u4ee5\u4f7f\u7528\u901a\u914d\u7b26 * \u8868\u793a\u4efb\u610f\u7c7b\u578b\uff0c\u4f46\u662f\u5fc5\u987b\u6709\u53c2\u6570 \u53ef\u4ee5\u4f7f\u7528 .. \u8868\u793a\u6709\u65e0\u53c2\u6570\u5747\u53ef\uff0c\u6709\u53c2\u6570\u53ef\u4ee5\u662f\u4efb\u610f\u7c7b\u578b \u5168\u901a\u914d\u5199\u6cd5\uff1a \u200b * *..*.*(..) \u5b9e\u9645\u5f00\u53d1\u4e2d\u5207\u5165\u70b9\u8868\u8fbe\u5f0f\u7684\u901a\u5e38\u5199\u6cd5\uff1a \u5207\u5230\u4e1a\u52a1\u5c42\u5b9e\u73b0\u7c7b\u4e0b\u7684\u6240\u6709\u65b9\u6cd5 \u200b * com.szz.service.impl.*.*(..) <!--\u914d\u7f6eLogger\u7c7b--> <bean id= \"logger\" class= \"com.szz.utils.Logger\" > </bean> <!--\u914d\u7f6eAOP--> <aop:config> <!--\u914d\u7f6e\u5207\u9762--> <aop:aspect id= \"logAdvice\" ref= \"logger\" > <!--\u914d\u7f6e\u901a\u77e5\uff0c\u5efa\u7acb\u901a\u77e5\u65b9\u6cd5\u548c\u5207\u5165\u70b9\u65b9\u6cd5\u7684\u5173\u8054--> <aop:before method= \"printLog\" pointcut= \"execution(public void com.szz.service.impl.AccountService.saveAccount())\" /> </aop:aspect> </aop:config>","title":"2\u3001spring AOP \u914d\u7f6e"},{"location":"spring/3%E3%80%81Spring%20AOP/#3","text":"\u914d\u7f6e\u65b9\u5f0f: <aop:config> <aop:pointcut expression= \"execution(* com.szz.service.impl.*.*(..))\" id= \"pt1\" /> <aop:aspect id= \"txAdvice\" ref= \"txManager\" > <!-- \u914d\u7f6e\u73af\u7ed5\u901a\u77e5 --> <aop:around method= \"transactionAround\" pointcut-ref= \"pt1\" /> </aop:aspect> </aop:config> aop:around\uff1a \u4f5c\u7528\uff1a \u200b \u7528\u4e8e\u914d\u7f6e\u73af\u7ed5\u901a\u77e5 \u5c5e\u6027\uff1a \u200b method \uff1a\u6307\u5b9a\u901a\u77e5\u4e2d\u65b9\u6cd5\u7684\u540d\u79f0\u3002 \u200b pointct \uff1a\u5b9a\u4e49\u5207\u5165\u70b9\u8868\u8fbe\u5f0f \u200b pointcut-ref \uff1a\u6307\u5b9a\u5207\u5165\u70b9\u8868\u8fbe\u5f0f\u7684\u5f15\u7528 \u8bf4\u660e\uff1a \u200b \u5b83\u662f spring \u6846\u67b6\u4e3a\u6211\u4eec\u63d0\u4f9b\u7684\u4e00\u79cd\u53ef\u4ee5\u5728\u4ee3\u7801\u4e2d\u624b\u52a8\u63a7\u5236\u589e\u5f3a\u4ee3\u7801\u4ec0\u4e48\u65f6\u5019\u6267\u884c\u7684\u65b9\u5f0f\u3002 \u6ce8\u610f\uff1a \u200b \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u73af\u7ed5\u901a\u77e5\u90fd\u662f\u72ec\u7acb\u4f7f\u7528\u7684","title":"3\u3001\u73af\u7ed5\u901a\u77e5"},{"location":"spring/3%E3%80%81Spring%20AOP/#_1","text":"","title":"\u6ce8\u89e3"},{"location":"spring/4%E3%80%81Spring%20%E4%BA%8B%E5%8A%A1/","text":"Spring \u4e8b\u52a1\u7ba1\u7406\u914d\u7f6e\uff08tx\uff09 \u00b6","title":"Spring \u4e8b\u52a1"},{"location":"spring/4%E3%80%81Spring%20%E4%BA%8B%E5%8A%A1/#spring-tx","text":"","title":"Spring \u4e8b\u52a1\u7ba1\u7406\u914d\u7f6e\uff08tx\uff09"},{"location":"spring/5%E3%80%81%E6%9C%AC%E6%AC%A1Spring%E6%95%99%E7%A8%8B%E4%B8%AD%E6%B6%89%E5%8F%8A%E7%9A%84%E7%9B%B8%E5%85%B3%E4%BE%9D%E8%B5%96/","text":"\u672c\u6b21Spring\u6559\u7a0b\u4e2d\u6d89\u53ca\u7684\u76f8\u5173\u4f9d\u8d56 \u00b6 pom.xml \u6587\u4ef6 <packaging> jar </packaging> <dependencies> <!--\u63d0\u4f9b\u5728\u57fa\u7840IOC\u529f\u80fd\u4e0a\u7684\u6269\u5c55\u670d\u52a1\uff0c\u6b64\u5916\u8fd8\u63d0\u4f9b\u8bb8\u591a\u4f01\u4e1a\u7ea7\u670d\u52a1\u7684\u652f\u6301\uff0c\u6709\u90ae\u4ef6\u670d\u52a1\u3001\u4efb\u52a1\u8c03\u5ea6\u3001JNDI\u5b9a\u4f4d\uff0cEJB\u96c6\u6210\u3001\u8fdc\u7a0b\u8bbf\u95ee\u3001\u7f13\u5b58\u4ee5\u53ca\u591a\u79cd\u89c6\u56fe\u5c42\u6846\u67b6\u7684\u652f\u6301\u3002--> <dependency> <groupId> org.springframework </groupId> <artifactId> spring-context </artifactId> <version> 5.0.2.RELEASE </version> </dependency> <!--\u5bf9JDBC \u7684\u7b80\u5355\u5c01\u88c5--> <dependency> <groupId> org.springframework </groupId> <artifactId> spring-jdbc </artifactId> <version> 5.0.2.RELEASE </version> </dependency> <!--\u4e3aJDBC\u3001Hibernate\u3001JDO\u3001JPA\u7b49\u63d0\u4f9b\u7684\u4e00\u81f4\u7684\u58f0\u660e\u5f0f\u548c\u7f16\u7a0b\u5f0f\u4e8b\u52a1\u7ba1\u7406\u3002--> <dependency> <groupId> org.springframework </groupId> <artifactId> spring-tx </artifactId> <version> 5.0.2.RELEASE </version> </dependency> <!--\u5bf9JUNIT\u7b49\u6d4b\u8bd5\u6846\u67b6\u7684\u7b80\u5355\u5c01\u88c5--> <dependency> <groupId> org.springframework </groupId> <artifactId> spring-test </artifactId> <version> 5.0.2.RELEASE </version> </dependency> <!--mysql\u6570\u636e\u5e93\u652f\u6301--> <dependency> <groupId> mysql </groupId> <artifactId> mysql-connector-java </artifactId> <version> 5.1.6 </version> </dependency> <!--\u7528\u4e8e\u5728Spring 2.0\u4e2d\u96c6\u6210AspectJ AspectJ LTW\u7ec7\u5165\u5668 --> <dependency> <groupId> org.aspectj </groupId> <artifactId> aspectjweaver </artifactId> <version> 1.8.7 </version> </dependency> <!--\u5355\u5143\u6d4b\u8bd5\u4f9d\u8d56--> <dependency> <groupId> junit </groupId> <artifactId> junit </artifactId> <version> 4.12 </version> </dependency> </dependencies>","title":"\u672c\u6b21Spring\u6559\u7a0b\u4e2d\u6d89\u53ca\u7684\u76f8\u5173\u4f9d\u8d56"},{"location":"spring/5%E3%80%81%E6%9C%AC%E6%AC%A1Spring%E6%95%99%E7%A8%8B%E4%B8%AD%E6%B6%89%E5%8F%8A%E7%9A%84%E7%9B%B8%E5%85%B3%E4%BE%9D%E8%B5%96/#spring","text":"pom.xml \u6587\u4ef6 <packaging> jar </packaging> <dependencies> <!--\u63d0\u4f9b\u5728\u57fa\u7840IOC\u529f\u80fd\u4e0a\u7684\u6269\u5c55\u670d\u52a1\uff0c\u6b64\u5916\u8fd8\u63d0\u4f9b\u8bb8\u591a\u4f01\u4e1a\u7ea7\u670d\u52a1\u7684\u652f\u6301\uff0c\u6709\u90ae\u4ef6\u670d\u52a1\u3001\u4efb\u52a1\u8c03\u5ea6\u3001JNDI\u5b9a\u4f4d\uff0cEJB\u96c6\u6210\u3001\u8fdc\u7a0b\u8bbf\u95ee\u3001\u7f13\u5b58\u4ee5\u53ca\u591a\u79cd\u89c6\u56fe\u5c42\u6846\u67b6\u7684\u652f\u6301\u3002--> <dependency> <groupId> org.springframework </groupId> <artifactId> spring-context </artifactId> <version> 5.0.2.RELEASE </version> </dependency> <!--\u5bf9JDBC \u7684\u7b80\u5355\u5c01\u88c5--> <dependency> <groupId> org.springframework </groupId> <artifactId> spring-jdbc </artifactId> <version> 5.0.2.RELEASE </version> </dependency> <!--\u4e3aJDBC\u3001Hibernate\u3001JDO\u3001JPA\u7b49\u63d0\u4f9b\u7684\u4e00\u81f4\u7684\u58f0\u660e\u5f0f\u548c\u7f16\u7a0b\u5f0f\u4e8b\u52a1\u7ba1\u7406\u3002--> <dependency> <groupId> org.springframework </groupId> <artifactId> spring-tx </artifactId> <version> 5.0.2.RELEASE </version> </dependency> <!--\u5bf9JUNIT\u7b49\u6d4b\u8bd5\u6846\u67b6\u7684\u7b80\u5355\u5c01\u88c5--> <dependency> <groupId> org.springframework </groupId> <artifactId> spring-test </artifactId> <version> 5.0.2.RELEASE </version> </dependency> <!--mysql\u6570\u636e\u5e93\u652f\u6301--> <dependency> <groupId> mysql </groupId> <artifactId> mysql-connector-java </artifactId> <version> 5.1.6 </version> </dependency> <!--\u7528\u4e8e\u5728Spring 2.0\u4e2d\u96c6\u6210AspectJ AspectJ LTW\u7ec7\u5165\u5668 --> <dependency> <groupId> org.aspectj </groupId> <artifactId> aspectjweaver </artifactId> <version> 1.8.7 </version> </dependency> <!--\u5355\u5143\u6d4b\u8bd5\u4f9d\u8d56--> <dependency> <groupId> junit </groupId> <artifactId> junit </artifactId> <version> 4.12 </version> </dependency> </dependencies>","title":"\u672c\u6b21Spring\u6559\u7a0b\u4e2d\u6d89\u53ca\u7684\u76f8\u5173\u4f9d\u8d56"}]}